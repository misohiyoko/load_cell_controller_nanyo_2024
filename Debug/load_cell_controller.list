
load_cell_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006488  08006488  00007488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800664c  0800664c  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  0800664c  0800664c  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800664c  0800664c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800664c  0800664c  0000764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006650  08006650  00007650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006654  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000068  080066bc  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  080066bc  0000837c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001435d  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002822  00000000  00000000  0001c3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0001ec10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9f  00000000  00000000  0001fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001590d  00000000  00000000  00020d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167fc  00000000  00000000  0003663c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008553f  00000000  00000000  0004ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc8  00000000  00000000  000d23bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d7084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006470 	.word	0x08006470

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006470 	.word	0x08006470

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <SPI_Init>:
#define DUMMY         0xFF

extern SPI_HandleTypeDef hspi1;

void SPI_Init()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0

}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <SPI_Transfer>:

byte SPI_Transfer(byte data)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	0002      	movs	r2, r0
 800041c:	1dfb      	adds	r3, r7, #7
 800041e:	701a      	strb	r2, [r3, #0]
	if(data == DUMMY){
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2bff      	cmp	r3, #255	@ 0xff
 8000426:	d10a      	bne.n	800043e <SPI_Transfer+0x2a>
		byte receive;
		HAL_SPI_Receive(&hspi1, &receive, 1, 1000);
 8000428:	23fa      	movs	r3, #250	@ 0xfa
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	240f      	movs	r4, #15
 800042e:	1939      	adds	r1, r7, r4
 8000430:	4809      	ldr	r0, [pc, #36]	@ (8000458 <SPI_Transfer+0x44>)
 8000432:	2201      	movs	r2, #1
 8000434:	f002 ffe0 	bl	80033f8 <HAL_SPI_Receive>
		return receive;
 8000438:	193b      	adds	r3, r7, r4
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	e007      	b.n	800044e <SPI_Transfer+0x3a>
	}
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800043e:	23fa      	movs	r3, #250	@ 0xfa
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	1df9      	adds	r1, r7, #7
 8000444:	4804      	ldr	r0, [pc, #16]	@ (8000458 <SPI_Transfer+0x44>)
 8000446:	2201      	movs	r2, #1
 8000448:	f002 fe52 	bl	80030f0 <HAL_SPI_Transmit>
	return 0;
 800044c:	2300      	movs	r3, #0

}
 800044e:	0018      	movs	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	b005      	add	sp, #20
 8000454:	bd90      	pop	{r4, r7, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	200000d8 	.word	0x200000d8

0800045c <Get_Identification>:

void Get_Identification(byte data[3])
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	SLAVESELECT;
 8000464:	2380      	movs	r3, #128	@ 0x80
 8000466:	0059      	lsls	r1, r3, #1
 8000468:	23a0      	movs	r3, #160	@ 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	2200      	movs	r2, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f001 f98a 	bl	8001788 <HAL_GPIO_WritePin>
	SPI_Transfer(COMMAND_RDID);
 8000474:	209f      	movs	r0, #159	@ 0x9f
 8000476:	f7ff ffcd 	bl	8000414 <SPI_Transfer>
	///byte command[1] = {COMMAND_RDID};
	///HAL_SPI_TransmitReceive(&hspi1, command, data, 4, 1000);
	data[0] = SPI_Transfer(DUMMY);
 800047a:	20ff      	movs	r0, #255	@ 0xff
 800047c:	f7ff ffca 	bl	8000414 <SPI_Transfer>
 8000480:	0003      	movs	r3, r0
 8000482:	001a      	movs	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	701a      	strb	r2, [r3, #0]
	data[1] = SPI_Transfer(DUMMY);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	1c5c      	adds	r4, r3, #1
 800048c:	20ff      	movs	r0, #255	@ 0xff
 800048e:	f7ff ffc1 	bl	8000414 <SPI_Transfer>
 8000492:	0003      	movs	r3, r0
 8000494:	7023      	strb	r3, [r4, #0]
	data[2] = SPI_Transfer(DUMMY);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	1c9c      	adds	r4, r3, #2
 800049a:	20ff      	movs	r0, #255	@ 0xff
 800049c:	f7ff ffba 	bl	8000414 <SPI_Transfer>
 80004a0:	0003      	movs	r3, r0
 80004a2:	7023      	strb	r3, [r4, #0]
	SLAVEDESELECT;
 80004a4:	2380      	movs	r3, #128	@ 0x80
 80004a6:	0059      	lsls	r1, r3, #1
 80004a8:	23a0      	movs	r3, #160	@ 0xa0
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	2201      	movs	r2, #1
 80004ae:	0018      	movs	r0, r3
 80004b0:	f001 f96a 	bl	8001788 <HAL_GPIO_WritePin>
}
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b003      	add	sp, #12
 80004ba:	bd90      	pop	{r4, r7, pc}

080004bc <GetStatus>:

byte GetStatus()
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
	byte status;
	SLAVESELECT;
 80004c2:	2380      	movs	r3, #128	@ 0x80
 80004c4:	0059      	lsls	r1, r3, #1
 80004c6:	23a0      	movs	r3, #160	@ 0xa0
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	2200      	movs	r2, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 f95b 	bl	8001788 <HAL_GPIO_WritePin>
	SPI_Transfer(COMMAND_RDSR);
 80004d2:	2005      	movs	r0, #5
 80004d4:	f7ff ff9e 	bl	8000414 <SPI_Transfer>
	status = SPI_Transfer(DUMMY);
 80004d8:	1dfc      	adds	r4, r7, #7
 80004da:	20ff      	movs	r0, #255	@ 0xff
 80004dc:	f7ff ff9a 	bl	8000414 <SPI_Transfer>
 80004e0:	0003      	movs	r3, r0
 80004e2:	7023      	strb	r3, [r4, #0]
	SLAVEDESELECT;
 80004e4:	2380      	movs	r3, #128	@ 0x80
 80004e6:	0059      	lsls	r1, r3, #1
 80004e8:	23a0      	movs	r3, #160	@ 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	2201      	movs	r2, #1
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 f94a 	bl	8001788 <HAL_GPIO_WritePin>
	return status;
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	781b      	ldrb	r3, [r3, #0]
}
 80004f8:	0018      	movs	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b003      	add	sp, #12
 80004fe:	bd90      	pop	{r4, r7, pc}

08000500 <SetWriteEnable>:

void SetWriteEnable(bool enable)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	0002      	movs	r2, r0
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	801a      	strh	r2, [r3, #0]
	SLAVESELECT;
 800050c:	2380      	movs	r3, #128	@ 0x80
 800050e:	0059      	lsls	r1, r3, #1
 8000510:	23a0      	movs	r3, #160	@ 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2200      	movs	r2, #0
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f936 	bl	8001788 <HAL_GPIO_WritePin>
	SPI_Transfer(enable ? COMMAND_WREN : COMMAND_WRDI);
 800051c:	1dbb      	adds	r3, r7, #6
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SetWriteEnable+0x28>
 8000524:	2306      	movs	r3, #6
 8000526:	e000      	b.n	800052a <SetWriteEnable+0x2a>
 8000528:	2304      	movs	r3, #4
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff ff72 	bl	8000414 <SPI_Transfer>
	SLAVEDESELECT;
 8000530:	2380      	movs	r3, #128	@ 0x80
 8000532:	0059      	lsls	r1, r3, #1
 8000534:	23a0      	movs	r3, #160	@ 0xa0
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	2201      	movs	r2, #1
 800053a:	0018      	movs	r0, r3
 800053c:	f001 f924 	bl	8001788 <HAL_GPIO_WritePin>
}
 8000540:	46c0      	nop			@ (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b002      	add	sp, #8
 8000546:	bd80      	pop	{r7, pc}

08000548 <SetStatus>:

void SetStatus(byte status)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	0002      	movs	r2, r0
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	701a      	strb	r2, [r3, #0]
	SetWriteEnable(true);
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ffd3 	bl	8000500 <SetWriteEnable>
	SLAVESELECT;
 800055a:	2380      	movs	r3, #128	@ 0x80
 800055c:	0059      	lsls	r1, r3, #1
 800055e:	23a0      	movs	r3, #160	@ 0xa0
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2200      	movs	r2, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f001 f90f 	bl	8001788 <HAL_GPIO_WritePin>
	SPI_Transfer(COMMAND_WRSR);
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff ff52 	bl	8000414 <SPI_Transfer>
	SPI_Transfer(status);
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff ff4d 	bl	8000414 <SPI_Transfer>
	SLAVEDESELECT;
 800057a:	2380      	movs	r3, #128	@ 0x80
 800057c:	0059      	lsls	r1, r3, #1
 800057e:	23a0      	movs	r3, #160	@ 0xa0
 8000580:	05db      	lsls	r3, r3, #23
 8000582:	2201      	movs	r2, #1
 8000584:	0018      	movs	r0, r3
 8000586:	f001 f8ff 	bl	8001788 <HAL_GPIO_WritePin>
}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	b0cb      	sub	sp, #300	@ 0x12c
 8000598:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800059a:	4b8d      	ldr	r3, [pc, #564]	@ (80007d0 <main+0x23c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	2100      	movs	r1, #0
 80005a2:	0018      	movs	r0, r3
 80005a4:	f004 fe98 	bl	80052d8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fe05 	bl	80011b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f934 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fad2 	bl	8000b58 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005b4:	f000 f974 	bl	80008a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005b8:	f000 f9b2 	bl	8000920 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005bc:	f000 f9ee 	bl	800099c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 fa96 	bl	8000af0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n");
 80005c4:	4b83      	ldr	r3, [pc, #524]	@ (80007d4 <main+0x240>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f005 f8e6 	bl	8005798 <puts>

   	printf("Scanning I2C bus:\r\n");
 80005cc:	4b82      	ldr	r3, [pc, #520]	@ (80007d8 <main+0x244>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f005 f8e2 	bl	8005798 <puts>
  	HAL_StatusTypeDef result;
   	uint8_t i;
   	for (i=1; i<128; i++)
 80005d4:	2318      	movs	r3, #24
 80005d6:	33ff      	adds	r3, #255	@ 0xff
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	e02c      	b.n	800063a <main+0xa6>
   	   * &hi2c1 is the handle
   	   * (uint16_t)(i<<1) is the i2c address left aligned
   	   * retries 2
   	   * timeout 2
   	   */
   	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 80005e0:	2318      	movs	r3, #24
 80005e2:	33ff      	adds	r3, #255	@ 0xff
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	18db      	adds	r3, r3, r3
 80005ec:	b299      	uxth	r1, r3
 80005ee:	1d3c      	adds	r4, r7, #4
 80005f0:	34ff      	adds	r4, #255	@ 0xff
 80005f2:	487a      	ldr	r0, [pc, #488]	@ (80007dc <main+0x248>)
 80005f4:	2302      	movs	r3, #2
 80005f6:	2202      	movs	r2, #2
 80005f8:	f001 fbfa 	bl	8001df0 <HAL_I2C_IsDeviceReady>
 80005fc:	0003      	movs	r3, r0
 80005fe:	7023      	strb	r3, [r4, #0]
   	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	33ff      	adds	r3, #255	@ 0xff
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <main+0x7c>
   	  {
   		  printf("."); // No ACK received at that address
 800060a:	202e      	movs	r0, #46	@ 0x2e
 800060c:	f005 f864 	bl	80056d8 <putchar>
   	  }
   	  if (result == HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	33ff      	adds	r3, #255	@ 0xff
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d108      	bne.n	800062c <main+0x98>
   	  {
   		  printf("0x%X", i); // Received an ACK at that address
 800061a:	2318      	movs	r3, #24
 800061c:	33ff      	adds	r3, #255	@ 0xff
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	781a      	ldrb	r2, [r3, #0]
 8000622:	4b6f      	ldr	r3, [pc, #444]	@ (80007e0 <main+0x24c>)
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f005 f846 	bl	80056b8 <iprintf>
   	for (i=1; i<128; i++)
 800062c:	2118      	movs	r1, #24
 800062e:	31ff      	adds	r1, #255	@ 0xff
 8000630:	187b      	adds	r3, r7, r1
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	187b      	adds	r3, r7, r1
 8000636:	3201      	adds	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	2318      	movs	r3, #24
 800063c:	33ff      	adds	r3, #255	@ 0xff
 800063e:	18fb      	adds	r3, r7, r3
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b25b      	sxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	dacb      	bge.n	80005e0 <main+0x4c>
   	  }
   	}
   	printf("\r\n");
 8000648:	4b62      	ldr	r3, [pc, #392]	@ (80007d4 <main+0x240>)
 800064a:	0018      	movs	r0, r3
 800064c:	f005 f8a4 	bl	8005798 <puts>
   	write_i2c_value(0b00000000);
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fb1f 	bl	8000c94 <write_i2c_value>

   	SPI_Init();
 8000656:	f7ff fed7 	bl	8000408 <SPI_Init>
	SetStatus(0x00);
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ff74 	bl	8000548 <SetStatus>
	byte status = GetStatus();
 8000660:	250c      	movs	r5, #12
 8000662:	35ff      	adds	r5, #255	@ 0xff
 8000664:	197c      	adds	r4, r7, r5
 8000666:	f7ff ff29 	bl	80004bc <GetStatus>
 800066a:	0003      	movs	r3, r0
 800066c:	7023      	strb	r3, [r4, #0]
	printf("\r\nGet status:%d\r\n",status);
 800066e:	197b      	adds	r3, r7, r5
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	4b5c      	ldr	r3, [pc, #368]	@ (80007e4 <main+0x250>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f005 f81e 	bl	80056b8 <iprintf>
	printf("-----------------\r\n");
 800067c:	4b5a      	ldr	r3, [pc, #360]	@ (80007e8 <main+0x254>)
 800067e:	0018      	movs	r0, r3
 8000680:	f005 f88a 	bl	8005798 <puts>
	char buffer[257];
	Get_Identification((byte *)buffer);
 8000684:	003b      	movs	r3, r7
 8000686:	0018      	movs	r0, r3
 8000688:	f7ff fee8 	bl	800045c <Get_Identification>
	printf("Identification read:\r\n");
 800068c:	4b57      	ldr	r3, [pc, #348]	@ (80007ec <main+0x258>)
 800068e:	0018      	movs	r0, r3
 8000690:	f005 f882 	bl	8005798 <puts>
	printf("Byte 0: %x\r\n", buffer[0]);
 8000694:	4b56      	ldr	r3, [pc, #344]	@ (80007f0 <main+0x25c>)
 8000696:	248c      	movs	r4, #140	@ 0x8c
 8000698:	0064      	lsls	r4, r4, #1
 800069a:	191b      	adds	r3, r3, r4
 800069c:	19db      	adds	r3, r3, r7
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	001a      	movs	r2, r3
 80006a2:	4b54      	ldr	r3, [pc, #336]	@ (80007f4 <main+0x260>)
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f005 f806 	bl	80056b8 <iprintf>
	printf("Byte 1: %x\r\n", buffer[1]);
 80006ac:	4b50      	ldr	r3, [pc, #320]	@ (80007f0 <main+0x25c>)
 80006ae:	191b      	adds	r3, r3, r4
 80006b0:	19db      	adds	r3, r3, r7
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	001a      	movs	r2, r3
 80006b6:	4b50      	ldr	r3, [pc, #320]	@ (80007f8 <main+0x264>)
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f004 fffc 	bl	80056b8 <iprintf>
	printf("Byte 2: %x\r\n", buffer[2]);
 80006c0:	4b4b      	ldr	r3, [pc, #300]	@ (80007f0 <main+0x25c>)
 80006c2:	191b      	adds	r3, r3, r4
 80006c4:	19db      	adds	r3, r3, r7
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	001a      	movs	r2, r3
 80006ca:	4b4c      	ldr	r3, [pc, #304]	@ (80007fc <main+0x268>)
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f004 fff2 	bl	80056b8 <iprintf>
	printf("-----------------\r\n");
 80006d4:	4b44      	ldr	r3, [pc, #272]	@ (80007e8 <main+0x254>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f005 f85e 	bl	8005798 <puts>


	for(int i = 0; i < 10; i++){
 80006dc:	2300      	movs	r3, #0
 80006de:	2288      	movs	r2, #136	@ 0x88
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	18ba      	adds	r2, r7, r2
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	e013      	b.n	8000710 <main+0x17c>
		offset += read_i2c_value();
 80006e8:	f000 faac 	bl	8000c44 <read_i2c_value>
 80006ec:	0002      	movs	r2, r0
 80006ee:	4b44      	ldr	r3, [pc, #272]	@ (8000800 <main+0x26c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	18d2      	adds	r2, r2, r3
 80006f4:	4b42      	ldr	r3, [pc, #264]	@ (8000800 <main+0x26c>)
 80006f6:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 80006f8:	23fa      	movs	r3, #250	@ 0xfa
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fdd7 	bl	80012b0 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8000702:	2288      	movs	r2, #136	@ 0x88
 8000704:	0052      	lsls	r2, r2, #1
 8000706:	18bb      	adds	r3, r7, r2
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	18ba      	adds	r2, r7, r2
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	2388      	movs	r3, #136	@ 0x88
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b09      	cmp	r3, #9
 800071a:	dde5      	ble.n	80006e8 <main+0x154>
	}
	offset /= 10;
 800071c:	4b38      	ldr	r3, [pc, #224]	@ (8000800 <main+0x26c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	210a      	movs	r1, #10
 8000722:	0018      	movs	r0, r3
 8000724:	f7ff fd84 	bl	8000230 <__divsi3>
 8000728:	0003      	movs	r3, r0
 800072a:	001a      	movs	r2, r3
 800072c:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <main+0x26c>)
 800072e:	601a      	str	r2, [r3, #0]
	printf("offset:%d", offset);
 8000730:	4b33      	ldr	r3, [pc, #204]	@ (8000800 <main+0x26c>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b33      	ldr	r3, [pc, #204]	@ (8000804 <main+0x270>)
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f004 ffbd 	bl	80056b8 <iprintf>
  /* USER CODE BEGIN WHILE */
#define SCALE 100000
  while (1)
  {

	  int val = read_i2c_value() - offset;
 800073e:	f000 fa81 	bl	8000c44 <read_i2c_value>
 8000742:	0002      	movs	r2, r0
 8000744:	4b2e      	ldr	r3, [pc, #184]	@ (8000800 <main+0x26c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	2286      	movs	r2, #134	@ 0x86
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	18b9      	adds	r1, r7, r2
 8000750:	600b      	str	r3, [r1, #0]
	  if (val < 0){val = 0;}
 8000752:	18bb      	adds	r3, r7, r2
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da02      	bge.n	8000760 <main+0x1cc>
 800075a:	2300      	movs	r3, #0
 800075c:	18ba      	adds	r2, r7, r2
 800075e:	6013      	str	r3, [r2, #0]
	  long int scaled_val = val * 178;
 8000760:	2386      	movs	r3, #134	@ 0x86
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	18fa      	adds	r2, r7, r3
 8000766:	6813      	ldr	r3, [r2, #0]
 8000768:	22b2      	movs	r2, #178	@ 0xb2
 800076a:	4353      	muls	r3, r2
 800076c:	1d7a      	adds	r2, r7, #5
 800076e:	32ff      	adds	r2, #255	@ 0xff
 8000770:	6013      	str	r3, [r2, #0]
	  printf("%ld %ld : %ld.%ld, wtg: %d, %d\r\n", val,scaled_val, scaled_val / SCALE, scaled_val % SCALE,writing,address);
 8000772:	1d7a      	adds	r2, r7, #5
 8000774:	32ff      	adds	r2, #255	@ 0xff
 8000776:	6813      	ldr	r3, [r2, #0]
 8000778:	4923      	ldr	r1, [pc, #140]	@ (8000808 <main+0x274>)
 800077a:	0018      	movs	r0, r3
 800077c:	f7ff fd58 	bl	8000230 <__divsi3>
 8000780:	0003      	movs	r3, r0
 8000782:	001e      	movs	r6, r3
 8000784:	1d7a      	adds	r2, r7, #5
 8000786:	32ff      	adds	r2, #255	@ 0xff
 8000788:	6813      	ldr	r3, [r2, #0]
 800078a:	491f      	ldr	r1, [pc, #124]	@ (8000808 <main+0x274>)
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff fe35 	bl	80003fc <__aeabi_idivmod>
 8000792:	000b      	movs	r3, r1
 8000794:	001d      	movs	r5, r3
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <main+0x278>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <main+0x27c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1d78      	adds	r0, r7, #5
 80007a0:	30ff      	adds	r0, #255	@ 0xff
 80007a2:	6804      	ldr	r4, [r0, #0]
 80007a4:	2186      	movs	r1, #134	@ 0x86
 80007a6:	0049      	lsls	r1, r1, #1
 80007a8:	1879      	adds	r1, r7, r1
 80007aa:	6809      	ldr	r1, [r1, #0]
 80007ac:	4819      	ldr	r0, [pc, #100]	@ (8000814 <main+0x280>)
 80007ae:	9302      	str	r3, [sp, #8]
 80007b0:	9201      	str	r2, [sp, #4]
 80007b2:	9500      	str	r5, [sp, #0]
 80007b4:	0033      	movs	r3, r6
 80007b6:	0022      	movs	r2, r4
 80007b8:	f004 ff7e 	bl	80056b8 <iprintf>
	  address += 1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <main+0x27c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <main+0x27c>)
 80007c4:	601a      	str	r2, [r3, #0]
	  HAL_Delay(100);
 80007c6:	2064      	movs	r0, #100	@ 0x64
 80007c8:	f000 fd72 	bl	80012b0 <HAL_Delay>
  {
 80007cc:	e7b7      	b.n	800073e <main+0x1aa>
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	20000018 	.word	0x20000018
 80007d4:	08006488 	.word	0x08006488
 80007d8:	0800648c 	.word	0x0800648c
 80007dc:	20000084 	.word	0x20000084
 80007e0:	080064a0 	.word	0x080064a0
 80007e4:	080064a8 	.word	0x080064a8
 80007e8:	080064bc 	.word	0x080064bc
 80007ec:	080064d0 	.word	0x080064d0
 80007f0:	fffffee8 	.word	0xfffffee8
 80007f4:	080064e8 	.word	0x080064e8
 80007f8:	080064f8 	.word	0x080064f8
 80007fc:	08006508 	.word	0x08006508
 8000800:	2000021c 	.word	0x2000021c
 8000804:	08006518 	.word	0x08006518
 8000808:	000186a0 	.word	0x000186a0
 800080c:	20000220 	.word	0x20000220
 8000810:	20000224 	.word	0x20000224
 8000814:	08006524 	.word	0x08006524

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b08d      	sub	sp, #52	@ 0x34
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	2414      	movs	r4, #20
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	231c      	movs	r3, #28
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f004 ffbf 	bl	80057ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082e:	003b      	movs	r3, r7
 8000830:	0018      	movs	r0, r3
 8000832:	2314      	movs	r3, #20
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f004 ffb8 	bl	80057ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2202      	movs	r2, #2
 8000840:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	0152      	lsls	r2, r2, #5
 8000850:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2240      	movs	r2, #64	@ 0x40
 8000856:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	193b      	adds	r3, r7, r4
 800085a:	0018      	movs	r0, r3
 800085c:	f001 ff30 	bl	80026c0 <HAL_RCC_OscConfig>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000864:	f000 fa3c 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	003b      	movs	r3, r7
 800086a:	2207      	movs	r2, #7
 800086c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086e:	003b      	movs	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	003b      	movs	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800087a:	003b      	movs	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000880:	003b      	movs	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000886:	003b      	movs	r3, r7
 8000888:	2100      	movs	r1, #0
 800088a:	0018      	movs	r0, r3
 800088c:	f002 f8fc 	bl	8002a88 <HAL_RCC_ClockConfig>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000894:	f000 fa24 	bl	8000ce0 <Error_Handler>
  }
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b00d      	add	sp, #52	@ 0x34
 800089e:	bd90      	pop	{r4, r7, pc}

080008a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_I2C1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <MX_I2C1_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 ffaf 	bl	8001840 <HAL_I2C_Init>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 f9fb 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ec:	2100      	movs	r1, #0
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 fe4e 	bl	8002590 <HAL_I2CEx_ConfigAnalogFilter>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 f9f2 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008fe:	2100      	movs	r1, #0
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fe91 	bl	8002628 <HAL_I2CEx_ConfigDigitalFilter>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f9e9 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000084 	.word	0x20000084
 8000918:	40005400 	.word	0x40005400
 800091c:	00402d41 	.word	0x00402d41

08000920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_SPI1_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	@ (8000998 <MX_SPI1_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_SPI1_Init+0x74>)
 800092c:	2282      	movs	r2, #130	@ 0x82
 800092e:	0052      	lsls	r2, r2, #1
 8000930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_SPI1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000938:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_SPI1_Init+0x74>)
 800093a:	22e0      	movs	r2, #224	@ 0xe0
 800093c:	00d2      	lsls	r2, r2, #3
 800093e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_SPI1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_SPI1_Init+0x74>)
 800094e:	2280      	movs	r2, #128	@ 0x80
 8000950:	0092      	lsls	r2, r2, #2
 8000952:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_SPI1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_SPI1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_SPI1_Init+0x74>)
 800096e:	2207      	movs	r2, #7
 8000970:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_SPI1_Init+0x74>)
 800097a:	2208      	movs	r2, #8
 800097c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800097e:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <MX_SPI1_Init+0x74>)
 8000980:	0018      	movs	r0, r3
 8000982:	f002 fafd 	bl	8002f80 <HAL_SPI_Init>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 f9a9 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000d8 	.word	0x200000d8
 8000998:	40013000 	.word	0x40013000

0800099c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b098      	sub	sp, #96	@ 0x60
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	2354      	movs	r3, #84	@ 0x54
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	0018      	movs	r0, r3
 80009a8:	230c      	movs	r3, #12
 80009aa:	001a      	movs	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f004 fefd 	bl	80057ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b2:	2338      	movs	r3, #56	@ 0x38
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	0018      	movs	r0, r3
 80009b8:	231c      	movs	r3, #28
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f004 fef5 	bl	80057ac <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2334      	movs	r3, #52	@ 0x34
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f004 feee 	bl	80057ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d0:	4b44      	ldr	r3, [pc, #272]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 80009d2:	4a45      	ldr	r2, [pc, #276]	@ (8000ae8 <MX_TIM1_Init+0x14c>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1024;
 80009d6:	4b43      	ldr	r3, [pc, #268]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 80009d8:	2280      	movs	r2, #128	@ 0x80
 80009da:	00d2      	lsls	r2, r2, #3
 80009dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b41      	ldr	r3, [pc, #260]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009e4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 80009e6:	4a41      	ldr	r2, [pc, #260]	@ (8000aec <MX_TIM1_Init+0x150>)
 80009e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009fc:	4b39      	ldr	r3, [pc, #228]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f003 fa52 	bl	8003ea8 <HAL_TIM_PWM_Init>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000a08:	f000 f96a 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2154      	movs	r1, #84	@ 0x54
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a20:	187a      	adds	r2, r7, r1
 8000a22:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 8000a24:	0011      	movs	r1, r2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f003 feac 	bl	8004784 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a30:	f000 f956 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a34:	2138      	movs	r1, #56	@ 0x38
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2260      	movs	r2, #96	@ 0x60
 8000a3a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a5a:	1879      	adds	r1, r7, r1
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	0018      	movs	r0, r3
 8000a62:	f003 fa79 	bl	8003f58 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000a6a:	f000 f939 	bl	8000ce0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2280      	movs	r2, #128	@ 0x80
 8000a90:	0192      	lsls	r2, r2, #6
 8000a92:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2280      	movs	r2, #128	@ 0x80
 8000aaa:	0492      	lsls	r2, r2, #18
 8000aac:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac0:	1d3a      	adds	r2, r7, #4
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f003 febe 	bl	8004848 <HAL_TIMEx_ConfigBreakDeadTime>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000ad0:	f000 f906 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <MX_TIM1_Init+0x148>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fa0e 	bl	8000ef8 <HAL_TIM_MspPostInit>

}
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b018      	add	sp, #96	@ 0x60
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000013c 	.word	0x2000013c
 8000ae8:	40012c00 	.word	0x40012c00
 8000aec:	0000ffff 	.word	0x0000ffff

08000af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000af6:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <MX_USART2_UART_Init+0x64>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000afc:	22e1      	movs	r2, #225	@ 0xe1
 8000afe:	0252      	lsls	r2, r2, #9
 8000b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <MX_USART2_UART_Init+0x60>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f003 ff20 	bl	8004980 <HAL_UART_Init>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 f8cc 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	20000188 	.word	0x20000188
 8000b54:	40004400 	.word	0x40004400

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	240c      	movs	r4, #12
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	0018      	movs	r0, r3
 8000b64:	2314      	movs	r3, #20
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f004 fe1f 	bl	80057ac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <MX_GPIO_Init+0xbc>)
 8000b70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b72:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <MX_GPIO_Init+0xbc>)
 8000b74:	2102      	movs	r1, #2
 8000b76:	430a      	orrs	r2, r1
 8000b78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b7a:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <MX_GPIO_Init+0xbc>)
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7e:	2202      	movs	r2, #2
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <MX_GPIO_Init+0xbc>)
 8000b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8a:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <MX_GPIO_Init+0xbc>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <MX_GPIO_Init+0xbc>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b96:	2201      	movs	r2, #1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b9e:	2380      	movs	r3, #128	@ 0x80
 8000ba0:	0059      	lsls	r1, r3, #1
 8000ba2:	23a0      	movs	r3, #160	@ 0xa0
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 fded 	bl	8001788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2280      	movs	r2, #128	@ 0x80
 8000bb2:	0052      	lsls	r2, r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2201      	movs	r2, #1
 8000bba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	193a      	adds	r2, r7, r4
 8000bca:	23a0      	movs	r3, #160	@ 0xa0
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	0011      	movs	r1, r2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f000 fc6f 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000bd6:	0021      	movs	r1, r4
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2280      	movs	r2, #128	@ 0x80
 8000bdc:	0152      	lsls	r2, r2, #5
 8000bde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <MX_GPIO_Init+0xc0>)
 8000be4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000bec:	187a      	adds	r2, r7, r1
 8000bee:	23a0      	movs	r3, #160	@ 0xa0
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 fc5d 	bl	80014b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f000 fc26 	bl	8001450 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c04:	2007      	movs	r0, #7
 8000c06:	f000 fc38 	bl	800147a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b009      	add	sp, #36	@ 0x24
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	40021000 	.word	0x40021000
 8000c18:	10110000 	.word	0x10110000

08000c1c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <_write+0x24>)
 8000c30:	230a      	movs	r3, #10
 8000c32:	f003 fefb 	bl	8004a2c <HAL_UART_Transmit>
  return len;
 8000c36:	687b      	ldr	r3, [r7, #4]
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b004      	add	sp, #16
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000188 	.word	0x20000188

08000c44 <read_i2c_value>:
{
	writing = !writing;
}
}

int read_i2c_value(){
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef s;
	uint8_t err;
	uint8_t buf[2] = {};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	801a      	strh	r2, [r3, #0]
	s = HAL_I2C_Master_Receive(&hi2c1, I2C_ADDRESS, (uint8_t *)buf, 2, 3000);
 8000c50:	1dfc      	adds	r4, r7, #7
 8000c52:	1d3a      	adds	r2, r7, #4
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <read_i2c_value+0x48>)
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <read_i2c_value+0x4c>)
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	2130      	movs	r1, #48	@ 0x30
 8000c5e:	f000 ffbf 	bl	8001be0 <HAL_I2C_Master_Receive>
 8000c62:	0003      	movs	r3, r0
 8000c64:	7023      	strb	r3, [r4, #0]
	if (HAL_OK == s)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d106      	bne.n	8000c7c <read_i2c_value+0x38>
	{
		return buf[0] << 8 | buf[1];
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	1d3a      	adds	r2, r7, #4
 8000c76:	7852      	ldrb	r2, [r2, #1]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	e002      	b.n	8000c82 <read_i2c_value+0x3e>
	}
	return -1 * (int)s;
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	425b      	negs	r3, r3
}
 8000c82:	0018      	movs	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b003      	add	sp, #12
 8000c88:	bd90      	pop	{r4, r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	20000084 	.word	0x20000084
 8000c90:	00000bb8 	.word	0x00000bb8

08000c94 <write_i2c_value>:
void write_i2c_value(unsigned char value){
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef s;
	uint8_t err;
	uint8_t buf[1] = {};
 8000ca0:	210c      	movs	r1, #12
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd4 <write_i2c_value+0x40>)
 8000ca6:	7812      	ldrb	r2, [r2, #0]
 8000ca8:	701a      	strb	r2, [r3, #0]
	buf[0] = value;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	1dfa      	adds	r2, r7, #7
 8000cae:	7812      	ldrb	r2, [r2, #0]
 8000cb0:	701a      	strb	r2, [r3, #0]
	s = HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, buf, 1, 3000);
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	18fc      	adds	r4, r7, r3
 8000cb6:	187a      	adds	r2, r7, r1
 8000cb8:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <write_i2c_value+0x44>)
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <write_i2c_value+0x48>)
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	2130      	movs	r1, #48	@ 0x30
 8000cc2:	f000 fe63 	bl	800198c <HAL_I2C_Master_Transmit>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	7023      	strb	r3, [r4, #0]
}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b005      	add	sp, #20
 8000cd0:	bd90      	pop	{r4, r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	08006548 	.word	0x08006548
 8000cd8:	20000084 	.word	0x20000084
 8000cdc:	00000bb8 	.word	0x00000bb8

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	e7fd      	b.n	8000ce8 <Error_Handler+0x8>

08000cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <HAL_MspInit+0x44>)
 8000cf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_MspInit+0x44>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <HAL_MspInit+0x44>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	2201      	movs	r2, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <HAL_MspInit+0x44>)
 8000d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <HAL_MspInit+0x44>)
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0549      	lsls	r1, r1, #21
 8000d14:	430a      	orrs	r2, r1
 8000d16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <HAL_MspInit+0x44>)
 8000d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d1c:	2380      	movs	r3, #128	@ 0x80
 8000d1e:	055b      	lsls	r3, r3, #21
 8000d20:	4013      	ands	r3, r2
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b091      	sub	sp, #68	@ 0x44
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	232c      	movs	r3, #44	@ 0x2c
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	0018      	movs	r0, r3
 8000d42:	2314      	movs	r3, #20
 8000d44:	001a      	movs	r2, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	f004 fd30 	bl	80057ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	2410      	movs	r4, #16
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	0018      	movs	r0, r3
 8000d52:	231c      	movs	r3, #28
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f004 fd28 	bl	80057ac <memset>
  if(hi2c->Instance==I2C1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a22      	ldr	r2, [pc, #136]	@ (8000dec <HAL_I2C_MspInit+0xb8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d13d      	bne.n	8000de2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	2202      	movs	r2, #2
 8000d6a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d6c:	193b      	adds	r3, r7, r4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	0018      	movs	r0, r3
 8000d76:	f002 f817 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d7e:	f7ff ffaf 	bl	8000ce0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <HAL_I2C_MspInit+0xbc>)
 8000d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d86:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <HAL_I2C_MspInit+0xbc>)
 8000d88:	2102      	movs	r1, #2
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <HAL_I2C_MspInit+0xbc>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d92:	2202      	movs	r2, #2
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000d9a:	212c      	movs	r1, #44	@ 0x2c
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	22c0      	movs	r2, #192	@ 0xc0
 8000da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2212      	movs	r2, #18
 8000da6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2206      	movs	r2, #6
 8000db8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <HAL_I2C_MspInit+0xc0>)
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	0010      	movs	r0, r2
 8000dc2:	f000 fb77 	bl	80014b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_I2C_MspInit+0xbc>)
 8000dc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <HAL_I2C_MspInit+0xbc>)
 8000dcc:	2180      	movs	r1, #128	@ 0x80
 8000dce:	0389      	lsls	r1, r1, #14
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_I2C_MspInit+0xbc>)
 8000dd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dd8:	2380      	movs	r3, #128	@ 0x80
 8000dda:	039b      	lsls	r3, r3, #14
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b011      	add	sp, #68	@ 0x44
 8000de8:	bd90      	pop	{r4, r7, pc}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	40005400 	.word	0x40005400
 8000df0:	40021000 	.word	0x40021000
 8000df4:	50000400 	.word	0x50000400

08000df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b091      	sub	sp, #68	@ 0x44
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	232c      	movs	r3, #44	@ 0x2c
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	0018      	movs	r0, r3
 8000e06:	2314      	movs	r3, #20
 8000e08:	001a      	movs	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	f004 fcce 	bl	80057ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e10:	2410      	movs	r4, #16
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	0018      	movs	r0, r3
 8000e16:	231c      	movs	r3, #28
 8000e18:	001a      	movs	r2, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	f004 fcc6 	bl	80057ac <memset>
  if(hspi->Instance==SPI1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a22      	ldr	r2, [pc, #136]	@ (8000eb0 <HAL_SPI_MspInit+0xb8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d13e      	bne.n	8000ea8 <HAL_SPI_MspInit+0xb0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000e30:	193b      	adds	r3, r7, r4
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e36:	193b      	adds	r3, r7, r4
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f001 ffb5 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000e42:	f7ff ff4d 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e46:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <HAL_SPI_MspInit+0xbc>)
 8000e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <HAL_SPI_MspInit+0xbc>)
 8000e4c:	2180      	movs	r1, #128	@ 0x80
 8000e4e:	0149      	lsls	r1, r1, #5
 8000e50:	430a      	orrs	r2, r1
 8000e52:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e54:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <HAL_SPI_MspInit+0xbc>)
 8000e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e58:	2380      	movs	r3, #128	@ 0x80
 8000e5a:	015b      	lsls	r3, r3, #5
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_SPI_MspInit+0xbc>)
 8000e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <HAL_SPI_MspInit+0xbc>)
 8000e68:	2101      	movs	r1, #1
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_SPI_MspInit+0xbc>)
 8000e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e72:	2201      	movs	r2, #1
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e7a:	212c      	movs	r1, #44	@ 0x2c
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	22e0      	movs	r2, #224	@ 0xe0
 8000e80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2202      	movs	r2, #2
 8000e86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2203      	movs	r2, #3
 8000e92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	187a      	adds	r2, r7, r1
 8000e9c:	23a0      	movs	r3, #160	@ 0xa0
 8000e9e:	05db      	lsls	r3, r3, #23
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fb06 	bl	80014b4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b011      	add	sp, #68	@ 0x44
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	40013000 	.word	0x40013000
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10d      	bne.n	8000ee6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ed0:	2180      	movs	r1, #128	@ 0x80
 8000ed2:	0109      	lsls	r1, r1, #4
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000edc:	2380      	movs	r3, #128	@ 0x80
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b004      	add	sp, #16
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	40012c00 	.word	0x40012c00
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	240c      	movs	r4, #12
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	0018      	movs	r0, r3
 8000f06:	2314      	movs	r3, #20
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	f004 fc4e 	bl	80057ac <memset>
  if(htim->Instance==TIM1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <HAL_TIM_MspPostInit+0x74>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d123      	bne.n	8000f62 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <HAL_TIM_MspPostInit+0x78>)
 8000f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <HAL_TIM_MspPostInit+0x78>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_TIM_MspPostInit+0x78>)
 8000f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	2280      	movs	r2, #128	@ 0x80
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	0021      	movs	r1, r4
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2202      	movs	r2, #2
 8000f40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2202      	movs	r2, #2
 8000f52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	187a      	adds	r2, r7, r1
 8000f56:	23a0      	movs	r3, #160	@ 0xa0
 8000f58:	05db      	lsls	r3, r3, #23
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f000 faa9 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b009      	add	sp, #36	@ 0x24
 8000f68:	bd90      	pop	{r4, r7, pc}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	40012c00 	.word	0x40012c00
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b08b      	sub	sp, #44	@ 0x2c
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	2414      	movs	r4, #20
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0018      	movs	r0, r3
 8000f82:	2314      	movs	r3, #20
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f004 fc10 	bl	80057ac <memset>
  if(huart->Instance==USART2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <HAL_UART_MspInit+0x8c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d130      	bne.n	8000ff8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f96:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <HAL_UART_MspInit+0x90>)
 8000f98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <HAL_UART_MspInit+0x90>)
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0289      	lsls	r1, r1, #10
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fa4:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <HAL_UART_MspInit+0x90>)
 8000fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	029b      	lsls	r3, r3, #10
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <HAL_UART_MspInit+0x90>)
 8000fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <HAL_UART_MspInit+0x90>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_UART_MspInit+0x90>)
 8000fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fca:	0021      	movs	r1, r4
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	187a      	adds	r2, r7, r1
 8000fec:	23a0      	movs	r3, #160	@ 0xa0
 8000fee:	05db      	lsls	r3, r3, #23
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 fa5e 	bl	80014b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ff8:	46c0      	nop			@ (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b00b      	add	sp, #44	@ 0x2c
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	40004400 	.word	0x40004400
 8001004:	40021000 	.word	0x40021000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	46c0      	nop			@ (mov r8, r8)
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f922 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	46c0      	nop			@ (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 800103e:	2380      	movs	r3, #128	@ 0x80
 8001040:	015b      	lsls	r3, r3, #5
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fbbe 	bl	80017c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e00a      	b.n	8001076 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001060:	e000      	b.n	8001064 <_read+0x16>
 8001062:	bf00      	nop
 8001064:	0001      	movs	r1, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	60ba      	str	r2, [r7, #8]
 800106c:	b2ca      	uxtb	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3301      	adds	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	dbf0      	blt.n	8001060 <_read+0x12>
  }

  return len;
 800107e:	687b      	ldr	r3, [r7, #4]
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b006      	add	sp, #24
 8001086:	bd80      	pop	{r7, pc}

08001088 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001090:	2301      	movs	r3, #1
 8001092:	425b      	negs	r3, r3
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}

0800109c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2280      	movs	r2, #128	@ 0x80
 80010aa:	0192      	lsls	r2, r2, #6
 80010ac:	605a      	str	r2, [r3, #4]
  return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_isatty>:

int _isatty(int file)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b004      	add	sp, #16
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	@ (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	18d3      	adds	r3, r2, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f004 fb78 	bl	8005804 <__errno>
 8001114:	0003      	movs	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	2301      	movs	r3, #1
 800111c:	425b      	negs	r3, r3
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	18d2      	adds	r2, r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <_sbrk+0x64>)
 8001130:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b006      	add	sp, #24
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20001800 	.word	0x20001800
 8001140:	00000400 	.word	0x00000400
 8001144:	20000228 	.word	0x20000228
 8001148:	20000380 	.word	0x20000380

0800114c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <SystemInit+0x14>)
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	0512      	lsls	r2, r2, #20
 8001156:	609a      	str	r2, [r3, #8]
#endif
}
 8001158:	46c0      	nop			@ (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001164:	480d      	ldr	r0, [pc, #52]	@ (800119c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001166:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001168:	f7ff fff0 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800116c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800116e:	e003      	b.n	8001178 <LoopCopyDataInit>

08001170 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001172:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001174:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001176:	3104      	adds	r1, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001178:	480a      	ldr	r0, [pc, #40]	@ (80011a4 <LoopForever+0xa>)
  ldr r3, =_edata
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <LoopForever+0xe>)
  adds r2, r0, r1
 800117c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800117e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001180:	d3f6      	bcc.n	8001170 <CopyDataInit>
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <LoopForever+0x12>)
  b LoopFillZerobss
 8001184:	e002      	b.n	800118c <LoopFillZerobss>

08001186 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  str  r3, [r2]
 8001188:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118a:	3204      	adds	r2, #4

0800118c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <LoopForever+0x16>)
  cmp r2, r3
 800118e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001190:	d3f9      	bcc.n	8001186 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001192:	f004 fb3d 	bl	8005810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001196:	f7ff f9fd 	bl	8000594 <main>

0800119a <LoopForever>:

LoopForever:
    b LoopForever
 800119a:	e7fe      	b.n	800119a <LoopForever>
  ldr   r0, =_estack
 800119c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80011a0:	08006654 	.word	0x08006654
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011a8:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80011ac:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80011b0:	2000037c 	.word	0x2000037c

080011b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_IRQHandler>

080011b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f80e 	bl	80011e4 <HAL_InitTick>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80011cc:	1dfb      	adds	r3, r7, #7
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	e001      	b.n	80011d8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d4:	f7ff fd8a 	bl	8000cec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	781b      	ldrb	r3, [r3, #0]
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011ec:	230f      	movs	r3, #15
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <HAL_InitTick+0x88>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d02b      	beq.n	8001254 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80011fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <HAL_InitTick+0x8c>)
 80011fe:	681c      	ldr	r4, [r3, #0]
 8001200:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <HAL_InitTick+0x88>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	0019      	movs	r1, r3
 8001206:	23fa      	movs	r3, #250	@ 0xfa
 8001208:	0098      	lsls	r0, r3, #2
 800120a:	f7fe ff87 	bl	800011c <__udivsi3>
 800120e:	0003      	movs	r3, r0
 8001210:	0019      	movs	r1, r3
 8001212:	0020      	movs	r0, r4
 8001214:	f7fe ff82 	bl	800011c <__udivsi3>
 8001218:	0003      	movs	r3, r0
 800121a:	0018      	movs	r0, r3
 800121c:	f000 f93d 	bl	800149a <HAL_SYSTICK_Config>
 8001220:	1e03      	subs	r3, r0, #0
 8001222:	d112      	bne.n	800124a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b03      	cmp	r3, #3
 8001228:	d80a      	bhi.n	8001240 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	2301      	movs	r3, #1
 800122e:	425b      	negs	r3, r3
 8001230:	2200      	movs	r2, #0
 8001232:	0018      	movs	r0, r3
 8001234:	f000 f90c 	bl	8001450 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <HAL_InitTick+0x90>)
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e00d      	b.n	800125c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001240:	230f      	movs	r3, #15
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e008      	b.n	800125c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800124a:	230f      	movs	r3, #15
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	e003      	b.n	800125c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001254:	230f      	movs	r3, #15
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800125c:	230f      	movs	r3, #15
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	781b      	ldrb	r3, [r3, #0]
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b005      	add	sp, #20
 8001268:	bd90      	pop	{r4, r7, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	20000008 	.word	0x20000008
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_IncTick+0x1c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	001a      	movs	r2, r3
 8001282:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <HAL_IncTick+0x20>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	18d2      	adds	r2, r2, r3
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_IncTick+0x20>)
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	46c0      	nop			@ (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	20000008 	.word	0x20000008
 8001298:	2000022c 	.word	0x2000022c

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b02      	ldr	r3, [pc, #8]	@ (80012ac <HAL_GetTick+0x10>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	2000022c 	.word	0x2000022c

080012b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff fff0 	bl	800129c <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	d005      	beq.n	80012d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_Delay+0x44>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	001a      	movs	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	189b      	adds	r3, r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	f7ff ffe0 	bl	800129c <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8f7      	bhi.n	80012d8 <HAL_Delay+0x28>
  {
  }
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	20000008 	.word	0x20000008

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	0002      	movs	r2, r0
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b7f      	cmp	r3, #127	@ 0x7f
 800130a:	d809      	bhi.n	8001320 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	001a      	movs	r2, r3
 8001312:	231f      	movs	r3, #31
 8001314:	401a      	ands	r2, r3
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <__NVIC_EnableIRQ+0x30>)
 8001318:	2101      	movs	r1, #1
 800131a:	4091      	lsls	r1, r2
 800131c:	000a      	movs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	0002      	movs	r2, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001340:	d828      	bhi.n	8001394 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001342:	4a2f      	ldr	r2, [pc, #188]	@ (8001400 <__NVIC_SetPriority+0xd4>)
 8001344:	1dfb      	adds	r3, r7, #7
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b25b      	sxtb	r3, r3
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	33c0      	adds	r3, #192	@ 0xc0
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	589b      	ldr	r3, [r3, r2]
 8001352:	1dfa      	adds	r2, r7, #7
 8001354:	7812      	ldrb	r2, [r2, #0]
 8001356:	0011      	movs	r1, r2
 8001358:	2203      	movs	r2, #3
 800135a:	400a      	ands	r2, r1
 800135c:	00d2      	lsls	r2, r2, #3
 800135e:	21ff      	movs	r1, #255	@ 0xff
 8001360:	4091      	lsls	r1, r2
 8001362:	000a      	movs	r2, r1
 8001364:	43d2      	mvns	r2, r2
 8001366:	401a      	ands	r2, r3
 8001368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	019b      	lsls	r3, r3, #6
 800136e:	22ff      	movs	r2, #255	@ 0xff
 8001370:	401a      	ands	r2, r3
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	0018      	movs	r0, r3
 8001378:	2303      	movs	r3, #3
 800137a:	4003      	ands	r3, r0
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001380:	481f      	ldr	r0, [pc, #124]	@ (8001400 <__NVIC_SetPriority+0xd4>)
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b25b      	sxtb	r3, r3
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	430a      	orrs	r2, r1
 800138c:	33c0      	adds	r3, #192	@ 0xc0
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001392:	e031      	b.n	80013f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001394:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <__NVIC_SetPriority+0xd8>)
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	0019      	movs	r1, r3
 800139c:	230f      	movs	r3, #15
 800139e:	400b      	ands	r3, r1
 80013a0:	3b08      	subs	r3, #8
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3306      	adds	r3, #6
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	3304      	adds	r3, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	1dfa      	adds	r2, r7, #7
 80013b0:	7812      	ldrb	r2, [r2, #0]
 80013b2:	0011      	movs	r1, r2
 80013b4:	2203      	movs	r2, #3
 80013b6:	400a      	ands	r2, r1
 80013b8:	00d2      	lsls	r2, r2, #3
 80013ba:	21ff      	movs	r1, #255	@ 0xff
 80013bc:	4091      	lsls	r1, r2
 80013be:	000a      	movs	r2, r1
 80013c0:	43d2      	mvns	r2, r2
 80013c2:	401a      	ands	r2, r3
 80013c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	019b      	lsls	r3, r3, #6
 80013ca:	22ff      	movs	r2, #255	@ 0xff
 80013cc:	401a      	ands	r2, r3
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	0018      	movs	r0, r3
 80013d4:	2303      	movs	r3, #3
 80013d6:	4003      	ands	r3, r0
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013dc:	4809      	ldr	r0, [pc, #36]	@ (8001404 <__NVIC_SetPriority+0xd8>)
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	001c      	movs	r4, r3
 80013e4:	230f      	movs	r3, #15
 80013e6:	4023      	ands	r3, r4
 80013e8:	3b08      	subs	r3, #8
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	430a      	orrs	r2, r1
 80013ee:	3306      	adds	r3, #6
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	18c3      	adds	r3, r0, r3
 80013f4:	3304      	adds	r3, #4
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	46c0      	nop			@ (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b003      	add	sp, #12
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	1e5a      	subs	r2, r3, #1
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	045b      	lsls	r3, r3, #17
 8001418:	429a      	cmp	r2, r3
 800141a:	d301      	bcc.n	8001420 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141c:	2301      	movs	r3, #1
 800141e:	e010      	b.n	8001442 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001420:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <SysTick_Config+0x44>)
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	3a01      	subs	r2, #1
 8001426:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001428:	2301      	movs	r3, #1
 800142a:	425b      	negs	r3, r3
 800142c:	2103      	movs	r1, #3
 800142e:	0018      	movs	r0, r3
 8001430:	f7ff ff7c 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <SysTick_Config+0x44>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	@ (800144c <SysTick_Config+0x44>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	210f      	movs	r1, #15
 800145c:	187b      	adds	r3, r7, r1
 800145e:	1c02      	adds	r2, r0, #0
 8001460:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	187b      	adds	r3, r7, r1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b25b      	sxtb	r3, r3
 800146a:	0011      	movs	r1, r2
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff ff5d 	bl	800132c <__NVIC_SetPriority>
}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b004      	add	sp, #16
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	0002      	movs	r2, r0
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ff33 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b002      	add	sp, #8
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ffaf 	bl	8001408 <SysTick_Config>
 80014aa:	0003      	movs	r3, r0
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80014c2:	e14d      	b.n	8001760 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4091      	lsls	r1, r2
 80014ce:	000a      	movs	r2, r1
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d100      	bne.n	80014dc <HAL_GPIO_Init+0x28>
 80014da:	e13e      	b.n	800175a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x38>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b12      	cmp	r3, #18
 80014ea:	d125      	bne.n	8001538 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	0092      	lsls	r2, r2, #2
 80014f6:	58d3      	ldr	r3, [r2, r3]
 80014f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2207      	movs	r2, #7
 80014fe:	4013      	ands	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	409a      	lsls	r2, r3
 8001506:	0013      	movs	r3, r2
 8001508:	43da      	mvns	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	4013      	ands	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	220f      	movs	r2, #15
 8001516:	401a      	ands	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2107      	movs	r1, #7
 800151c:	400b      	ands	r3, r1
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	409a      	lsls	r2, r3
 8001522:	0013      	movs	r3, r2
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	4313      	orrs	r3, r2
 8001528:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	6979      	ldr	r1, [r7, #20]
 8001536:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	409a      	lsls	r2, r3
 8001546:	0013      	movs	r3, r2
 8001548:	43da      	mvns	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	4013      	ands	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2203      	movs	r2, #3
 8001556:	401a      	ands	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	4313      	orrs	r3, r2
 8001564:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d00b      	beq.n	800158c <HAL_GPIO_Init+0xd8>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d007      	beq.n	800158c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001580:	2b11      	cmp	r3, #17
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b12      	cmp	r3, #18
 800158a:	d130      	bne.n	80015ee <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	409a      	lsls	r2, r3
 800159a:	0013      	movs	r3, r2
 800159c:	43da      	mvns	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	409a      	lsls	r2, r3
 80015ae:	0013      	movs	r3, r2
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015c2:	2201      	movs	r2, #1
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	43da      	mvns	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	4013      	ands	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	2201      	movs	r2, #1
 80015da:	401a      	ands	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d017      	beq.n	8001626 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	409a      	lsls	r2, r3
 8001604:	0013      	movs	r3, r2
 8001606:	43da      	mvns	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	4013      	ands	r3, r2
 800160c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	055b      	lsls	r3, r3, #21
 800162e:	4013      	ands	r3, r2
 8001630:	d100      	bne.n	8001634 <HAL_GPIO_Init+0x180>
 8001632:	e092      	b.n	800175a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001634:	4a50      	ldr	r2, [pc, #320]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3318      	adds	r3, #24
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	589b      	ldr	r3, [r3, r2]
 8001640:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2203      	movs	r2, #3
 8001646:	4013      	ands	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	220f      	movs	r2, #15
 800164c:	409a      	lsls	r2, r3
 800164e:	0013      	movs	r3, r2
 8001650:	43da      	mvns	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	4013      	ands	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	23a0      	movs	r3, #160	@ 0xa0
 800165c:	05db      	lsls	r3, r3, #23
 800165e:	429a      	cmp	r2, r3
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x1d6>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a45      	ldr	r2, [pc, #276]	@ (800177c <HAL_GPIO_Init+0x2c8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x1d2>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a44      	ldr	r2, [pc, #272]	@ (8001780 <HAL_GPIO_Init+0x2cc>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x1ce>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a43      	ldr	r2, [pc, #268]	@ (8001784 <HAL_GPIO_Init+0x2d0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x1ca>
 800167a:	2305      	movs	r3, #5
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x1d8>
 800167e:	2306      	movs	r3, #6
 8001680:	e004      	b.n	800168c <HAL_GPIO_Init+0x1d8>
 8001682:	2302      	movs	r3, #2
 8001684:	e002      	b.n	800168c <HAL_GPIO_Init+0x1d8>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_GPIO_Init+0x1d8>
 800168a:	2300      	movs	r3, #0
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	2103      	movs	r1, #3
 8001690:	400a      	ands	r2, r1
 8001692:	00d2      	lsls	r2, r2, #3
 8001694:	4093      	lsls	r3, r2
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800169c:	4936      	ldr	r1, [pc, #216]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3318      	adds	r3, #24
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80016aa:	4a33      	ldr	r2, [pc, #204]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	58d3      	ldr	r3, [r2, r3]
 80016b0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43da      	mvns	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	4013      	ands	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	4013      	ands	r3, r2
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80016d0:	4929      	ldr	r1, [pc, #164]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 80016d2:	2280      	movs	r2, #128	@ 0x80
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80016d8:	4a27      	ldr	r2, [pc, #156]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 80016da:	2384      	movs	r3, #132	@ 0x84
 80016dc:	58d3      	ldr	r3, [r2, r3]
 80016de:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43da      	mvns	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4013      	ands	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	029b      	lsls	r3, r3, #10
 80016f2:	4013      	ands	r3, r2
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80016fe:	491e      	ldr	r1, [pc, #120]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 8001700:	2284      	movs	r2, #132	@ 0x84
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001706:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43da      	mvns	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	4013      	ands	r3, r2
 8001714:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	2380      	movs	r3, #128	@ 0x80
 800171c:	035b      	lsls	r3, r3, #13
 800171e:	4013      	ands	r3, r2
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43da      	mvns	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4013      	ands	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	039b      	lsls	r3, r3, #14
 8001748:	4013      	ands	r3, r2
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	3301      	adds	r3, #1
 800175e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	40da      	lsrs	r2, r3
 8001768:	1e13      	subs	r3, r2, #0
 800176a:	d000      	beq.n	800176e <HAL_GPIO_Init+0x2ba>
 800176c:	e6aa      	b.n	80014c4 <HAL_GPIO_Init+0x10>
  }
}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b006      	add	sp, #24
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021800 	.word	0x40021800
 800177c:	50000400 	.word	0x50000400
 8001780:	50000800 	.word	0x50000800
 8001784:	50001400 	.word	0x50001400

08001788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	0008      	movs	r0, r1
 8001792:	0011      	movs	r1, r2
 8001794:	1cbb      	adds	r3, r7, #2
 8001796:	1c02      	adds	r2, r0, #0
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	1c7b      	adds	r3, r7, #1
 800179c:	1c0a      	adds	r2, r1, #0
 800179e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a0:	1c7b      	adds	r3, r7, #1
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a8:	1cbb      	adds	r3, r7, #2
 80017aa:	881a      	ldrh	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b0:	e003      	b.n	80017ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b2:	1cbb      	adds	r3, r7, #2
 80017b4:	881a      	ldrh	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b002      	add	sp, #8
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	0002      	movs	r2, r0
 80017cc:	1dbb      	adds	r3, r7, #6
 80017ce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80017d0:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	1dba      	adds	r2, r7, #6
 80017d6:	8812      	ldrh	r2, [r2, #0]
 80017d8:	4013      	ands	r3, r2
 80017da:	d008      	beq.n	80017ee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80017dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017de:	1dba      	adds	r2, r7, #6
 80017e0:	8812      	ldrh	r2, [r2, #0]
 80017e2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80017e4:	1dbb      	adds	r3, r7, #6
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f000 f815 	bl	8001818 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	1dba      	adds	r2, r7, #6
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	4013      	ands	r3, r2
 80017f8:	d008      	beq.n	800180c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017fc:	1dba      	adds	r2, r7, #6
 80017fe:	8812      	ldrh	r2, [r2, #0]
 8001800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001802:	1dbb      	adds	r3, r7, #6
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	0018      	movs	r0, r3
 8001808:	f000 f810 	bl	800182c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800180c:	46c0      	nop			@ (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021800 	.word	0x40021800

08001818 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	0002      	movs	r2, r0
 8001820:	1dbb      	adds	r3, r7, #6
 8001822:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001824:	46c0      	nop			@ (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	0002      	movs	r2, r0
 8001834:	1dbb      	adds	r3, r7, #6
 8001836:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001838:	46c0      	nop			@ (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e08f      	b.n	8001972 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2241      	movs	r2, #65	@ 0x41
 8001856:	5c9b      	ldrb	r3, [r3, r2]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d107      	bne.n	800186e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2240      	movs	r2, #64	@ 0x40
 8001862:	2100      	movs	r1, #0
 8001864:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff fa63 	bl	8000d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2241      	movs	r2, #65	@ 0x41
 8001872:	2124      	movs	r1, #36	@ 0x24
 8001874:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	438a      	bics	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	493b      	ldr	r1, [pc, #236]	@ (800197c <HAL_I2C_Init+0x13c>)
 8001890:	400a      	ands	r2, r1
 8001892:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4938      	ldr	r1, [pc, #224]	@ (8001980 <HAL_I2C_Init+0x140>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d108      	bne.n	80018be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	0209      	lsls	r1, r1, #8
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	e007      	b.n	80018ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2184      	movs	r1, #132	@ 0x84
 80018c8:	0209      	lsls	r1, r1, #8
 80018ca:	430a      	orrs	r2, r1
 80018cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d109      	bne.n	80018ea <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2180      	movs	r1, #128	@ 0x80
 80018e2:	0109      	lsls	r1, r1, #4
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	e007      	b.n	80018fa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4923      	ldr	r1, [pc, #140]	@ (8001984 <HAL_I2C_Init+0x144>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4920      	ldr	r1, [pc, #128]	@ (8001988 <HAL_I2C_Init+0x148>)
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	491a      	ldr	r1, [pc, #104]	@ (8001980 <HAL_I2C_Init+0x140>)
 8001916:	400a      	ands	r2, r1
 8001918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	431a      	orrs	r2, r3
 8001924:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69d9      	ldr	r1, [r3, #28]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1a      	ldr	r2, [r3, #32]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2101      	movs	r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2241      	movs	r2, #65	@ 0x41
 800195e:	2120      	movs	r1, #32
 8001960:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2242      	movs	r2, #66	@ 0x42
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	b002      	add	sp, #8
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	f0ffffff 	.word	0xf0ffffff
 8001980:	ffff7fff 	.word	0xffff7fff
 8001984:	fffff7ff 	.word	0xfffff7ff
 8001988:	02008000 	.word	0x02008000

0800198c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b089      	sub	sp, #36	@ 0x24
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	0008      	movs	r0, r1
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	0019      	movs	r1, r3
 800199a:	230a      	movs	r3, #10
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	1c02      	adds	r2, r0, #0
 80019a0:	801a      	strh	r2, [r3, #0]
 80019a2:	2308      	movs	r3, #8
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	1c0a      	adds	r2, r1, #0
 80019a8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2241      	movs	r2, #65	@ 0x41
 80019ae:	5c9b      	ldrb	r3, [r3, r2]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	d000      	beq.n	80019b8 <HAL_I2C_Master_Transmit+0x2c>
 80019b6:	e10a      	b.n	8001bce <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2240      	movs	r2, #64	@ 0x40
 80019bc:	5c9b      	ldrb	r3, [r3, r2]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_Master_Transmit+0x3a>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e104      	b.n	8001bd0 <HAL_I2C_Master_Transmit+0x244>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	2101      	movs	r1, #1
 80019cc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019ce:	f7ff fc65 	bl	800129c <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	0219      	lsls	r1, r3, #8
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2319      	movs	r3, #25
 80019e2:	2201      	movs	r2, #1
 80019e4:	f000 fb22 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0ef      	b.n	8001bd0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2241      	movs	r2, #65	@ 0x41
 80019f4:	2121      	movs	r1, #33	@ 0x21
 80019f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2242      	movs	r2, #66	@ 0x42
 80019fc:	2110      	movs	r1, #16
 80019fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2208      	movs	r2, #8
 8001a10:	18ba      	adds	r2, r7, r2
 8001a12:	8812      	ldrh	r2, [r2, #0]
 8001a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2bff      	cmp	r3, #255	@ 0xff
 8001a24:	d906      	bls.n	8001a34 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	22ff      	movs	r2, #255	@ 0xff
 8001a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	045b      	lsls	r3, r3, #17
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e007      	b.n	8001a44 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	049b      	lsls	r3, r3, #18
 8001a42:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d027      	beq.n	8001a9c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	697c      	ldr	r4, [r7, #20]
 8001a88:	230a      	movs	r3, #10
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	8819      	ldrh	r1, [r3, #0]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	4b51      	ldr	r3, [pc, #324]	@ (8001bd8 <HAL_I2C_Master_Transmit+0x24c>)
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	0023      	movs	r3, r4
 8001a96:	f000 fd41 	bl	800251c <I2C_TransferConfig>
 8001a9a:	e06f      	b.n	8001b7c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	697c      	ldr	r4, [r7, #20]
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	8819      	ldrh	r1, [r3, #0]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd8 <HAL_I2C_Master_Transmit+0x24c>)
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	0023      	movs	r3, r4
 8001ab2:	f000 fd33 	bl	800251c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ab6:	e061      	b.n	8001b7c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f000 fb0c 	bl	80020dc <I2C_WaitOnTXISFlagUntilTimeout>
 8001ac4:	1e03      	subs	r3, r0, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e081      	b.n	8001bd0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d03a      	beq.n	8001b7c <HAL_I2C_Master_Transmit+0x1f0>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d136      	bne.n	8001b7c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	0013      	movs	r3, r2
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2180      	movs	r1, #128	@ 0x80
 8001b1c:	f000 fa86 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e053      	b.n	8001bd0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2bff      	cmp	r3, #255	@ 0xff
 8001b30:	d911      	bls.n	8001b56 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	22ff      	movs	r2, #255	@ 0xff
 8001b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	045c      	lsls	r4, r3, #17
 8001b42:	230a      	movs	r3, #10
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	8819      	ldrh	r1, [r3, #0]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	0023      	movs	r3, r4
 8001b50:	f000 fce4 	bl	800251c <I2C_TransferConfig>
 8001b54:	e012      	b.n	8001b7c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	049c      	lsls	r4, r3, #18
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	8819      	ldrh	r1, [r3, #0]
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	0023      	movs	r3, r4
 8001b78:	f000 fcd0 	bl	800251c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d198      	bne.n	8001ab8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 faeb 	bl	8002168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b92:	1e03      	subs	r3, r0, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e01a      	b.n	8001bd0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	490b      	ldr	r1, [pc, #44]	@ (8001bdc <HAL_I2C_Master_Transmit+0x250>)
 8001bae:	400a      	ands	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2241      	movs	r2, #65	@ 0x41
 8001bb6:	2120      	movs	r1, #32
 8001bb8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2242      	movs	r2, #66	@ 0x42
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2240      	movs	r2, #64	@ 0x40
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
  }
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b007      	add	sp, #28
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	80002000 	.word	0x80002000
 8001bdc:	fe00e800 	.word	0xfe00e800

08001be0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	0008      	movs	r0, r1
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	0019      	movs	r1, r3
 8001bee:	230a      	movs	r3, #10
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	1c02      	adds	r2, r0, #0
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	1c0a      	adds	r2, r1, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2241      	movs	r2, #65	@ 0x41
 8001c02:	5c9b      	ldrb	r3, [r3, r2]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d000      	beq.n	8001c0c <HAL_I2C_Master_Receive+0x2c>
 8001c0a:	e0e8      	b.n	8001dde <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2240      	movs	r2, #64	@ 0x40
 8001c10:	5c9b      	ldrb	r3, [r3, r2]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_I2C_Master_Receive+0x3a>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e0e2      	b.n	8001de0 <HAL_I2C_Master_Receive+0x200>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2240      	movs	r2, #64	@ 0x40
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c22:	f7ff fb3b 	bl	800129c <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	0219      	lsls	r1, r3, #8
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2319      	movs	r3, #25
 8001c36:	2201      	movs	r2, #1
 8001c38:	f000 f9f8 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001c3c:	1e03      	subs	r3, r0, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0cd      	b.n	8001de0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2241      	movs	r2, #65	@ 0x41
 8001c48:	2122      	movs	r1, #34	@ 0x22
 8001c4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2242      	movs	r2, #66	@ 0x42
 8001c50:	2110      	movs	r1, #16
 8001c52:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2208      	movs	r2, #8
 8001c64:	18ba      	adds	r2, r7, r2
 8001c66:	8812      	ldrh	r2, [r2, #0]
 8001c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2bff      	cmp	r3, #255	@ 0xff
 8001c78:	d911      	bls.n	8001c9e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	22ff      	movs	r2, #255	@ 0xff
 8001c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	045c      	lsls	r4, r3, #17
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	8819      	ldrh	r1, [r3, #0]
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	4b55      	ldr	r3, [pc, #340]	@ (8001de8 <HAL_I2C_Master_Receive+0x208>)
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	0023      	movs	r3, r4
 8001c98:	f000 fc40 	bl	800251c <I2C_TransferConfig>
 8001c9c:	e076      	b.n	8001d8c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	2380      	movs	r3, #128	@ 0x80
 8001cb0:	049c      	lsls	r4, r3, #18
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	8819      	ldrh	r1, [r3, #0]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	4b4b      	ldr	r3, [pc, #300]	@ (8001de8 <HAL_I2C_Master_Receive+0x208>)
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	0023      	movs	r3, r4
 8001cc0:	f000 fc2c 	bl	800251c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001cc4:	e062      	b.n	8001d8c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fa8f 	bl	80021f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e082      	b.n	8001de0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d03a      	beq.n	8001d8c <HAL_I2C_Master_Receive+0x1ac>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d136      	bne.n	8001d8c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	0013      	movs	r3, r2
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2180      	movs	r1, #128	@ 0x80
 8001d2c:	f000 f97e 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001d30:	1e03      	subs	r3, r0, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e053      	b.n	8001de0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2bff      	cmp	r3, #255	@ 0xff
 8001d40:	d911      	bls.n	8001d66 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	22ff      	movs	r2, #255	@ 0xff
 8001d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	045c      	lsls	r4, r3, #17
 8001d52:	230a      	movs	r3, #10
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	8819      	ldrh	r1, [r3, #0]
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	0023      	movs	r3, r4
 8001d60:	f000 fbdc 	bl	800251c <I2C_TransferConfig>
 8001d64:	e012      	b.n	8001d8c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	2380      	movs	r3, #128	@ 0x80
 8001d78:	049c      	lsls	r4, r3, #18
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	8819      	ldrh	r1, [r3, #0]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	2300      	movs	r3, #0
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	0023      	movs	r3, r4
 8001d88:	f000 fbc8 	bl	800251c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d197      	bne.n	8001cc6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 f9e3 	bl	8002168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001da2:	1e03      	subs	r3, r0, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e01a      	b.n	8001de0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2220      	movs	r2, #32
 8001db0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	490b      	ldr	r1, [pc, #44]	@ (8001dec <HAL_I2C_Master_Receive+0x20c>)
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2241      	movs	r2, #65	@ 0x41
 8001dc6:	2120      	movs	r1, #32
 8001dc8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2242      	movs	r2, #66	@ 0x42
 8001dce:	2100      	movs	r1, #0
 8001dd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2240      	movs	r2, #64	@ 0x40
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001dde:	2302      	movs	r3, #2
  }
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b007      	add	sp, #28
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	80002400 	.word	0x80002400
 8001dec:	fe00e800 	.word	0xfe00e800

08001df0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	1c0a      	adds	r2, r1, #0
 8001e02:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2241      	movs	r2, #65	@ 0x41
 8001e0c:	5c9b      	ldrb	r3, [r3, r2]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d000      	beq.n	8001e16 <HAL_I2C_IsDeviceReady+0x26>
 8001e14:	e0df      	b.n	8001fd6 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	401a      	ands	r2, r3
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d101      	bne.n	8001e2e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e0d4      	b.n	8001fd8 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2240      	movs	r2, #64	@ 0x40
 8001e32:	5c9b      	ldrb	r3, [r3, r2]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_I2C_IsDeviceReady+0x4c>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e0cd      	b.n	8001fd8 <HAL_I2C_IsDeviceReady+0x1e8>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2240      	movs	r2, #64	@ 0x40
 8001e40:	2101      	movs	r1, #1
 8001e42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2241      	movs	r2, #65	@ 0x41
 8001e48:	2124      	movs	r1, #36	@ 0x24
 8001e4a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_I2C_IsDeviceReady+0x7a>
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	059b      	lsls	r3, r3, #22
 8001e62:	0d9b      	lsrs	r3, r3, #22
 8001e64:	4a5e      	ldr	r2, [pc, #376]	@ (8001fe0 <HAL_I2C_IsDeviceReady+0x1f0>)
 8001e66:	431a      	orrs	r2, r3
 8001e68:	e006      	b.n	8001e78 <HAL_I2C_IsDeviceReady+0x88>
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	059b      	lsls	r3, r3, #22
 8001e72:	0d9b      	lsrs	r3, r3, #22
 8001e74:	4a5b      	ldr	r2, [pc, #364]	@ (8001fe4 <HAL_I2C_IsDeviceReady+0x1f4>)
 8001e76:	431a      	orrs	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fa0d 	bl	800129c <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	4013      	ands	r3, r2
 8001e90:	3b20      	subs	r3, #32
 8001e92:	425a      	negs	r2, r3
 8001e94:	4153      	adcs	r3, r2
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	231f      	movs	r3, #31
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	3b10      	subs	r3, #16
 8001eaa:	425a      	negs	r2, r3
 8001eac:	4153      	adcs	r3, r2
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	231e      	movs	r3, #30
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001eb6:	e035      	b.n	8001f24 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	d01a      	beq.n	8001ef4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ebe:	f7ff f9ed 	bl	800129c <HAL_GetTick>
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d302      	bcc.n	8001ed4 <HAL_I2C_IsDeviceReady+0xe4>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10f      	bne.n	8001ef4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2241      	movs	r2, #65	@ 0x41
 8001ed8:	2120      	movs	r1, #32
 8001eda:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2240      	movs	r2, #64	@ 0x40
 8001eec:	2100      	movs	r1, #0
 8001eee:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e071      	b.n	8001fd8 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2220      	movs	r2, #32
 8001efc:	4013      	ands	r3, r2
 8001efe:	3b20      	subs	r3, #32
 8001f00:	425a      	negs	r2, r3
 8001f02:	4153      	adcs	r3, r2
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	231f      	movs	r3, #31
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2210      	movs	r2, #16
 8001f14:	4013      	ands	r3, r2
 8001f16:	3b10      	subs	r3, #16
 8001f18:	425a      	negs	r2, r3
 8001f1a:	4153      	adcs	r3, r2
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	231e      	movs	r3, #30
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f24:	231f      	movs	r3, #31
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d104      	bne.n	8001f38 <HAL_I2C_IsDeviceReady+0x148>
 8001f2e:	231e      	movs	r3, #30
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0bf      	beq.n	8001eb8 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2210      	movs	r2, #16
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d01a      	beq.n	8001f7c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	0013      	movs	r3, r2
 8001f50:	2200      	movs	r2, #0
 8001f52:	2120      	movs	r1, #32
 8001f54:	f000 f86a 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001f58:	1e03      	subs	r3, r0, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e03b      	b.n	8001fd8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2220      	movs	r2, #32
 8001f66:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2241      	movs	r2, #65	@ 0x41
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2240      	movs	r2, #64	@ 0x40
 8001f74:	2100      	movs	r1, #0
 8001f76:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e02d      	b.n	8001fd8 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	0013      	movs	r3, r2
 8001f86:	2200      	movs	r2, #0
 8001f88:	2120      	movs	r1, #32
 8001f8a:	f000 f84f 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e020      	b.n	8001fd8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d900      	bls.n	8001fb6 <HAL_I2C_IsDeviceReady+0x1c6>
 8001fb4:	e74d      	b.n	8001e52 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2241      	movs	r2, #65	@ 0x41
 8001fba:	2120      	movs	r1, #32
 8001fbc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2240      	movs	r2, #64	@ 0x40
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
  }
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b008      	add	sp, #32
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	02002000 	.word	0x02002000
 8001fe4:	02002800 	.word	0x02002800

08001fe8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d103      	bne.n	8002006 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2201      	movs	r2, #1
 800200e:	4013      	ands	r3, r2
 8002010:	2b01      	cmp	r3, #1
 8002012:	d007      	beq.n	8002024 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2101      	movs	r1, #1
 8002020:	430a      	orrs	r2, r1
 8002022:	619a      	str	r2, [r3, #24]
  }
}
 8002024:	46c0      	nop			@ (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}

0800202c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	1dfb      	adds	r3, r7, #7
 800203a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800203c:	e03a      	b.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 f971 	bl	800232c <I2C_IsErrorOccurred>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d001      	beq.n	8002052 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e040      	b.n	80020d4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	d02d      	beq.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002058:	f7ff f920 	bl	800129c <HAL_GetTick>
 800205c:	0002      	movs	r2, r0
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d302      	bcc.n	800206e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d122      	bne.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	4013      	ands	r3, r2
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	425a      	negs	r2, r3
 800207e:	4153      	adcs	r3, r2
 8002080:	b2db      	uxtb	r3, r3
 8002082:	001a      	movs	r2, r3
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d113      	bne.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002090:	2220      	movs	r2, #32
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2241      	movs	r2, #65	@ 0x41
 800209c:	2120      	movs	r1, #32
 800209e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2242      	movs	r2, #66	@ 0x42
 80020a4:	2100      	movs	r1, #0
 80020a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2240      	movs	r2, #64	@ 0x40
 80020ac:	2100      	movs	r1, #0
 80020ae:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e00f      	b.n	80020d4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	4013      	ands	r3, r2
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	425a      	negs	r2, r3
 80020c4:	4153      	adcs	r3, r2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	001a      	movs	r2, r3
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d0b5      	beq.n	800203e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b004      	add	sp, #16
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020e8:	e032      	b.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 f91b 	bl	800232c <I2C_IsErrorOccurred>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e030      	b.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	3301      	adds	r3, #1
 8002102:	d025      	beq.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002104:	f7ff f8ca 	bl	800129c <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	d302      	bcc.n	800211a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d11a      	bne.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2202      	movs	r2, #2
 8002122:	4013      	ands	r3, r2
 8002124:	2b02      	cmp	r3, #2
 8002126:	d013      	beq.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212c:	2220      	movs	r2, #32
 800212e:	431a      	orrs	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2241      	movs	r2, #65	@ 0x41
 8002138:	2120      	movs	r1, #32
 800213a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2242      	movs	r2, #66	@ 0x42
 8002140:	2100      	movs	r1, #0
 8002142:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2240      	movs	r2, #64	@ 0x40
 8002148:	2100      	movs	r1, #0
 800214a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e007      	b.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2202      	movs	r2, #2
 8002158:	4013      	ands	r3, r2
 800215a:	2b02      	cmp	r3, #2
 800215c:	d1c5      	bne.n	80020ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b004      	add	sp, #16
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002174:	e02f      	b.n	80021d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 f8d5 	bl	800232c <I2C_IsErrorOccurred>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d001      	beq.n	800218a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e02d      	b.n	80021e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218a:	f7ff f887 	bl	800129c <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	d302      	bcc.n	80021a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d11a      	bne.n	80021d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2220      	movs	r2, #32
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	d013      	beq.n	80021d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	2220      	movs	r2, #32
 80021b4:	431a      	orrs	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2241      	movs	r2, #65	@ 0x41
 80021be:	2120      	movs	r1, #32
 80021c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2242      	movs	r2, #66	@ 0x42
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2240      	movs	r2, #64	@ 0x40
 80021ce:	2100      	movs	r1, #0
 80021d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e007      	b.n	80021e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2220      	movs	r2, #32
 80021de:	4013      	ands	r3, r2
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d1c8      	bne.n	8002176 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b004      	add	sp, #16
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2317      	movs	r3, #23
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002204:	e07b      	b.n	80022fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	0018      	movs	r0, r3
 800220e:	f000 f88d 	bl	800232c <I2C_IsErrorOccurred>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d003      	beq.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002216:	2317      	movs	r3, #23
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2220      	movs	r2, #32
 8002226:	4013      	ands	r3, r2
 8002228:	2b20      	cmp	r3, #32
 800222a:	d140      	bne.n	80022ae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800222c:	2117      	movs	r1, #23
 800222e:	187b      	adds	r3, r7, r1
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d13b      	bne.n	80022ae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2204      	movs	r2, #4
 800223e:	4013      	ands	r3, r2
 8002240:	2b04      	cmp	r3, #4
 8002242:	d106      	bne.n	8002252 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800224c:	187b      	adds	r3, r7, r1
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2210      	movs	r2, #16
 800225a:	4013      	ands	r3, r2
 800225c:	2b10      	cmp	r3, #16
 800225e:	d123      	bne.n	80022a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2210      	movs	r2, #16
 8002266:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2204      	movs	r2, #4
 800226c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2220      	movs	r2, #32
 8002274:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4929      	ldr	r1, [pc, #164]	@ (8002328 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002282:	400a      	ands	r2, r1
 8002284:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2241      	movs	r2, #65	@ 0x41
 800228a:	2120      	movs	r1, #32
 800228c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2242      	movs	r2, #66	@ 0x42
 8002292:	2100      	movs	r1, #0
 8002294:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2240      	movs	r2, #64	@ 0x40
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800229e:	2317      	movs	r3, #23
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e002      	b.n	80022ae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80022ae:	f7fe fff5 	bl	800129c <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11c      	bne.n	80022fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80022c4:	2017      	movs	r0, #23
 80022c6:	183b      	adds	r3, r7, r0
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d117      	bne.n	80022fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2204      	movs	r2, #4
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d010      	beq.n	80022fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	2220      	movs	r2, #32
 80022e2:	431a      	orrs	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2241      	movs	r2, #65	@ 0x41
 80022ec:	2120      	movs	r1, #32
 80022ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2240      	movs	r2, #64	@ 0x40
 80022f4:	2100      	movs	r1, #0
 80022f6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80022f8:	183b      	adds	r3, r7, r0
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2204      	movs	r2, #4
 8002306:	4013      	ands	r3, r2
 8002308:	2b04      	cmp	r3, #4
 800230a:	d005      	beq.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800230c:	2317      	movs	r3, #23
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d100      	bne.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002316:	e776      	b.n	8002206 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002318:	2317      	movs	r3, #23
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	781b      	ldrb	r3, [r3, #0]
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b006      	add	sp, #24
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	fe00e800 	.word	0xfe00e800

0800232c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	@ 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2327      	movs	r3, #39	@ 0x27
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2210      	movs	r2, #16
 8002354:	4013      	ands	r3, r2
 8002356:	d100      	bne.n	800235a <I2C_IsErrorOccurred+0x2e>
 8002358:	e079      	b.n	800244e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2210      	movs	r2, #16
 8002360:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002362:	e057      	b.n	8002414 <I2C_IsErrorOccurred+0xe8>
 8002364:	2227      	movs	r2, #39	@ 0x27
 8002366:	18bb      	adds	r3, r7, r2
 8002368:	18ba      	adds	r2, r7, r2
 800236a:	7812      	ldrb	r2, [r2, #0]
 800236c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3301      	adds	r3, #1
 8002372:	d04f      	beq.n	8002414 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002374:	f7fe ff92 	bl	800129c <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	d302      	bcc.n	800238a <I2C_IsErrorOccurred+0x5e>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d144      	bne.n	8002414 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	01db      	lsls	r3, r3, #7
 8002394:	4013      	ands	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002398:	2013      	movs	r0, #19
 800239a:	183b      	adds	r3, r7, r0
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	2142      	movs	r1, #66	@ 0x42
 80023a0:	5c52      	ldrb	r2, [r2, r1]
 80023a2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	401a      	ands	r2, r3
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d126      	bne.n	8002406 <I2C_IsErrorOccurred+0xda>
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	2380      	movs	r3, #128	@ 0x80
 80023bc:	01db      	lsls	r3, r3, #7
 80023be:	429a      	cmp	r2, r3
 80023c0:	d021      	beq.n	8002406 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80023c2:	183b      	adds	r3, r7, r0
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d01d      	beq.n	8002406 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2180      	movs	r1, #128	@ 0x80
 80023d6:	01c9      	lsls	r1, r1, #7
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023dc:	f7fe ff5e 	bl	800129c <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023e4:	e00f      	b.n	8002406 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023e6:	f7fe ff59 	bl	800129c <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b19      	cmp	r3, #25
 80023f2:	d908      	bls.n	8002406 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	2220      	movs	r2, #32
 80023f8:	4313      	orrs	r3, r2
 80023fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023fc:	2327      	movs	r3, #39	@ 0x27
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]

              break;
 8002404:	e006      	b.n	8002414 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2220      	movs	r2, #32
 800240e:	4013      	ands	r3, r2
 8002410:	2b20      	cmp	r3, #32
 8002412:	d1e8      	bne.n	80023e6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2220      	movs	r2, #32
 800241c:	4013      	ands	r3, r2
 800241e:	2b20      	cmp	r3, #32
 8002420:	d004      	beq.n	800242c <I2C_IsErrorOccurred+0x100>
 8002422:	2327      	movs	r3, #39	@ 0x27
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d09b      	beq.n	8002364 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800242c:	2327      	movs	r3, #39	@ 0x27
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2220      	movs	r2, #32
 800243c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	2204      	movs	r2, #4
 8002442:	4313      	orrs	r3, r2
 8002444:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002446:	2327      	movs	r3, #39	@ 0x27
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4013      	ands	r3, r2
 800245e:	d00c      	beq.n	800247a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	2201      	movs	r2, #1
 8002464:	4313      	orrs	r3, r2
 8002466:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2280      	movs	r2, #128	@ 0x80
 800246e:	0052      	lsls	r2, r2, #1
 8002470:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002472:	2327      	movs	r3, #39	@ 0x27
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4013      	ands	r3, r2
 8002482:	d00c      	beq.n	800249e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	2208      	movs	r2, #8
 8002488:	4313      	orrs	r3, r2
 800248a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2280      	movs	r2, #128	@ 0x80
 8002492:	00d2      	lsls	r2, r2, #3
 8002494:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002496:	2327      	movs	r3, #39	@ 0x27
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d00c      	beq.n	80024c2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2202      	movs	r2, #2
 80024ac:	4313      	orrs	r3, r2
 80024ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	0092      	lsls	r2, r2, #2
 80024b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ba:	2327      	movs	r3, #39	@ 0x27
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80024c2:	2327      	movs	r3, #39	@ 0x27
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01d      	beq.n	8002508 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff fd8a 	bl	8001fe8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	490e      	ldr	r1, [pc, #56]	@ (8002518 <I2C_IsErrorOccurred+0x1ec>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2241      	movs	r2, #65	@ 0x41
 80024f4:	2120      	movs	r1, #32
 80024f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2242      	movs	r2, #66	@ 0x42
 80024fc:	2100      	movs	r1, #0
 80024fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2240      	movs	r2, #64	@ 0x40
 8002504:	2100      	movs	r1, #0
 8002506:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002508:	2327      	movs	r3, #39	@ 0x27
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	781b      	ldrb	r3, [r3, #0]
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b00a      	add	sp, #40	@ 0x28
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	fe00e800 	.word	0xfe00e800

0800251c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	0008      	movs	r0, r1
 8002526:	0011      	movs	r1, r2
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	240a      	movs	r4, #10
 800252c:	193b      	adds	r3, r7, r4
 800252e:	1c02      	adds	r2, r0, #0
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	2009      	movs	r0, #9
 8002534:	183b      	adds	r3, r7, r0
 8002536:	1c0a      	adds	r2, r1, #0
 8002538:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800253a:	193b      	adds	r3, r7, r4
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	059b      	lsls	r3, r3, #22
 8002540:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002542:	183b      	adds	r3, r7, r0
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	0419      	lsls	r1, r3, #16
 8002548:	23ff      	movs	r3, #255	@ 0xff
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800254e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002556:	4313      	orrs	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002566:	0d51      	lsrs	r1, r2, #21
 8002568:	2280      	movs	r2, #128	@ 0x80
 800256a:	00d2      	lsls	r2, r2, #3
 800256c:	400a      	ands	r2, r1
 800256e:	4907      	ldr	r1, [pc, #28]	@ (800258c <I2C_TransferConfig+0x70>)
 8002570:	430a      	orrs	r2, r1
 8002572:	43d2      	mvns	r2, r2
 8002574:	401a      	ands	r2, r3
 8002576:	0011      	movs	r1, r2
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	b007      	add	sp, #28
 8002588:	bd90      	pop	{r4, r7, pc}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	03ff63ff 	.word	0x03ff63ff

08002590 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2241      	movs	r2, #65	@ 0x41
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d138      	bne.n	8002618 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2240      	movs	r2, #64	@ 0x40
 80025aa:	5c9b      	ldrb	r3, [r3, r2]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e032      	b.n	800261a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2240      	movs	r2, #64	@ 0x40
 80025b8:	2101      	movs	r1, #1
 80025ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2241      	movs	r2, #65	@ 0x41
 80025c0:	2124      	movs	r1, #36	@ 0x24
 80025c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2101      	movs	r1, #1
 80025d0:	438a      	bics	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4911      	ldr	r1, [pc, #68]	@ (8002624 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2101      	movs	r1, #1
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2241      	movs	r2, #65	@ 0x41
 8002608:	2120      	movs	r1, #32
 800260a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2240      	movs	r2, #64	@ 0x40
 8002610:	2100      	movs	r1, #0
 8002612:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e000      	b.n	800261a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
  }
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b002      	add	sp, #8
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	ffffefff 	.word	0xffffefff

08002628 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2241      	movs	r2, #65	@ 0x41
 8002636:	5c9b      	ldrb	r3, [r3, r2]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	d139      	bne.n	80026b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2240      	movs	r2, #64	@ 0x40
 8002642:	5c9b      	ldrb	r3, [r3, r2]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002648:	2302      	movs	r3, #2
 800264a:	e033      	b.n	80026b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2240      	movs	r2, #64	@ 0x40
 8002650:	2101      	movs	r1, #1
 8002652:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2241      	movs	r2, #65	@ 0x41
 8002658:	2124      	movs	r1, #36	@ 0x24
 800265a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	438a      	bics	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a11      	ldr	r2, [pc, #68]	@ (80026bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002678:	4013      	ands	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2241      	movs	r2, #65	@ 0x41
 80026a2:	2120      	movs	r1, #32
 80026a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2240      	movs	r2, #64	@ 0x40
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026b2:	2302      	movs	r3, #2
  }
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b004      	add	sp, #16
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	fffff0ff 	.word	0xfffff0ff

080026c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e1d0      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d100      	bne.n	80026de <HAL_RCC_OscConfig+0x1e>
 80026dc:	e069      	b.n	80027b2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026de:	4bc8      	ldr	r3, [pc, #800]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2238      	movs	r2, #56	@ 0x38
 80026e4:	4013      	ands	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d105      	bne.n	80026fa <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d15d      	bne.n	80027b2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e1bc      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	025b      	lsls	r3, r3, #9
 8002702:	429a      	cmp	r2, r3
 8002704:	d107      	bne.n	8002716 <HAL_RCC_OscConfig+0x56>
 8002706:	4bbe      	ldr	r3, [pc, #760]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4bbd      	ldr	r3, [pc, #756]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 800270c:	2180      	movs	r1, #128	@ 0x80
 800270e:	0249      	lsls	r1, r1, #9
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e020      	b.n	8002758 <HAL_RCC_OscConfig+0x98>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	23a0      	movs	r3, #160	@ 0xa0
 800271c:	02db      	lsls	r3, r3, #11
 800271e:	429a      	cmp	r2, r3
 8002720:	d10e      	bne.n	8002740 <HAL_RCC_OscConfig+0x80>
 8002722:	4bb7      	ldr	r3, [pc, #732]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4bb6      	ldr	r3, [pc, #728]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002728:	2180      	movs	r1, #128	@ 0x80
 800272a:	02c9      	lsls	r1, r1, #11
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	4bb3      	ldr	r3, [pc, #716]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4bb2      	ldr	r3, [pc, #712]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002736:	2180      	movs	r1, #128	@ 0x80
 8002738:	0249      	lsls	r1, r1, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0x98>
 8002740:	4baf      	ldr	r3, [pc, #700]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4bae      	ldr	r3, [pc, #696]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002746:	49af      	ldr	r1, [pc, #700]	@ (8002a04 <HAL_RCC_OscConfig+0x344>)
 8002748:	400a      	ands	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	4bac      	ldr	r3, [pc, #688]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4bab      	ldr	r3, [pc, #684]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002752:	49ad      	ldr	r1, [pc, #692]	@ (8002a08 <HAL_RCC_OscConfig+0x348>)
 8002754:	400a      	ands	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d014      	beq.n	800278a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe fd9c 	bl	800129c <HAL_GetTick>
 8002764:	0003      	movs	r3, r0
 8002766:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800276a:	f7fe fd97 	bl	800129c <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	@ 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e17b      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277c:	4ba0      	ldr	r3, [pc, #640]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	4013      	ands	r3, r2
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0xaa>
 8002788:	e013      	b.n	80027b2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe fd87 	bl	800129c <HAL_GetTick>
 800278e:	0003      	movs	r3, r0
 8002790:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002794:	f7fe fd82 	bl	800129c <HAL_GetTick>
 8002798:	0002      	movs	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e166      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a6:	4b96      	ldr	r3, [pc, #600]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	4013      	ands	r3, r2
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d100      	bne.n	80027be <HAL_RCC_OscConfig+0xfe>
 80027bc:	e086      	b.n	80028cc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027be:	4b90      	ldr	r3, [pc, #576]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2238      	movs	r2, #56	@ 0x38
 80027c4:	4013      	ands	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d12f      	bne.n	800282e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e14c      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027da:	4b89      	ldr	r3, [pc, #548]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a8b      	ldr	r2, [pc, #556]	@ (8002a0c <HAL_RCC_OscConfig+0x34c>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	021a      	lsls	r2, r3, #8
 80027ea:	4b85      	ldr	r3, [pc, #532]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d112      	bne.n	800281c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027f6:	4b82      	ldr	r3, [pc, #520]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a85      	ldr	r2, [pc, #532]	@ (8002a10 <HAL_RCC_OscConfig+0x350>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	4b7e      	ldr	r3, [pc, #504]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800280a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	0adb      	lsrs	r3, r3, #11
 8002810:	2207      	movs	r2, #7
 8002812:	4013      	ands	r3, r2
 8002814:	4a7f      	ldr	r2, [pc, #508]	@ (8002a14 <HAL_RCC_OscConfig+0x354>)
 8002816:	40da      	lsrs	r2, r3
 8002818:	4b7f      	ldr	r3, [pc, #508]	@ (8002a18 <HAL_RCC_OscConfig+0x358>)
 800281a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800281c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a1c <HAL_RCC_OscConfig+0x35c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0018      	movs	r0, r3
 8002822:	f7fe fcdf 	bl	80011e4 <HAL_InitTick>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d050      	beq.n	80028cc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e122      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d030      	beq.n	8002898 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002836:	4b72      	ldr	r3, [pc, #456]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a75      	ldr	r2, [pc, #468]	@ (8002a10 <HAL_RCC_OscConfig+0x350>)
 800283c:	4013      	ands	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	4b6e      	ldr	r3, [pc, #440]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800284a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002850:	2180      	movs	r1, #128	@ 0x80
 8002852:	0049      	lsls	r1, r1, #1
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fd20 	bl	800129c <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002862:	f7fe fd1b 	bl	800129c <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0ff      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002874:	4b62      	ldr	r3, [pc, #392]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	@ 0x80
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4013      	ands	r3, r2
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b5f      	ldr	r3, [pc, #380]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a61      	ldr	r2, [pc, #388]	@ (8002a0c <HAL_RCC_OscConfig+0x34c>)
 8002886:	4013      	ands	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	021a      	lsls	r2, r3, #8
 8002890:	4b5b      	ldr	r3, [pc, #364]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	e019      	b.n	80028cc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002898:	4b59      	ldr	r3, [pc, #356]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b58      	ldr	r3, [pc, #352]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 800289e:	4960      	ldr	r1, [pc, #384]	@ (8002a20 <HAL_RCC_OscConfig+0x360>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fcfa 	bl	800129c <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80028ae:	f7fe fcf5 	bl	800129c <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0d9      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4013      	ands	r3, r2
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	4013      	ands	r3, r2
 80028d4:	d042      	beq.n	800295c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80028d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2238      	movs	r2, #56	@ 0x38
 80028dc:	4013      	ands	r3, r2
 80028de:	2b18      	cmp	r3, #24
 80028e0:	d105      	bne.n	80028ee <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d138      	bne.n	800295c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0c2      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d019      	beq.n	800292a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028f6:	4b42      	ldr	r3, [pc, #264]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80028f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028fa:	4b41      	ldr	r3, [pc, #260]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fccb 	bl	800129c <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800290c:	f7fe fcc6 	bl	800129c <HAL_GetTick>
 8002910:	0002      	movs	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0aa      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800291e:	4b38      	ldr	r3, [pc, #224]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002922:	2202      	movs	r2, #2
 8002924:	4013      	ands	r3, r2
 8002926:	d0f1      	beq.n	800290c <HAL_RCC_OscConfig+0x24c>
 8002928:	e018      	b.n	800295c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800292a:	4b35      	ldr	r3, [pc, #212]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 800292c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800292e:	4b34      	ldr	r3, [pc, #208]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002930:	2101      	movs	r1, #1
 8002932:	438a      	bics	r2, r1
 8002934:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f7fe fcb1 	bl	800129c <HAL_GetTick>
 800293a:	0003      	movs	r3, r0
 800293c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002940:	f7fe fcac 	bl	800129c <HAL_GetTick>
 8002944:	0002      	movs	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e090      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002952:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002956:	2202      	movs	r2, #2
 8002958:	4013      	ands	r3, r2
 800295a:	d1f1      	bne.n	8002940 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2204      	movs	r2, #4
 8002962:	4013      	ands	r3, r2
 8002964:	d100      	bne.n	8002968 <HAL_RCC_OscConfig+0x2a8>
 8002966:	e084      	b.n	8002a72 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002968:	230f      	movs	r3, #15
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002970:	4b23      	ldr	r3, [pc, #140]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2238      	movs	r2, #56	@ 0x38
 8002976:	4013      	ands	r3, r2
 8002978:	2b20      	cmp	r3, #32
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d000      	beq.n	8002986 <HAL_RCC_OscConfig+0x2c6>
 8002984:	e075      	b.n	8002a72 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e074      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d106      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2e0>
 8002992:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002994:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002996:	4b1a      	ldr	r3, [pc, #104]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 8002998:	2101      	movs	r1, #1
 800299a:	430a      	orrs	r2, r1
 800299c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800299e:	e01c      	b.n	80029da <HAL_RCC_OscConfig+0x31a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d10c      	bne.n	80029c2 <HAL_RCC_OscConfig+0x302>
 80029a8:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80029aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029ac:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80029ae:	2104      	movs	r1, #4
 80029b0:	430a      	orrs	r2, r1
 80029b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029b4:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80029b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	430a      	orrs	r2, r1
 80029be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029c0:	e00b      	b.n	80029da <HAL_RCC_OscConfig+0x31a>
 80029c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80029c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	438a      	bics	r2, r1
 80029cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80029d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_RCC_OscConfig+0x340>)
 80029d4:	2104      	movs	r1, #4
 80029d6:	438a      	bics	r2, r1
 80029d8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d028      	beq.n	8002a34 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fc5b 	bl	800129c <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80029ea:	e01d      	b.n	8002a28 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fc56 	bl	800129c <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002a24 <HAL_RCC_OscConfig+0x364>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d915      	bls.n	8002a28 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e039      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
 8002a00:	40021000 	.word	0x40021000
 8002a04:	fffeffff 	.word	0xfffeffff
 8002a08:	fffbffff 	.word	0xfffbffff
 8002a0c:	ffff80ff 	.word	0xffff80ff
 8002a10:	ffffc7ff 	.word	0xffffc7ff
 8002a14:	02dc6c00 	.word	0x02dc6c00
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	fffffeff 	.word	0xfffffeff
 8002a24:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002a28:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <HAL_RCC_OscConfig+0x3bc>)
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d0dc      	beq.n	80029ec <HAL_RCC_OscConfig+0x32c>
 8002a32:	e013      	b.n	8002a5c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fc32 	bl	800129c <HAL_GetTick>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002a3c:	e009      	b.n	8002a52 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fc2d 	bl	800129c <HAL_GetTick>
 8002a42:	0002      	movs	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	4a0d      	ldr	r2, [pc, #52]	@ (8002a80 <HAL_RCC_OscConfig+0x3c0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e010      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002a52:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <HAL_RCC_OscConfig+0x3bc>)
 8002a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a56:	2202      	movs	r2, #2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d1f0      	bne.n	8002a3e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a5c:	230f      	movs	r3, #15
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d105      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a66:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_RCC_OscConfig+0x3bc>)
 8002a68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a6a:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <HAL_RCC_OscConfig+0x3bc>)
 8002a6c:	4905      	ldr	r1, [pc, #20]	@ (8002a84 <HAL_RCC_OscConfig+0x3c4>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b006      	add	sp, #24
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	00001388 	.word	0x00001388
 8002a84:	efffffff 	.word	0xefffffff

08002a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0e9      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b76      	ldr	r3, [pc, #472]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d91e      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b73      	ldr	r3, [pc, #460]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2207      	movs	r2, #7
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	4b70      	ldr	r3, [pc, #448]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002abc:	f7fe fbee 	bl	800129c <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ac4:	e009      	b.n	8002ada <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac6:	f7fe fbe9 	bl	800129c <HAL_GetTick>
 8002aca:	0002      	movs	r2, r0
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c7c <HAL_RCC_ClockConfig+0x1f4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0ca      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ada:	4b67      	ldr	r3, [pc, #412]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2207      	movs	r2, #7
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1ee      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2202      	movs	r2, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	d017      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2204      	movs	r2, #4
 8002af8:	4013      	ands	r3, r2
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002afc:	4b60      	ldr	r3, [pc, #384]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a60      	ldr	r2, [pc, #384]	@ (8002c84 <HAL_RCC_ClockConfig+0x1fc>)
 8002b02:	401a      	ands	r2, r3
 8002b04:	4b5e      	ldr	r3, [pc, #376]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b06:	21b0      	movs	r1, #176	@ 0xb0
 8002b08:	0109      	lsls	r1, r1, #4
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4a5d      	ldr	r2, [pc, #372]	@ (8002c88 <HAL_RCC_ClockConfig+0x200>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	0019      	movs	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4b58      	ldr	r3, [pc, #352]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d055      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002b2c:	4b54      	ldr	r3, [pc, #336]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	221c      	movs	r2, #28
 8002b32:	4393      	bics	r3, r2
 8002b34:	0019      	movs	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	4b51      	ldr	r3, [pc, #324]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b48:	4b4d      	ldr	r3, [pc, #308]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	4013      	ands	r3, r2
 8002b52:	d11f      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e08b      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b60:	4b47      	ldr	r3, [pc, #284]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d113      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e07f      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d106      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002b78:	4b41      	ldr	r3, [pc, #260]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d108      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e074      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002b86:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e06d      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b94:	4b3a      	ldr	r3, [pc, #232]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2207      	movs	r2, #7
 8002b9a:	4393      	bics	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4b37      	ldr	r3, [pc, #220]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fb78 	bl	800129c <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb0:	e009      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb2:	f7fe fb73 	bl	800129c <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	4a2f      	ldr	r2, [pc, #188]	@ (8002c7c <HAL_RCC_ClockConfig+0x1f4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e054      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2238      	movs	r2, #56	@ 0x38
 8002bcc:	401a      	ands	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1ec      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2207      	movs	r2, #7
 8002bde:	4013      	ands	r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d21e      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2207      	movs	r2, #7
 8002bec:	4393      	bics	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fb50 	bl	800129c <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c00:	e009      	b.n	8002c16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c02:	f7fe fb4b 	bl	800129c <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c7c <HAL_RCC_ClockConfig+0x1f4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e02c      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c16:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2207      	movs	r2, #7
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1ee      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2e:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4a16      	ldr	r2, [pc, #88]	@ (8002c8c <HAL_RCC_ClockConfig+0x204>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	4b10      	ldr	r3, [pc, #64]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002c42:	f000 f82b 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c46:	0001      	movs	r1, r0
 8002c48:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	220f      	movs	r2, #15
 8002c50:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002c52:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <HAL_RCC_ClockConfig+0x208>)
 8002c54:	0092      	lsls	r2, r2, #2
 8002c56:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c58:	221f      	movs	r2, #31
 8002c5a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002c5c:	000a      	movs	r2, r1
 8002c5e:	40da      	lsrs	r2, r3
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <HAL_RCC_ClockConfig+0x20c>)
 8002c62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c64:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <HAL_RCC_ClockConfig+0x210>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fe fabb 	bl	80011e4 <HAL_InitTick>
 8002c6e:	0003      	movs	r3, r0
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b004      	add	sp, #16
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	00001388 	.word	0x00001388
 8002c80:	40021000 	.word	0x40021000
 8002c84:	ffff84ff 	.word	0xffff84ff
 8002c88:	fffff0ff 	.word	0xfffff0ff
 8002c8c:	ffff8fff 	.word	0xffff8fff
 8002c90:	0800654c 	.word	0x0800654c
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002ca2:	4b23      	ldr	r3, [pc, #140]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	2207      	movs	r2, #7
 8002caa:	4013      	ands	r3, r2
 8002cac:	3301      	adds	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2238      	movs	r2, #56	@ 0x38
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d10f      	bne.n	8002cda <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002cba:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	0adb      	lsrs	r3, r3, #11
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	0013      	movs	r3, r2
 8002cca:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4819      	ldr	r0, [pc, #100]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cd0:	f7fd fa24 	bl	800011c <__udivsi3>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e01e      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2238      	movs	r2, #56	@ 0x38
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d102      	bne.n	8002cec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ce6:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	e015      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002cec:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2238      	movs	r2, #56	@ 0x38
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d103      	bne.n	8002d00 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002cf8:	2380      	movs	r3, #128	@ 0x80
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2238      	movs	r2, #56	@ 0x38
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b18      	cmp	r3, #24
 8002d0a:	d103      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d0c:	23fa      	movs	r3, #250	@ 0xfa
 8002d0e:	01db      	lsls	r3, r3, #7
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	e001      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7fd f9fe 	bl	800011c <__udivsi3>
 8002d20:	0003      	movs	r3, r0
 8002d22:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002d24:	68fb      	ldr	r3, [r7, #12]
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	40021000 	.word	0x40021000
 8002d34:	02dc6c00 	.word	0x02dc6c00
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002d40:	f7ff ffac 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002d44:	0001      	movs	r1, r0
 8002d46:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <HAL_RCC_GetHCLKFreq+0x30>)
 8002d48:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002d50:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x34>)
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d56:	221f      	movs	r2, #31
 8002d58:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002d5a:	000a      	movs	r2, r1
 8002d5c:	40da      	lsrs	r2, r3
 8002d5e:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <HAL_RCC_GetHCLKFreq+0x38>)
 8002d60:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002d62:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <HAL_RCC_GetHCLKFreq+0x38>)
 8002d64:	681b      	ldr	r3, [r3, #0]
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	0800654c 	.word	0x0800654c
 8002d74:	20000000 	.word	0x20000000

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002d7c:	f7ff ffde 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d80:	0001      	movs	r1, r0
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0b1b      	lsrs	r3, r3, #12
 8002d88:	2207      	movs	r2, #7
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002d8e:	0092      	lsls	r2, r2, #2
 8002d90:	58d3      	ldr	r3, [r2, r3]
 8002d92:	221f      	movs	r2, #31
 8002d94:	4013      	ands	r3, r2
 8002d96:	40d9      	lsrs	r1, r3
 8002d98:	000b      	movs	r3, r1
}
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	0800658c 	.word	0x0800658c

08002da8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002db0:	2313      	movs	r3, #19
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002db8:	2312      	movs	r3, #18
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2240      	movs	r2, #64	@ 0x40
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d100      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002dca:	e079      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dcc:	2011      	movs	r0, #17
 8002dce:	183b      	adds	r3, r7, r0
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd4:	4b63      	ldr	r3, [pc, #396]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	055b      	lsls	r3, r3, #21
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d110      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de0:	4b60      	ldr	r3, [pc, #384]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002de4:	4b5f      	ldr	r3, [pc, #380]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002de6:	2180      	movs	r1, #128	@ 0x80
 8002de8:	0549      	lsls	r1, r1, #21
 8002dea:	430a      	orrs	r2, r1
 8002dec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002dee:	4b5d      	ldr	r3, [pc, #372]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002df0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	055b      	lsls	r3, r3, #21
 8002df6:	4013      	ands	r3, r2
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfc:	183b      	adds	r3, r7, r0
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002e02:	4b58      	ldr	r3, [pc, #352]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e06:	23c0      	movs	r3, #192	@ 0xc0
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d019      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d014      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002e1e:	4b51      	ldr	r3, [pc, #324]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	4a51      	ldr	r2, [pc, #324]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e28:	4b4e      	ldr	r3, [pc, #312]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e2e:	2180      	movs	r1, #128	@ 0x80
 8002e30:	0249      	lsls	r1, r1, #9
 8002e32:	430a      	orrs	r2, r1
 8002e34:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e36:	4b4b      	ldr	r3, [pc, #300]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e3c:	494b      	ldr	r1, [pc, #300]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e3e:	400a      	ands	r2, r1
 8002e40:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002e42:	4b48      	ldr	r3, [pc, #288]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d016      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fe fa24 	bl	800129c <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002e58:	e00c      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fe fa1f 	bl	800129c <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	4a42      	ldr	r2, [pc, #264]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d904      	bls.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002e6a:	2313      	movs	r3, #19
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	2203      	movs	r2, #3
 8002e70:	701a      	strb	r2, [r3, #0]
          break;
 8002e72:	e004      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002e74:	4b3b      	ldr	r3, [pc, #236]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e78:	2202      	movs	r2, #2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d0ed      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002e7e:	2313      	movs	r3, #19
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e88:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8c:	4a36      	ldr	r2, [pc, #216]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	4b33      	ldr	r3, [pc, #204]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e9c:	e005      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9e:	2312      	movs	r3, #18
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2213      	movs	r2, #19
 8002ea4:	18ba      	adds	r2, r7, r2
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eaa:	2311      	movs	r3, #17
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eba:	492e      	ldr	r1, [pc, #184]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d009      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eca:	4b26      	ldr	r3, [pc, #152]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ece:	2203      	movs	r2, #3
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b22      	ldr	r3, [pc, #136]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eda:	430a      	orrs	r2, r1
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d009      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	4a22      	ldr	r2, [pc, #136]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2220      	movs	r2, #32
 8002f02:	4013      	ands	r3, r2
 8002f04:	d008      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f06:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	0899      	lsrs	r1, r3, #2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	4b14      	ldr	r3, [pc, #80]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d009      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f22:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f26:	4a15      	ldr	r2, [pc, #84]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f32:	430a      	orrs	r2, r1
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2280      	movs	r2, #128	@ 0x80
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d009      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002f40:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	22e0      	movs	r2, #224	@ 0xe0
 8002f46:	4393      	bics	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002f54:	2312      	movs	r3, #18
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b006      	add	sp, #24
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	40021000 	.word	0x40021000
 8002f68:	fffffcff 	.word	0xfffffcff
 8002f6c:	fffeffff 	.word	0xfffeffff
 8002f70:	00001388 	.word	0x00001388
 8002f74:	efffffff 	.word	0xefffffff
 8002f78:	ffffcfff 	.word	0xffffcfff
 8002f7c:	ffff3fff 	.word	0xffff3fff

08002f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0a8      	b.n	80030e4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	2382      	movs	r3, #130	@ 0x82
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d009      	beq.n	8002fba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	61da      	str	r2, [r3, #28]
 8002fac:	e005      	b.n	8002fba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	225d      	movs	r2, #93	@ 0x5d
 8002fc4:	5c9b      	ldrb	r3, [r3, r2]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d107      	bne.n	8002fdc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	225c      	movs	r2, #92	@ 0x5c
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7fd ff0e 	bl	8000df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	225d      	movs	r2, #93	@ 0x5d
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2140      	movs	r1, #64	@ 0x40
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	23e0      	movs	r3, #224	@ 0xe0
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d902      	bls.n	8003006 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e002      	b.n	800300c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	015b      	lsls	r3, r3, #5
 800300a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	23f0      	movs	r3, #240	@ 0xf0
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	429a      	cmp	r2, r3
 8003016:	d008      	beq.n	800302a <HAL_SPI_Init+0xaa>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	23e0      	movs	r3, #224	@ 0xe0
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	429a      	cmp	r2, r3
 8003022:	d002      	beq.n	800302a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	2382      	movs	r3, #130	@ 0x82
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	401a      	ands	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6899      	ldr	r1, [r3, #8]
 8003038:	2384      	movs	r3, #132	@ 0x84
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	400b      	ands	r3, r1
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2102      	movs	r1, #2
 8003046:	400b      	ands	r3, r1
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2101      	movs	r1, #1
 8003050:	400b      	ands	r3, r1
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6999      	ldr	r1, [r3, #24]
 8003058:	2380      	movs	r3, #128	@ 0x80
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	400b      	ands	r3, r1
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	2138      	movs	r1, #56	@ 0x38
 8003066:	400b      	ands	r3, r1
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	2180      	movs	r1, #128	@ 0x80
 8003070:	400b      	ands	r3, r1
 8003072:	431a      	orrs	r2, r3
 8003074:	0011      	movs	r1, r2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800307a:	2380      	movs	r3, #128	@ 0x80
 800307c:	019b      	lsls	r3, r3, #6
 800307e:	401a      	ands	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	2204      	movs	r2, #4
 8003090:	401a      	ands	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	2110      	movs	r1, #16
 8003098:	400b      	ands	r3, r1
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a0:	2108      	movs	r1, #8
 80030a2:	400b      	ands	r3, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68d9      	ldr	r1, [r3, #12]
 80030aa:	23f0      	movs	r3, #240	@ 0xf0
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	400b      	ands	r3, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	0011      	movs	r1, r2
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	015b      	lsls	r3, r3, #5
 80030ba:	401a      	ands	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4907      	ldr	r1, [pc, #28]	@ (80030ec <HAL_SPI_Init+0x16c>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	225d      	movs	r2, #93	@ 0x5d
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	0018      	movs	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b004      	add	sp, #16
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	fffff7ff 	.word	0xfffff7ff

080030f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	1dbb      	adds	r3, r7, #6
 80030fe:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003100:	f7fe f8cc 	bl	800129c <HAL_GetTick>
 8003104:	0003      	movs	r3, r0
 8003106:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003108:	231a      	movs	r3, #26
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	1dba      	adds	r2, r7, #6
 800310e:	8812      	ldrh	r2, [r2, #0]
 8003110:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	225d      	movs	r2, #93	@ 0x5d
 8003116:	5c9b      	ldrb	r3, [r3, r2]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d001      	beq.n	8003122 <HAL_SPI_Transmit+0x32>
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
 8003120:	e165      	b.n	80033ee <HAL_SPI_Transmit+0x2fe>
  }

  if ((pData == NULL) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_SPI_Transmit+0x40>
 8003128:	1dbb      	adds	r3, r7, #6
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_SPI_Transmit+0x44>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e15c      	b.n	80033ee <HAL_SPI_Transmit+0x2fe>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	225c      	movs	r2, #92	@ 0x5c
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_SPI_Transmit+0x52>
 800313e:	2302      	movs	r3, #2
 8003140:	e155      	b.n	80033ee <HAL_SPI_Transmit+0x2fe>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	225c      	movs	r2, #92	@ 0x5c
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	225d      	movs	r2, #93	@ 0x5d
 800314e:	2103      	movs	r1, #3
 8003150:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1dba      	adds	r2, r7, #6
 8003162:	8812      	ldrh	r2, [r2, #0]
 8003164:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1dba      	adds	r2, r7, #6
 800316a:	8812      	ldrh	r2, [r2, #0]
 800316c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2244      	movs	r2, #68	@ 0x44
 8003178:	2100      	movs	r1, #0
 800317a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2246      	movs	r2, #70	@ 0x46
 8003180:	2100      	movs	r1, #0
 8003182:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	2380      	movs	r3, #128	@ 0x80
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	429a      	cmp	r2, r3
 800319a:	d110      	bne.n	80031be <HAL_SPI_Transmit+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2140      	movs	r1, #64	@ 0x40
 80031a8:	438a      	bics	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2180      	movs	r1, #128	@ 0x80
 80031b8:	01c9      	lsls	r1, r1, #7
 80031ba:	430a      	orrs	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2240      	movs	r2, #64	@ 0x40
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b40      	cmp	r3, #64	@ 0x40
 80031ca:	d007      	beq.n	80031dc <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2140      	movs	r1, #64	@ 0x40
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	23e0      	movs	r3, #224	@ 0xe0
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d953      	bls.n	8003290 <HAL_SPI_Transmit+0x1a0>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <HAL_SPI_Transmit+0x10a>
 80031f0:	231a      	movs	r3, #26
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d144      	bne.n	8003284 <HAL_SPI_Transmit+0x194>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fe:	881a      	ldrh	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320a:	1c9a      	adds	r2, r3, #2
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800321e:	e031      	b.n	8003284 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2202      	movs	r2, #2
 8003228:	4013      	ands	r3, r2
 800322a:	2b02      	cmp	r3, #2
 800322c:	d112      	bne.n	8003254 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003232:	881a      	ldrh	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323e:	1c9a      	adds	r2, r3, #2
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003252:	e017      	b.n	8003284 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003254:	f7fe f822 	bl	800129c <HAL_GetTick>
 8003258:	0002      	movs	r2, r0
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d802      	bhi.n	800326a <HAL_SPI_Transmit+0x17a>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	d102      	bne.n	8003270 <HAL_SPI_Transmit+0x180>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_SPI_Transmit+0x194>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	225d      	movs	r2, #93	@ 0x5d
 8003274:	2101      	movs	r1, #1
 8003276:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	225c      	movs	r2, #92	@ 0x5c
 800327c:	2100      	movs	r1, #0
 800327e:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0b4      	b.n	80033ee <HAL_SPI_Transmit+0x2fe>
    while (hspi->TxXferCount > 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1c8      	bne.n	8003220 <HAL_SPI_Transmit+0x130>
 800328e:	e085      	b.n	800339c <HAL_SPI_Transmit+0x2ac>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_SPI_Transmit+0x1b4>
 8003298:	231a      	movs	r3, #26
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d000      	beq.n	80032a4 <HAL_SPI_Transmit+0x1b4>
 80032a2:	e076      	b.n	8003392 <HAL_SPI_Transmit+0x2a2>
    {
      if (hspi->TxXferCount > 1U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d912      	bls.n	80032d4 <HAL_SPI_Transmit+0x1e4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	881a      	ldrh	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032be:	1c9a      	adds	r2, r3, #2
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b02      	subs	r3, #2
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032d2:	e05e      	b.n	8003392 <HAL_SPI_Transmit+0x2a2>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	7812      	ldrb	r2, [r2, #0]
 80032e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032fa:	e04a      	b.n	8003392 <HAL_SPI_Transmit+0x2a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2202      	movs	r2, #2
 8003304:	4013      	ands	r3, r2
 8003306:	2b02      	cmp	r3, #2
 8003308:	d12b      	bne.n	8003362 <HAL_SPI_Transmit+0x272>
      {
        if (hspi->TxXferCount > 1U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d912      	bls.n	800333a <HAL_SPI_Transmit+0x24a>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003324:	1c9a      	adds	r2, r3, #2
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b02      	subs	r3, #2
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003338:	e02b      	b.n	8003392 <HAL_SPI_Transmit+0x2a2>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003360:	e017      	b.n	8003392 <HAL_SPI_Transmit+0x2a2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003362:	f7fd ff9b 	bl	800129c <HAL_GetTick>
 8003366:	0002      	movs	r2, r0
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d802      	bhi.n	8003378 <HAL_SPI_Transmit+0x288>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	d102      	bne.n	800337e <HAL_SPI_Transmit+0x28e>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_SPI_Transmit+0x2a2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	225d      	movs	r2, #93	@ 0x5d
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	225c      	movs	r2, #92	@ 0x5c
 800338a:	2100      	movs	r1, #0
 800338c:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e02d      	b.n	80033ee <HAL_SPI_Transmit+0x2fe>
    while (hspi->TxXferCount > 0U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1af      	bne.n	80032fc <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	6839      	ldr	r1, [r7, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 fd3a 	bl	8003e1c <SPI_EndRxTxTransaction>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_SPI_Transmit+0x2c2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <HAL_SPI_Transmit+0x2e0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	225d      	movs	r2, #93	@ 0x5d
 80033d4:	2101      	movs	r1, #1
 80033d6:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	225c      	movs	r2, #92	@ 0x5c
 80033dc:	2100      	movs	r1, #0
 80033de:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_SPI_Transmit+0x2fc>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_SPI_Transmit+0x2fe>
  }
  else
  {
    return HAL_OK;
 80033ec:	2300      	movs	r3, #0
  }
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b008      	add	sp, #32
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b089      	sub	sp, #36	@ 0x24
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	1dbb      	adds	r3, r7, #6
 8003406:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	225d      	movs	r2, #93	@ 0x5d
 800340c:	5c9b      	ldrb	r3, [r3, r2]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	d001      	beq.n	8003418 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	e12c      	b.n	8003672 <HAL_SPI_Receive+0x27a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	2382      	movs	r3, #130	@ 0x82
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	429a      	cmp	r2, r3
 8003422:	d113      	bne.n	800344c <HAL_SPI_Receive+0x54>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10f      	bne.n	800344c <HAL_SPI_Receive+0x54>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	225d      	movs	r2, #93	@ 0x5d
 8003430:	2104      	movs	r1, #4
 8003432:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003434:	1dbb      	adds	r3, r7, #6
 8003436:	881c      	ldrh	r4, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	0023      	movs	r3, r4
 8003444:	f000 f91e 	bl	8003684 <HAL_SPI_TransmitReceive>
 8003448:	0003      	movs	r3, r0
 800344a:	e112      	b.n	8003672 <HAL_SPI_Receive+0x27a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800344c:	f7fd ff26 	bl	800129c <HAL_GetTick>
 8003450:	0003      	movs	r3, r0
 8003452:	617b      	str	r3, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_SPI_Receive+0x6a>
 800345a:	1dbb      	adds	r3, r7, #6
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_SPI_Receive+0x6e>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e105      	b.n	8003672 <HAL_SPI_Receive+0x27a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	225c      	movs	r2, #92	@ 0x5c
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_SPI_Receive+0x7c>
 8003470:	2302      	movs	r3, #2
 8003472:	e0fe      	b.n	8003672 <HAL_SPI_Receive+0x27a>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	225c      	movs	r2, #92	@ 0x5c
 8003478:	2101      	movs	r1, #1
 800347a:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	225d      	movs	r2, #93	@ 0x5d
 8003480:	2104      	movs	r1, #4
 8003482:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1dba      	adds	r2, r7, #6
 8003494:	2144      	movs	r1, #68	@ 0x44
 8003496:	8812      	ldrh	r2, [r2, #0]
 8003498:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1dba      	adds	r2, r7, #6
 800349e:	2146      	movs	r1, #70	@ 0x46
 80034a0:	8812      	ldrh	r2, [r2, #0]
 80034a2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	23e0      	movs	r3, #224	@ 0xe0
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d908      	bls.n	80034e0 <HAL_SPI_Receive+0xe8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4968      	ldr	r1, [pc, #416]	@ (800367c <HAL_SPI_Receive+0x284>)
 80034da:	400a      	ands	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	e008      	b.n	80034f2 <HAL_SPI_Receive+0xfa>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2180      	movs	r1, #128	@ 0x80
 80034ec:	0149      	lsls	r1, r1, #5
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d10f      	bne.n	800351e <HAL_SPI_Receive+0x126>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2140      	movs	r1, #64	@ 0x40
 800350a:	438a      	bics	r2, r1
 800350c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4959      	ldr	r1, [pc, #356]	@ (8003680 <HAL_SPI_Receive+0x288>)
 800351a:	400a      	ands	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2240      	movs	r2, #64	@ 0x40
 8003526:	4013      	ands	r3, r2
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_Receive+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2140      	movs	r1, #64	@ 0x40
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	23e0      	movs	r3, #224	@ 0xe0
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	429a      	cmp	r2, r3
 8003546:	d900      	bls.n	800354a <HAL_SPI_Receive+0x152>
 8003548:	e073      	b.n	8003632 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800354a:	e036      	b.n	80035ba <HAL_SPI_Receive+0x1c2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2201      	movs	r2, #1
 8003554:	4013      	ands	r3, r2
 8003556:	2b01      	cmp	r3, #1
 8003558:	d117      	bne.n	800358a <HAL_SPI_Receive+0x192>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	001a      	movs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	7812      	ldrb	r2, [r2, #0]
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2246      	movs	r2, #70	@ 0x46
 800357a:	5a9b      	ldrh	r3, [r3, r2]
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b299      	uxth	r1, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2246      	movs	r2, #70	@ 0x46
 8003586:	5299      	strh	r1, [r3, r2]
 8003588:	e017      	b.n	80035ba <HAL_SPI_Receive+0x1c2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800358a:	f7fd fe87 	bl	800129c <HAL_GetTick>
 800358e:	0002      	movs	r2, r0
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d802      	bhi.n	80035a0 <HAL_SPI_Receive+0x1a8>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	3301      	adds	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_SPI_Receive+0x1ae>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_SPI_Receive+0x1c2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	225d      	movs	r2, #93	@ 0x5d
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	225c      	movs	r2, #92	@ 0x5c
 80035b2:	2100      	movs	r1, #0
 80035b4:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e05b      	b.n	8003672 <HAL_SPI_Receive+0x27a>
    while (hspi->RxXferCount > 0U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2246      	movs	r2, #70	@ 0x46
 80035be:	5a9b      	ldrh	r3, [r3, r2]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1c2      	bne.n	800354c <HAL_SPI_Receive+0x154>
 80035c6:	e03a      	b.n	800363e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d115      	bne.n	8003602 <HAL_SPI_Receive+0x20a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	b292      	uxth	r2, r2
 80035e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	1c9a      	adds	r2, r3, #2
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2246      	movs	r2, #70	@ 0x46
 80035f2:	5a9b      	ldrh	r3, [r3, r2]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b299      	uxth	r1, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2246      	movs	r2, #70	@ 0x46
 80035fe:	5299      	strh	r1, [r3, r2]
 8003600:	e017      	b.n	8003632 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003602:	f7fd fe4b 	bl	800129c <HAL_GetTick>
 8003606:	0002      	movs	r2, r0
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d802      	bhi.n	8003618 <HAL_SPI_Receive+0x220>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	d102      	bne.n	800361e <HAL_SPI_Receive+0x226>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_SPI_Receive+0x23a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	225d      	movs	r2, #93	@ 0x5d
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	225c      	movs	r2, #92	@ 0x5c
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e01f      	b.n	8003672 <HAL_SPI_Receive+0x27a>
    while (hspi->RxXferCount > 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2246      	movs	r2, #70	@ 0x46
 8003636:	5a9b      	ldrh	r3, [r3, r2]
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1c4      	bne.n	80035c8 <HAL_SPI_Receive+0x1d0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	0018      	movs	r0, r3
 8003646:	f000 fb8b 	bl	8003d60 <SPI_EndRxTransaction>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d002      	beq.n	8003654 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	225d      	movs	r2, #93	@ 0x5d
 8003658:	2101      	movs	r1, #1
 800365a:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	225c      	movs	r2, #92	@ 0x5c
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_SPI_Receive+0x278>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_SPI_Receive+0x27a>
  }
  else
  {
    return HAL_OK;
 8003670:	2300      	movs	r3, #0
  }
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b007      	add	sp, #28
 8003678:	bd90      	pop	{r4, r7, pc}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	ffffefff 	.word	0xffffefff
 8003680:	ffffbfff 	.word	0xffffbfff

08003684 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	001a      	movs	r2, r3
 8003692:	1cbb      	adds	r3, r7, #2
 8003694:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003696:	2301      	movs	r3, #1
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800369a:	f7fd fdff 	bl	800129c <HAL_GetTick>
 800369e:	0003      	movs	r3, r0
 80036a0:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036a2:	201f      	movs	r0, #31
 80036a4:	183b      	adds	r3, r7, r0
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	215d      	movs	r1, #93	@ 0x5d
 80036aa:	5c52      	ldrb	r2, [r2, r1]
 80036ac:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80036b4:	2316      	movs	r3, #22
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	1cba      	adds	r2, r7, #2
 80036ba:	8812      	ldrh	r2, [r2, #0]
 80036bc:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 80036be:	2314      	movs	r3, #20
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	1cba      	adds	r2, r7, #2
 80036c4:	8812      	ldrh	r2, [r2, #0]
 80036c6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036c8:	183b      	adds	r3, r7, r0
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d00e      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x6a>
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	2382      	movs	r3, #130	@ 0x82
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d107      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x66>
 80036e2:	183b      	adds	r3, r7, r0
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d001      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x6a>
  {
    return HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
 80036ec:	e203      	b.n	8003af6 <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x7e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x7e>
 80036fa:	1cbb      	adds	r3, r7, #2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e1f7      	b.n	8003af6 <HAL_SPI_TransmitReceive+0x472>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	225c      	movs	r2, #92	@ 0x5c
 800370a:	5c9b      	ldrb	r3, [r3, r2]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_SPI_TransmitReceive+0x90>
 8003710:	2302      	movs	r3, #2
 8003712:	e1f0      	b.n	8003af6 <HAL_SPI_TransmitReceive+0x472>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	225c      	movs	r2, #92	@ 0x5c
 8003718:	2101      	movs	r1, #1
 800371a:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	225d      	movs	r2, #93	@ 0x5d
 8003720:	5c9b      	ldrb	r3, [r3, r2]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b04      	cmp	r3, #4
 8003726:	d003      	beq.n	8003730 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	225d      	movs	r2, #93	@ 0x5d
 800372c:	2105      	movs	r1, #5
 800372e:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1cba      	adds	r2, r7, #2
 8003740:	2146      	movs	r1, #70	@ 0x46
 8003742:	8812      	ldrh	r2, [r2, #0]
 8003744:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1cba      	adds	r2, r7, #2
 800374a:	2144      	movs	r1, #68	@ 0x44
 800374c:	8812      	ldrh	r2, [r2, #0]
 800374e:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1cba      	adds	r2, r7, #2
 800375a:	8812      	ldrh	r2, [r2, #0]
 800375c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1cba      	adds	r2, r7, #2
 8003762:	8812      	ldrh	r2, [r2, #0]
 8003764:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	23e0      	movs	r3, #224	@ 0xe0
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	429a      	cmp	r2, r3
 800377c:	d804      	bhi.n	8003788 <HAL_SPI_TransmitReceive+0x104>
 800377e:	2314      	movs	r3, #20
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d908      	bls.n	800379a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	49c1      	ldr	r1, [pc, #772]	@ (8003a98 <HAL_SPI_TransmitReceive+0x414>)
 8003794:	400a      	ands	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	e008      	b.n	80037ac <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2180      	movs	r1, #128	@ 0x80
 80037a6:	0149      	lsls	r1, r1, #5
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2240      	movs	r2, #64	@ 0x40
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b40      	cmp	r3, #64	@ 0x40
 80037b8:	d007      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2140      	movs	r1, #64	@ 0x40
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	23e0      	movs	r3, #224	@ 0xe0
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d800      	bhi.n	80037d8 <HAL_SPI_TransmitReceive+0x154>
 80037d6:	e084      	b.n	80038e2 <HAL_SPI_TransmitReceive+0x25e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x168>
 80037e0:	2316      	movs	r3, #22
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d000      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x168>
 80037ea:	e06e      	b.n	80038ca <HAL_SPI_TransmitReceive+0x246>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	881a      	ldrh	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003810:	e05b      	b.n	80038ca <HAL_SPI_TransmitReceive+0x246>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2202      	movs	r2, #2
 800381a:	4013      	ands	r3, r2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d11b      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x1d4>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d016      	beq.n	8003858 <HAL_SPI_TransmitReceive+0x1d4>
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	2b01      	cmp	r3, #1
 800382e:	d113      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003834:	881a      	ldrh	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	1c9a      	adds	r2, r3, #2
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2201      	movs	r2, #1
 8003860:	4013      	ands	r3, r2
 8003862:	2b01      	cmp	r3, #1
 8003864:	d11c      	bne.n	80038a0 <HAL_SPI_TransmitReceive+0x21c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2246      	movs	r2, #70	@ 0x46
 800386a:	5a9b      	ldrh	r3, [r3, r2]
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d016      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	b292      	uxth	r2, r2
 800387e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	1c9a      	adds	r2, r3, #2
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2246      	movs	r2, #70	@ 0x46
 800388e:	5a9b      	ldrh	r3, [r3, r2]
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b299      	uxth	r1, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2246      	movs	r2, #70	@ 0x46
 800389a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800389c:	2301      	movs	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038a0:	f7fd fcfc 	bl	800129c <HAL_GetTick>
 80038a4:	0002      	movs	r2, r0
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d80c      	bhi.n	80038ca <HAL_SPI_TransmitReceive+0x246>
 80038b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b2:	3301      	adds	r3, #1
 80038b4:	d009      	beq.n	80038ca <HAL_SPI_TransmitReceive+0x246>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	225d      	movs	r2, #93	@ 0x5d
 80038ba:	2101      	movs	r1, #1
 80038bc:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	225c      	movs	r2, #92	@ 0x5c
 80038c2:	2100      	movs	r1, #0
 80038c4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e115      	b.n	8003af6 <HAL_SPI_TransmitReceive+0x472>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d19e      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x18e>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2246      	movs	r2, #70	@ 0x46
 80038d8:	5a9b      	ldrh	r3, [r3, r2]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d198      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x18e>
 80038e0:	e0e9      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x432>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_SPI_TransmitReceive+0x272>
 80038ea:	2316      	movs	r3, #22
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d000      	beq.n	80038f6 <HAL_SPI_TransmitReceive+0x272>
 80038f4:	e0d2      	b.n	8003a9c <HAL_SPI_TransmitReceive+0x418>
    {
      if (hspi->TxXferCount > 1U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d912      	bls.n	8003926 <HAL_SPI_TransmitReceive+0x2a2>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	1c9a      	adds	r2, r3, #2
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b02      	subs	r3, #2
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003924:	e0ba      	b.n	8003a9c <HAL_SPI_TransmitReceive+0x418>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	330c      	adds	r3, #12
 8003930:	7812      	ldrb	r2, [r2, #0]
 8003932:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800394c:	e0a6      	b.n	8003a9c <HAL_SPI_TransmitReceive+0x418>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2202      	movs	r2, #2
 8003956:	4013      	ands	r3, r2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d134      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0x342>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d02f      	beq.n	80039c6 <HAL_SPI_TransmitReceive+0x342>
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	2b01      	cmp	r3, #1
 800396a:	d12c      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0x342>
      {
        if (hspi->TxXferCount > 1U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d912      	bls.n	800399c <HAL_SPI_TransmitReceive+0x318>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b02      	subs	r3, #2
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800399a:	e012      	b.n	80039c2 <HAL_SPI_TransmitReceive+0x33e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	7812      	ldrb	r2, [r2, #0]
 80039a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2201      	movs	r2, #1
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d149      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x3e4>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2246      	movs	r2, #70	@ 0x46
 80039d8:	5a9b      	ldrh	r3, [r3, r2]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d043      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x3e4>
      {
        if (hspi->RxXferCount > 1U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2246      	movs	r2, #70	@ 0x46
 80039e4:	5a9b      	ldrh	r3, [r3, r2]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d924      	bls.n	8003a36 <HAL_SPI_TransmitReceive+0x3b2>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	b292      	uxth	r2, r2
 80039f8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2246      	movs	r2, #70	@ 0x46
 8003a08:	5a9b      	ldrh	r3, [r3, r2]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b02      	subs	r3, #2
 8003a0e:	b299      	uxth	r1, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2246      	movs	r2, #70	@ 0x46
 8003a14:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2246      	movs	r2, #70	@ 0x46
 8003a1a:	5a9b      	ldrh	r3, [r3, r2]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d820      	bhi.n	8003a64 <HAL_SPI_TransmitReceive+0x3e0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2180      	movs	r1, #128	@ 0x80
 8003a2e:	0149      	lsls	r1, r1, #5
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	e016      	b.n	8003a64 <HAL_SPI_TransmitReceive+0x3e0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	001a      	movs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	7812      	ldrb	r2, [r2, #0]
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2246      	movs	r2, #70	@ 0x46
 8003a56:	5a9b      	ldrh	r3, [r3, r2]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b299      	uxth	r1, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2246      	movs	r2, #70	@ 0x46
 8003a62:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a64:	2301      	movs	r3, #1
 8003a66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a68:	f7fd fc18 	bl	800129c <HAL_GetTick>
 8003a6c:	0002      	movs	r2, r0
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d802      	bhi.n	8003a7e <HAL_SPI_TransmitReceive+0x3fa>
 8003a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x400>
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x418>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	225d      	movs	r2, #93	@ 0x5d
 8003a88:	2101      	movs	r1, #1
 8003a8a:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	225c      	movs	r2, #92	@ 0x5c
 8003a90:	2100      	movs	r1, #0
 8003a92:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e02e      	b.n	8003af6 <HAL_SPI_TransmitReceive+0x472>
 8003a98:	ffffefff 	.word	0xffffefff
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d000      	beq.n	8003aa8 <HAL_SPI_TransmitReceive+0x424>
 8003aa6:	e752      	b.n	800394e <HAL_SPI_TransmitReceive+0x2ca>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2246      	movs	r2, #70	@ 0x46
 8003aac:	5a9b      	ldrh	r3, [r3, r2]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d000      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x432>
 8003ab4:	e74b      	b.n	800394e <HAL_SPI_TransmitReceive+0x2ca>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ab6:	6a3a      	ldr	r2, [r7, #32]
 8003ab8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f000 f9ad 	bl	8003e1c <SPI_EndRxTxTransaction>
 8003ac2:	1e03      	subs	r3, r0, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_SPI_TransmitReceive+0x454>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	225c      	movs	r2, #92	@ 0x5c
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e00e      	b.n	8003af6 <HAL_SPI_TransmitReceive+0x472>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	225d      	movs	r2, #93	@ 0x5d
 8003adc:	2101      	movs	r1, #1
 8003ade:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	225c      	movs	r2, #92	@ 0x5c
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x470>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <HAL_SPI_TransmitReceive+0x472>
  }
  else
  {
    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
  }
}
 8003af6:	0018      	movs	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b00a      	add	sp, #40	@ 0x28
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			@ (mov r8, r8)

08003b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	1dfb      	adds	r3, r7, #7
 8003b0e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b10:	f7fd fbc4 	bl	800129c <HAL_GetTick>
 8003b14:	0002      	movs	r2, r0
 8003b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	18d3      	adds	r3, r2, r3
 8003b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b20:	f7fd fbbc 	bl	800129c <HAL_GetTick>
 8003b24:	0003      	movs	r3, r0
 8003b26:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b28:	4b3a      	ldr	r3, [pc, #232]	@ (8003c14 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	015b      	lsls	r3, r3, #5
 8003b2e:	0d1b      	lsrs	r3, r3, #20
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	4353      	muls	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b36:	e058      	b.n	8003bea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	d055      	beq.n	8003bea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b3e:	f7fd fbad 	bl	800129c <HAL_GetTick>
 8003b42:	0002      	movs	r2, r0
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d902      	bls.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d142      	bne.n	8003bda <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	21e0      	movs	r1, #224	@ 0xe0
 8003b60:	438a      	bics	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	2382      	movs	r3, #130	@ 0x82
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d113      	bne.n	8003b98 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	2380      	movs	r3, #128	@ 0x80
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d005      	beq.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	2380      	movs	r3, #128	@ 0x80
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d107      	bne.n	8003b98 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2140      	movs	r1, #64	@ 0x40
 8003b94:	438a      	bics	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b9c:	2380      	movs	r3, #128	@ 0x80
 8003b9e:	019b      	lsls	r3, r3, #6
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d110      	bne.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	491a      	ldr	r1, [pc, #104]	@ (8003c18 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2180      	movs	r1, #128	@ 0x80
 8003bc0:	0189      	lsls	r1, r1, #6
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	225d      	movs	r2, #93	@ 0x5d
 8003bca:	2101      	movs	r1, #1
 8003bcc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	225c      	movs	r2, #92	@ 0x5c
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e017      	b.n	8003c0a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	425a      	negs	r2, r3
 8003bfa:	4153      	adcs	r3, r2
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	001a      	movs	r2, r3
 8003c00:	1dfb      	adds	r3, r7, #7
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d197      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b008      	add	sp, #32
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	20000000 	.word	0x20000000
 8003c18:	ffffdfff 	.word	0xffffdfff

08003c1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	@ 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c2a:	2317      	movs	r3, #23
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c32:	f7fd fb33 	bl	800129c <HAL_GetTick>
 8003c36:	0002      	movs	r2, r0
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	18d3      	adds	r3, r2, r3
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003c42:	f7fd fb2b 	bl	800129c <HAL_GetTick>
 8003c46:	0003      	movs	r3, r0
 8003c48:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c52:	4b41      	ldr	r3, [pc, #260]	@ (8003d58 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	0013      	movs	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	00da      	lsls	r2, r3, #3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	0d1b      	lsrs	r3, r3, #20
 8003c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c64:	4353      	muls	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c68:	e068      	b.n	8003d3c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	23c0      	movs	r3, #192	@ 0xc0
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d10a      	bne.n	8003c8a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d107      	bne.n	8003c8a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	2117      	movs	r1, #23
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c86:	187b      	adds	r3, r7, r1
 8003c88:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	d055      	beq.n	8003d3c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c90:	f7fd fb04 	bl	800129c <HAL_GetTick>
 8003c94:	0002      	movs	r2, r0
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d902      	bls.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d142      	bne.n	8003d2c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	21e0      	movs	r1, #224	@ 0xe0
 8003cb2:	438a      	bics	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	2382      	movs	r3, #130	@ 0x82
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d113      	bne.n	8003cea <SPI_WaitFifoStateUntilTimeout+0xce>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	2380      	movs	r3, #128	@ 0x80
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d005      	beq.n	8003cda <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	2380      	movs	r3, #128	@ 0x80
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d107      	bne.n	8003cea <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2140      	movs	r1, #64	@ 0x40
 8003ce6:	438a      	bics	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cee:	2380      	movs	r3, #128	@ 0x80
 8003cf0:	019b      	lsls	r3, r3, #6
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d110      	bne.n	8003d18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4916      	ldr	r1, [pc, #88]	@ (8003d5c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003d02:	400a      	ands	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2180      	movs	r1, #128	@ 0x80
 8003d12:	0189      	lsls	r1, r1, #6
 8003d14:	430a      	orrs	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	225d      	movs	r2, #93	@ 0x5d
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	225c      	movs	r2, #92	@ 0x5c
 8003d24:	2100      	movs	r1, #0
 8003d26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e010      	b.n	8003d4e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d18e      	bne.n	8003c6a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b00a      	add	sp, #40	@ 0x28
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	ffffdfff 	.word	0xffffdfff

08003d60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	2382      	movs	r3, #130	@ 0x82
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d113      	bne.n	8003da0 <SPI_EndRxTransaction+0x40>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	2380      	movs	r3, #128	@ 0x80
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d005      	beq.n	8003d90 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	2380      	movs	r3, #128	@ 0x80
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d107      	bne.n	8003da0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2140      	movs	r1, #64	@ 0x40
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	0013      	movs	r3, r2
 8003daa:	2200      	movs	r2, #0
 8003dac:	2180      	movs	r1, #128	@ 0x80
 8003dae:	f7ff fea7 	bl	8003b00 <SPI_WaitFlagStateUntilTimeout>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d007      	beq.n	8003dc6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dba:	2220      	movs	r2, #32
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e026      	b.n	8003e14 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	2382      	movs	r3, #130	@ 0x82
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d11f      	bne.n	8003e12 <SPI_EndRxTransaction+0xb2>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	2380      	movs	r3, #128	@ 0x80
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d005      	beq.n	8003dea <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d113      	bne.n	8003e12 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	23c0      	movs	r3, #192	@ 0xc0
 8003dee:	00d9      	lsls	r1, r3, #3
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	0013      	movs	r3, r2
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f7ff ff0f 	bl	8003c1c <SPI_WaitFifoStateUntilTimeout>
 8003dfe:	1e03      	subs	r3, r0, #0
 8003e00:	d007      	beq.n	8003e12 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e06:	2220      	movs	r2, #32
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e000      	b.n	8003e14 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b004      	add	sp, #16
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	23c0      	movs	r3, #192	@ 0xc0
 8003e2c:	0159      	lsls	r1, r3, #5
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	0013      	movs	r3, r2
 8003e36:	2200      	movs	r2, #0
 8003e38:	f7ff fef0 	bl	8003c1c <SPI_WaitFifoStateUntilTimeout>
 8003e3c:	1e03      	subs	r3, r0, #0
 8003e3e:	d007      	beq.n	8003e50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e44:	2220      	movs	r2, #32
 8003e46:	431a      	orrs	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e027      	b.n	8003ea0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	0013      	movs	r3, r2
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2180      	movs	r1, #128	@ 0x80
 8003e5e:	f7ff fe4f 	bl	8003b00 <SPI_WaitFlagStateUntilTimeout>
 8003e62:	1e03      	subs	r3, r0, #0
 8003e64:	d007      	beq.n	8003e76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e014      	b.n	8003ea0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	23c0      	movs	r3, #192	@ 0xc0
 8003e7a:	00d9      	lsls	r1, r3, #3
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	0013      	movs	r3, r2
 8003e84:	2200      	movs	r2, #0
 8003e86:	f7ff fec9 	bl	8003c1c <SPI_WaitFifoStateUntilTimeout>
 8003e8a:	1e03      	subs	r3, r0, #0
 8003e8c:	d007      	beq.n	8003e9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e92:	2220      	movs	r2, #32
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e000      	b.n	8003ea0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b004      	add	sp, #16
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e04a      	b.n	8003f50 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223d      	movs	r2, #61	@ 0x3d
 8003ebe:	5c9b      	ldrb	r3, [r3, r2]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d107      	bne.n	8003ed6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	223c      	movs	r2, #60	@ 0x3c
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7fc fff1 	bl	8000eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	223d      	movs	r2, #61	@ 0x3d
 8003eda:	2102      	movs	r1, #2
 8003edc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	0010      	movs	r0, r2
 8003eea:	f000 f935 	bl	8004158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2248      	movs	r2, #72	@ 0x48
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	223e      	movs	r2, #62	@ 0x3e
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	223f      	movs	r2, #63	@ 0x3f
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2240      	movs	r2, #64	@ 0x40
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	5499      	strb	r1, [r3, r2]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2241      	movs	r2, #65	@ 0x41
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2242      	movs	r2, #66	@ 0x42
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	5499      	strb	r1, [r3, r2]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2243      	movs	r2, #67	@ 0x43
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2244      	movs	r2, #68	@ 0x44
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2245      	movs	r2, #69	@ 0x45
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2246      	movs	r2, #70	@ 0x46
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5499      	strb	r1, [r3, r2]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2247      	movs	r2, #71	@ 0x47
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	223d      	movs	r2, #61	@ 0x3d
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b002      	add	sp, #8
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f64:	2317      	movs	r3, #23
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	223c      	movs	r2, #60	@ 0x3c
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e0e5      	b.n	8004146 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	223c      	movs	r2, #60	@ 0x3c
 8003f7e:	2101      	movs	r1, #1
 8003f80:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b14      	cmp	r3, #20
 8003f86:	d900      	bls.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003f88:	e0d1      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	009a      	lsls	r2, r3, #2
 8003f8e:	4b70      	ldr	r3, [pc, #448]	@ (8004150 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003f90:	18d3      	adds	r3, r2, r3
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0011      	movs	r1, r2
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f000 f954 	bl	800424c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2108      	movs	r1, #8
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2104      	movs	r1, #4
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6999      	ldr	r1, [r3, #24]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	619a      	str	r2, [r3, #24]
      break;
 8003fd6:	e0af      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	0011      	movs	r1, r2
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f000 f9b3 	bl	800434c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2180      	movs	r1, #128	@ 0x80
 8003ff2:	0109      	lsls	r1, r1, #4
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4954      	ldr	r1, [pc, #336]	@ (8004154 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004004:	400a      	ands	r2, r1
 8004006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6999      	ldr	r1, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	021a      	lsls	r2, r3, #8
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	619a      	str	r2, [r3, #24]
      break;
 800401c:	e08c      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f000 fa0e 	bl	8004448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2108      	movs	r1, #8
 8004038:	430a      	orrs	r2, r1
 800403a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2104      	movs	r1, #4
 8004048:	438a      	bics	r2, r1
 800404a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69d9      	ldr	r1, [r3, #28]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	61da      	str	r2, [r3, #28]
      break;
 800405e:	e06b      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	0011      	movs	r1, r2
 8004068:	0018      	movs	r0, r3
 800406a:	f000 fa6f 	bl	800454c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2180      	movs	r1, #128	@ 0x80
 800407a:	0109      	lsls	r1, r1, #4
 800407c:	430a      	orrs	r2, r1
 800407e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4932      	ldr	r1, [pc, #200]	@ (8004154 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800408c:	400a      	ands	r2, r1
 800408e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69d9      	ldr	r1, [r3, #28]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	021a      	lsls	r2, r3, #8
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	61da      	str	r2, [r3, #28]
      break;
 80040a4:	e048      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	0011      	movs	r1, r2
 80040ae:	0018      	movs	r0, r3
 80040b0:	f000 fab0 	bl	8004614 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2108      	movs	r1, #8
 80040c0:	430a      	orrs	r2, r1
 80040c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2104      	movs	r1, #4
 80040d0:	438a      	bics	r2, r1
 80040d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80040e6:	e027      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 fae9 	bl	80046c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2180      	movs	r1, #128	@ 0x80
 8004102:	0109      	lsls	r1, r1, #4
 8004104:	430a      	orrs	r2, r1
 8004106:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4910      	ldr	r1, [pc, #64]	@ (8004154 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004114:	400a      	ands	r2, r1
 8004116:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	021a      	lsls	r2, r3, #8
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800412c:	e004      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800412e:	2317      	movs	r3, #23
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]
      break;
 8004136:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	223c      	movs	r2, #60	@ 0x3c
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]

  return status;
 8004140:	2317      	movs	r3, #23
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	781b      	ldrb	r3, [r3, #0]
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b006      	add	sp, #24
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	080065ac 	.word	0x080065ac
 8004154:	fffffbff 	.word	0xfffffbff

08004158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a32      	ldr	r2, [pc, #200]	@ (8004234 <TIM_Base_SetConfig+0xdc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_Base_SetConfig+0x20>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a31      	ldr	r2, [pc, #196]	@ (8004238 <TIM_Base_SetConfig+0xe0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d108      	bne.n	800418a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2270      	movs	r2, #112	@ 0x70
 800417c:	4393      	bics	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a29      	ldr	r2, [pc, #164]	@ (8004234 <TIM_Base_SetConfig+0xdc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00f      	beq.n	80041b2 <TIM_Base_SetConfig+0x5a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a28      	ldr	r2, [pc, #160]	@ (8004238 <TIM_Base_SetConfig+0xe0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00b      	beq.n	80041b2 <TIM_Base_SetConfig+0x5a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a27      	ldr	r2, [pc, #156]	@ (800423c <TIM_Base_SetConfig+0xe4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <TIM_Base_SetConfig+0x5a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a26      	ldr	r2, [pc, #152]	@ (8004240 <TIM_Base_SetConfig+0xe8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_Base_SetConfig+0x5a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a25      	ldr	r2, [pc, #148]	@ (8004244 <TIM_Base_SetConfig+0xec>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d108      	bne.n	80041c4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4a24      	ldr	r2, [pc, #144]	@ (8004248 <TIM_Base_SetConfig+0xf0>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2280      	movs	r2, #128	@ 0x80
 80041c8:	4393      	bics	r3, r2
 80041ca:	001a      	movs	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a11      	ldr	r2, [pc, #68]	@ (8004234 <TIM_Base_SetConfig+0xdc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <TIM_Base_SetConfig+0xaa>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a12      	ldr	r2, [pc, #72]	@ (8004240 <TIM_Base_SetConfig+0xe8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_Base_SetConfig+0xaa>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a11      	ldr	r2, [pc, #68]	@ (8004244 <TIM_Base_SetConfig+0xec>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d103      	bne.n	800420a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2201      	movs	r2, #1
 8004216:	4013      	ands	r3, r2
 8004218:	2b01      	cmp	r3, #1
 800421a:	d106      	bne.n	800422a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2201      	movs	r2, #1
 8004222:	4393      	bics	r3, r2
 8004224:	001a      	movs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	611a      	str	r2, [r3, #16]
  }
}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	b004      	add	sp, #16
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40000400 	.word	0x40000400
 800423c:	40002000 	.word	0x40002000
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800
 8004248:	fffffcff 	.word	0xfffffcff

0800424c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	2201      	movs	r2, #1
 8004262:	4393      	bics	r3, r2
 8004264:	001a      	movs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a2e      	ldr	r2, [pc, #184]	@ (8004334 <TIM_OC1_SetConfig+0xe8>)
 800427a:	4013      	ands	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2203      	movs	r2, #3
 8004282:	4393      	bics	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2202      	movs	r2, #2
 8004294:	4393      	bics	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a24      	ldr	r2, [pc, #144]	@ (8004338 <TIM_OC1_SetConfig+0xec>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <TIM_OC1_SetConfig+0x6e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a23      	ldr	r2, [pc, #140]	@ (800433c <TIM_OC1_SetConfig+0xf0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <TIM_OC1_SetConfig+0x6e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a22      	ldr	r2, [pc, #136]	@ (8004340 <TIM_OC1_SetConfig+0xf4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10c      	bne.n	80042d4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2208      	movs	r2, #8
 80042be:	4393      	bics	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2204      	movs	r2, #4
 80042d0:	4393      	bics	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a18      	ldr	r2, [pc, #96]	@ (8004338 <TIM_OC1_SetConfig+0xec>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <TIM_OC1_SetConfig+0xa0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a17      	ldr	r2, [pc, #92]	@ (800433c <TIM_OC1_SetConfig+0xf0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_OC1_SetConfig+0xa0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a16      	ldr	r2, [pc, #88]	@ (8004340 <TIM_OC1_SetConfig+0xf4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d111      	bne.n	8004310 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4a15      	ldr	r2, [pc, #84]	@ (8004344 <TIM_OC1_SetConfig+0xf8>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4a14      	ldr	r2, [pc, #80]	@ (8004348 <TIM_OC1_SetConfig+0xfc>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b006      	add	sp, #24
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	fffeff8f 	.word	0xfffeff8f
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40014400 	.word	0x40014400
 8004340:	40014800 	.word	0x40014800
 8004344:	fffffeff 	.word	0xfffffeff
 8004348:	fffffdff 	.word	0xfffffdff

0800434c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	2210      	movs	r2, #16
 8004362:	4393      	bics	r3, r2
 8004364:	001a      	movs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4a2c      	ldr	r2, [pc, #176]	@ (800442c <TIM_OC2_SetConfig+0xe0>)
 800437a:	4013      	ands	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4a2b      	ldr	r2, [pc, #172]	@ (8004430 <TIM_OC2_SetConfig+0xe4>)
 8004382:	4013      	ands	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2220      	movs	r2, #32
 8004396:	4393      	bics	r3, r2
 8004398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a22      	ldr	r2, [pc, #136]	@ (8004434 <TIM_OC2_SetConfig+0xe8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d10d      	bne.n	80043ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2280      	movs	r2, #128	@ 0x80
 80043b2:	4393      	bics	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2240      	movs	r2, #64	@ 0x40
 80043c6:	4393      	bics	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <TIM_OC2_SetConfig+0xe8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d007      	beq.n	80043e2 <TIM_OC2_SetConfig+0x96>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a18      	ldr	r2, [pc, #96]	@ (8004438 <TIM_OC2_SetConfig+0xec>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d003      	beq.n	80043e2 <TIM_OC2_SetConfig+0x96>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a17      	ldr	r2, [pc, #92]	@ (800443c <TIM_OC2_SetConfig+0xf0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d113      	bne.n	800440a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4a16      	ldr	r2, [pc, #88]	@ (8004440 <TIM_OC2_SetConfig+0xf4>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4a15      	ldr	r2, [pc, #84]	@ (8004444 <TIM_OC2_SetConfig+0xf8>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	621a      	str	r2, [r3, #32]
}
 8004424:	46c0      	nop			@ (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b006      	add	sp, #24
 800442a:	bd80      	pop	{r7, pc}
 800442c:	feff8fff 	.word	0xfeff8fff
 8004430:	fffffcff 	.word	0xfffffcff
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800
 8004440:	fffffbff 	.word	0xfffffbff
 8004444:	fffff7ff 	.word	0xfffff7ff

08004448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	4a31      	ldr	r2, [pc, #196]	@ (8004524 <TIM_OC3_SetConfig+0xdc>)
 800445e:	401a      	ands	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a2d      	ldr	r2, [pc, #180]	@ (8004528 <TIM_OC3_SetConfig+0xe0>)
 8004474:	4013      	ands	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2203      	movs	r2, #3
 800447c:	4393      	bics	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	4a27      	ldr	r2, [pc, #156]	@ (800452c <TIM_OC3_SetConfig+0xe4>)
 800448e:	4013      	ands	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a23      	ldr	r2, [pc, #140]	@ (8004530 <TIM_OC3_SetConfig+0xe8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d10d      	bne.n	80044c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	4a22      	ldr	r2, [pc, #136]	@ (8004534 <TIM_OC3_SetConfig+0xec>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004538 <TIM_OC3_SetConfig+0xf0>)
 80044be:	4013      	ands	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004530 <TIM_OC3_SetConfig+0xe8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <TIM_OC3_SetConfig+0x92>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <TIM_OC3_SetConfig+0xf4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d003      	beq.n	80044da <TIM_OC3_SetConfig+0x92>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004540 <TIM_OC3_SetConfig+0xf8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d113      	bne.n	8004502 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4a19      	ldr	r2, [pc, #100]	@ (8004544 <TIM_OC3_SetConfig+0xfc>)
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4a18      	ldr	r2, [pc, #96]	@ (8004548 <TIM_OC3_SetConfig+0x100>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	46c0      	nop			@ (mov r8, r8)
 800451e:	46bd      	mov	sp, r7
 8004520:	b006      	add	sp, #24
 8004522:	bd80      	pop	{r7, pc}
 8004524:	fffffeff 	.word	0xfffffeff
 8004528:	fffeff8f 	.word	0xfffeff8f
 800452c:	fffffdff 	.word	0xfffffdff
 8004530:	40012c00 	.word	0x40012c00
 8004534:	fffff7ff 	.word	0xfffff7ff
 8004538:	fffffbff 	.word	0xfffffbff
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800
 8004544:	ffffefff 	.word	0xffffefff
 8004548:	ffffdfff 	.word	0xffffdfff

0800454c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a24      	ldr	r2, [pc, #144]	@ (80045f4 <TIM_OC4_SetConfig+0xa8>)
 8004562:	401a      	ands	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a20      	ldr	r2, [pc, #128]	@ (80045f8 <TIM_OC4_SetConfig+0xac>)
 8004578:	4013      	ands	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a1f      	ldr	r2, [pc, #124]	@ (80045fc <TIM_OC4_SetConfig+0xb0>)
 8004580:	4013      	ands	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4a1b      	ldr	r2, [pc, #108]	@ (8004600 <TIM_OC4_SetConfig+0xb4>)
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	031b      	lsls	r3, r3, #12
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a17      	ldr	r2, [pc, #92]	@ (8004604 <TIM_OC4_SetConfig+0xb8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d007      	beq.n	80045bc <TIM_OC4_SetConfig+0x70>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a16      	ldr	r2, [pc, #88]	@ (8004608 <TIM_OC4_SetConfig+0xbc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_OC4_SetConfig+0x70>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a15      	ldr	r2, [pc, #84]	@ (800460c <TIM_OC4_SetConfig+0xc0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d109      	bne.n	80045d0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4a14      	ldr	r2, [pc, #80]	@ (8004610 <TIM_OC4_SetConfig+0xc4>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	019b      	lsls	r3, r3, #6
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b006      	add	sp, #24
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	ffffefff 	.word	0xffffefff
 80045f8:	feff8fff 	.word	0xfeff8fff
 80045fc:	fffffcff 	.word	0xfffffcff
 8004600:	ffffdfff 	.word	0xffffdfff
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800
 8004610:	ffffbfff 	.word	0xffffbfff

08004614 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	4a21      	ldr	r2, [pc, #132]	@ (80046b0 <TIM_OC5_SetConfig+0x9c>)
 800462a:	401a      	ands	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a1d      	ldr	r2, [pc, #116]	@ (80046b4 <TIM_OC5_SetConfig+0xa0>)
 8004640:	4013      	ands	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4a19      	ldr	r2, [pc, #100]	@ (80046b8 <TIM_OC5_SetConfig+0xa4>)
 8004652:	4013      	ands	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a15      	ldr	r2, [pc, #84]	@ (80046bc <TIM_OC5_SetConfig+0xa8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d007      	beq.n	800467a <TIM_OC5_SetConfig+0x66>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a14      	ldr	r2, [pc, #80]	@ (80046c0 <TIM_OC5_SetConfig+0xac>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d003      	beq.n	800467a <TIM_OC5_SetConfig+0x66>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a13      	ldr	r2, [pc, #76]	@ (80046c4 <TIM_OC5_SetConfig+0xb0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d109      	bne.n	800468e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	4a0c      	ldr	r2, [pc, #48]	@ (80046b0 <TIM_OC5_SetConfig+0x9c>)
 800467e:	4013      	ands	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	621a      	str	r2, [r3, #32]
}
 80046a8:	46c0      	nop			@ (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b006      	add	sp, #24
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	fffeffff 	.word	0xfffeffff
 80046b4:	fffeff8f 	.word	0xfffeff8f
 80046b8:	fffdffff 	.word	0xfffdffff
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800

080046c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	4a22      	ldr	r2, [pc, #136]	@ (8004768 <TIM_OC6_SetConfig+0xa0>)
 80046de:	401a      	ands	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a1e      	ldr	r2, [pc, #120]	@ (800476c <TIM_OC6_SetConfig+0xa4>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4a1a      	ldr	r2, [pc, #104]	@ (8004770 <TIM_OC6_SetConfig+0xa8>)
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	051b      	lsls	r3, r3, #20
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a16      	ldr	r2, [pc, #88]	@ (8004774 <TIM_OC6_SetConfig+0xac>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_OC6_SetConfig+0x68>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a15      	ldr	r2, [pc, #84]	@ (8004778 <TIM_OC6_SetConfig+0xb0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_OC6_SetConfig+0x68>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a14      	ldr	r2, [pc, #80]	@ (800477c <TIM_OC6_SetConfig+0xb4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d109      	bne.n	8004744 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	4a13      	ldr	r2, [pc, #76]	@ (8004780 <TIM_OC6_SetConfig+0xb8>)
 8004734:	4013      	ands	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	029b      	lsls	r3, r3, #10
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b006      	add	sp, #24
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	ffefffff 	.word	0xffefffff
 800476c:	feff8fff 	.word	0xfeff8fff
 8004770:	ffdfffff 	.word	0xffdfffff
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800
 8004780:	fffbffff 	.word	0xfffbffff

08004784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	223c      	movs	r2, #60	@ 0x3c
 8004792:	5c9b      	ldrb	r3, [r3, r2]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004798:	2302      	movs	r3, #2
 800479a:	e04a      	b.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	223c      	movs	r2, #60	@ 0x3c
 80047a0:	2101      	movs	r1, #1
 80047a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	223d      	movs	r2, #61	@ 0x3d
 80047a8:	2102      	movs	r1, #2
 80047aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1e      	ldr	r2, [pc, #120]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d108      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2270      	movs	r2, #112	@ 0x70
 80047dc:	4393      	bics	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a11      	ldr	r2, [pc, #68]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a10      	ldr	r2, [pc, #64]	@ (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10c      	bne.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2280      	movs	r2, #128	@ 0x80
 800480a:	4393      	bics	r3, r2
 800480c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	4313      	orrs	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	223d      	movs	r2, #61	@ 0x3d
 8004824:	2101      	movs	r1, #1
 8004826:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	223c      	movs	r2, #60	@ 0x3c
 800482c:	2100      	movs	r1, #0
 800482e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	0018      	movs	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	b004      	add	sp, #16
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	40012c00 	.word	0x40012c00
 8004840:	ff0fffff 	.word	0xff0fffff
 8004844:	40000400 	.word	0x40000400

08004848 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	223c      	movs	r2, #60	@ 0x3c
 800485a:	5c9b      	ldrb	r3, [r3, r2]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004860:	2302      	movs	r3, #2
 8004862:	e06f      	b.n	8004944 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	223c      	movs	r2, #60	@ 0x3c
 8004868:	2101      	movs	r1, #1
 800486a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	22ff      	movs	r2, #255	@ 0xff
 8004870:	4393      	bics	r3, r2
 8004872:	001a      	movs	r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a33      	ldr	r2, [pc, #204]	@ (800494c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004880:	401a      	ands	r2, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a30      	ldr	r2, [pc, #192]	@ (8004950 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800488e:	401a      	ands	r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a2e      	ldr	r2, [pc, #184]	@ (8004954 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800489c:	401a      	ands	r2, r3
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004958 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80048aa:	401a      	ands	r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a29      	ldr	r2, [pc, #164]	@ (800495c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80048b8:	401a      	ands	r2, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a26      	ldr	r2, [pc, #152]	@ (8004960 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80048c6:	401a      	ands	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a24      	ldr	r2, [pc, #144]	@ (8004964 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80048d4:	401a      	ands	r2, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a21      	ldr	r2, [pc, #132]	@ (8004968 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80048e4:	401a      	ands	r2, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1e      	ldr	r2, [pc, #120]	@ (800496c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d11c      	bne.n	8004932 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004970 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80048fc:	401a      	ands	r2, r3
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004902:	051b      	lsls	r3, r3, #20
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a1a      	ldr	r2, [pc, #104]	@ (8004974 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800490c:	401a      	ands	r2, r3
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a17      	ldr	r2, [pc, #92]	@ (8004978 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800491a:	401a      	ands	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a15      	ldr	r2, [pc, #84]	@ (800497c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004928:	401a      	ands	r2, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	223c      	movs	r2, #60	@ 0x3c
 800493e:	2100      	movs	r1, #0
 8004940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	b004      	add	sp, #16
 800494a:	bd80      	pop	{r7, pc}
 800494c:	fffffcff 	.word	0xfffffcff
 8004950:	fffffbff 	.word	0xfffffbff
 8004954:	fffff7ff 	.word	0xfffff7ff
 8004958:	ffffefff 	.word	0xffffefff
 800495c:	ffffdfff 	.word	0xffffdfff
 8004960:	ffffbfff 	.word	0xffffbfff
 8004964:	fff0ffff 	.word	0xfff0ffff
 8004968:	efffffff 	.word	0xefffffff
 800496c:	40012c00 	.word	0x40012c00
 8004970:	ff0fffff 	.word	0xff0fffff
 8004974:	feffffff 	.word	0xfeffffff
 8004978:	fdffffff 	.word	0xfdffffff
 800497c:	dfffffff 	.word	0xdfffffff

08004980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e046      	b.n	8004a20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2288      	movs	r2, #136	@ 0x88
 8004996:	589b      	ldr	r3, [r3, r2]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d107      	bne.n	80049ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2284      	movs	r2, #132	@ 0x84
 80049a0:	2100      	movs	r1, #0
 80049a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	0018      	movs	r0, r3
 80049a8:	f7fc fae4 	bl	8000f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2288      	movs	r2, #136	@ 0x88
 80049b0:	2124      	movs	r1, #36	@ 0x24
 80049b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2101      	movs	r1, #1
 80049c0:	438a      	bics	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 fa4e 	bl	8004e70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f000 f8cc 	bl	8004b74 <UART_SetConfig>
 80049dc:	0003      	movs	r3, r0
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e01c      	b.n	8004a20 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	490d      	ldr	r1, [pc, #52]	@ (8004a28 <HAL_UART_Init+0xa8>)
 80049f2:	400a      	ands	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	212a      	movs	r1, #42	@ 0x2a
 8004a02:	438a      	bics	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2101      	movs	r1, #1
 8004a12:	430a      	orrs	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f000 fadd 	bl	8004fd8 <UART_CheckIdleState>
 8004a1e:	0003      	movs	r3, r0
}
 8004a20:	0018      	movs	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b002      	add	sp, #8
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	ffffb7ff 	.word	0xffffb7ff

08004a2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	@ 0x28
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	1dbb      	adds	r3, r7, #6
 8004a3a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2288      	movs	r2, #136	@ 0x88
 8004a40:	589b      	ldr	r3, [r3, r2]
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d000      	beq.n	8004a48 <HAL_UART_Transmit+0x1c>
 8004a46:	e090      	b.n	8004b6a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_UART_Transmit+0x2a>
 8004a4e:	1dbb      	adds	r3, r7, #6
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e088      	b.n	8004b6c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	2380      	movs	r3, #128	@ 0x80
 8004a60:	015b      	lsls	r3, r3, #5
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d109      	bne.n	8004a7a <HAL_UART_Transmit+0x4e>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2201      	movs	r2, #1
 8004a72:	4013      	ands	r3, r2
 8004a74:	d001      	beq.n	8004a7a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e078      	b.n	8004b6c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2290      	movs	r2, #144	@ 0x90
 8004a7e:	2100      	movs	r1, #0
 8004a80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2288      	movs	r2, #136	@ 0x88
 8004a86:	2121      	movs	r1, #33	@ 0x21
 8004a88:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a8a:	f7fc fc07 	bl	800129c <HAL_GetTick>
 8004a8e:	0003      	movs	r3, r0
 8004a90:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1dba      	adds	r2, r7, #6
 8004a96:	2154      	movs	r1, #84	@ 0x54
 8004a98:	8812      	ldrh	r2, [r2, #0]
 8004a9a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1dba      	adds	r2, r7, #6
 8004aa0:	2156      	movs	r1, #86	@ 0x56
 8004aa2:	8812      	ldrh	r2, [r2, #0]
 8004aa4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	2380      	movs	r3, #128	@ 0x80
 8004aac:	015b      	lsls	r3, r3, #5
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d108      	bne.n	8004ac4 <HAL_UART_Transmit+0x98>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	e003      	b.n	8004acc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004acc:	e030      	b.n	8004b30 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	0013      	movs	r3, r2
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2180      	movs	r1, #128	@ 0x80
 8004adc:	f000 fb26 	bl	800512c <UART_WaitOnFlagUntilTimeout>
 8004ae0:	1e03      	subs	r3, r0, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2288      	movs	r2, #136	@ 0x88
 8004ae8:	2120      	movs	r1, #32
 8004aea:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e03d      	b.n	8004b6c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10b      	bne.n	8004b0e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	001a      	movs	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	05d2      	lsls	r2, r2, #23
 8004b02:	0dd2      	lsrs	r2, r2, #23
 8004b04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	3302      	adds	r3, #2
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e007      	b.n	8004b1e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2256      	movs	r2, #86	@ 0x56
 8004b22:	5a9b      	ldrh	r3, [r3, r2]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b299      	uxth	r1, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2256      	movs	r2, #86	@ 0x56
 8004b2e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2256      	movs	r2, #86	@ 0x56
 8004b34:	5a9b      	ldrh	r3, [r3, r2]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1c8      	bne.n	8004ace <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	0013      	movs	r3, r2
 8004b46:	2200      	movs	r2, #0
 8004b48:	2140      	movs	r1, #64	@ 0x40
 8004b4a:	f000 faef 	bl	800512c <UART_WaitOnFlagUntilTimeout>
 8004b4e:	1e03      	subs	r3, r0, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2288      	movs	r2, #136	@ 0x88
 8004b56:	2120      	movs	r1, #32
 8004b58:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e006      	b.n	8004b6c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2288      	movs	r2, #136	@ 0x88
 8004b62:	2120      	movs	r1, #32
 8004b64:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e000      	b.n	8004b6c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004b6a:	2302      	movs	r3, #2
  }
}
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b008      	add	sp, #32
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b7c:	231e      	movs	r3, #30
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4aab      	ldr	r2, [pc, #684]	@ (8004e50 <UART_SetConfig+0x2dc>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4aa6      	ldr	r2, [pc, #664]	@ (8004e54 <UART_SetConfig+0x2e0>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4a9d      	ldr	r2, [pc, #628]	@ (8004e58 <UART_SetConfig+0x2e4>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	0019      	movs	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	220f      	movs	r2, #15
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a93      	ldr	r2, [pc, #588]	@ (8004e5c <UART_SetConfig+0x2e8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d127      	bne.n	8004c62 <UART_SetConfig+0xee>
 8004c12:	4b93      	ldr	r3, [pc, #588]	@ (8004e60 <UART_SetConfig+0x2ec>)
 8004c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c16:	2203      	movs	r2, #3
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d017      	beq.n	8004c4e <UART_SetConfig+0xda>
 8004c1e:	d81b      	bhi.n	8004c58 <UART_SetConfig+0xe4>
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d00a      	beq.n	8004c3a <UART_SetConfig+0xc6>
 8004c24:	d818      	bhi.n	8004c58 <UART_SetConfig+0xe4>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <UART_SetConfig+0xbc>
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d00a      	beq.n	8004c44 <UART_SetConfig+0xd0>
 8004c2e:	e013      	b.n	8004c58 <UART_SetConfig+0xe4>
 8004c30:	231f      	movs	r3, #31
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	e021      	b.n	8004c7e <UART_SetConfig+0x10a>
 8004c3a:	231f      	movs	r3, #31
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	2202      	movs	r2, #2
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e01c      	b.n	8004c7e <UART_SetConfig+0x10a>
 8004c44:	231f      	movs	r3, #31
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2204      	movs	r2, #4
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e017      	b.n	8004c7e <UART_SetConfig+0x10a>
 8004c4e:	231f      	movs	r3, #31
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	2208      	movs	r2, #8
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e012      	b.n	8004c7e <UART_SetConfig+0x10a>
 8004c58:	231f      	movs	r3, #31
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	e00d      	b.n	8004c7e <UART_SetConfig+0x10a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a7f      	ldr	r2, [pc, #508]	@ (8004e64 <UART_SetConfig+0x2f0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d104      	bne.n	8004c76 <UART_SetConfig+0x102>
 8004c6c:	231f      	movs	r3, #31
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e003      	b.n	8004c7e <UART_SetConfig+0x10a>
 8004c76:	231f      	movs	r3, #31
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	2210      	movs	r2, #16
 8004c7c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	2380      	movs	r3, #128	@ 0x80
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d000      	beq.n	8004c8c <UART_SetConfig+0x118>
 8004c8a:	e06f      	b.n	8004d6c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004c8c:	231f      	movs	r3, #31
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d01f      	beq.n	8004cd6 <UART_SetConfig+0x162>
 8004c96:	dc22      	bgt.n	8004cde <UART_SetConfig+0x16a>
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d017      	beq.n	8004ccc <UART_SetConfig+0x158>
 8004c9c:	dc1f      	bgt.n	8004cde <UART_SetConfig+0x16a>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <UART_SetConfig+0x134>
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d005      	beq.n	8004cb2 <UART_SetConfig+0x13e>
 8004ca6:	e01a      	b.n	8004cde <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe f866 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8004cac:	0003      	movs	r3, r0
 8004cae:	61bb      	str	r3, [r7, #24]
        break;
 8004cb0:	e01c      	b.n	8004cec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004cb2:	4b6b      	ldr	r3, [pc, #428]	@ (8004e60 <UART_SetConfig+0x2ec>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	2207      	movs	r2, #7
 8004cba:	4013      	ands	r3, r2
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	4869      	ldr	r0, [pc, #420]	@ (8004e68 <UART_SetConfig+0x2f4>)
 8004cc2:	f7fb fa2b 	bl	800011c <__udivsi3>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	61bb      	str	r3, [r7, #24]
        break;
 8004cca:	e00f      	b.n	8004cec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ccc:	f7fd ffe6 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	61bb      	str	r3, [r7, #24]
        break;
 8004cd4:	e00a      	b.n	8004cec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cd6:	2380      	movs	r3, #128	@ 0x80
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	61bb      	str	r3, [r7, #24]
        break;
 8004cdc:	e006      	b.n	8004cec <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ce2:	231e      	movs	r3, #30
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
        break;
 8004cea:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d100      	bne.n	8004cf4 <UART_SetConfig+0x180>
 8004cf2:	e097      	b.n	8004e24 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8004e6c <UART_SetConfig+0x2f8>)
 8004cfa:	0052      	lsls	r2, r2, #1
 8004cfc:	5ad3      	ldrh	r3, [r2, r3]
 8004cfe:	0019      	movs	r1, r3
 8004d00:	69b8      	ldr	r0, [r7, #24]
 8004d02:	f7fb fa0b 	bl	800011c <__udivsi3>
 8004d06:	0003      	movs	r3, r0
 8004d08:	005a      	lsls	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	18d2      	adds	r2, r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	0019      	movs	r1, r3
 8004d18:	0010      	movs	r0, r2
 8004d1a:	f7fb f9ff 	bl	800011c <__udivsi3>
 8004d1e:	0003      	movs	r3, r0
 8004d20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b0f      	cmp	r3, #15
 8004d26:	d91c      	bls.n	8004d62 <UART_SetConfig+0x1ee>
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	2380      	movs	r3, #128	@ 0x80
 8004d2c:	025b      	lsls	r3, r3, #9
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d217      	bcs.n	8004d62 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	200e      	movs	r0, #14
 8004d38:	183b      	adds	r3, r7, r0
 8004d3a:	210f      	movs	r1, #15
 8004d3c:	438a      	bics	r2, r1
 8004d3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2207      	movs	r2, #7
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b299      	uxth	r1, r3
 8004d4c:	183b      	adds	r3, r7, r0
 8004d4e:	183a      	adds	r2, r7, r0
 8004d50:	8812      	ldrh	r2, [r2, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	183a      	adds	r2, r7, r0
 8004d5c:	8812      	ldrh	r2, [r2, #0]
 8004d5e:	60da      	str	r2, [r3, #12]
 8004d60:	e060      	b.n	8004e24 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d62:	231e      	movs	r3, #30
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e05b      	b.n	8004e24 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d6c:	231f      	movs	r3, #31
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d01f      	beq.n	8004db6 <UART_SetConfig+0x242>
 8004d76:	dc22      	bgt.n	8004dbe <UART_SetConfig+0x24a>
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d017      	beq.n	8004dac <UART_SetConfig+0x238>
 8004d7c:	dc1f      	bgt.n	8004dbe <UART_SetConfig+0x24a>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <UART_SetConfig+0x214>
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d005      	beq.n	8004d92 <UART_SetConfig+0x21e>
 8004d86:	e01a      	b.n	8004dbe <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fd fff6 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	61bb      	str	r3, [r7, #24]
        break;
 8004d90:	e01c      	b.n	8004dcc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004d92:	4b33      	ldr	r3, [pc, #204]	@ (8004e60 <UART_SetConfig+0x2ec>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2207      	movs	r2, #7
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	0019      	movs	r1, r3
 8004da0:	4831      	ldr	r0, [pc, #196]	@ (8004e68 <UART_SetConfig+0x2f4>)
 8004da2:	f7fb f9bb 	bl	800011c <__udivsi3>
 8004da6:	0003      	movs	r3, r0
 8004da8:	61bb      	str	r3, [r7, #24]
        break;
 8004daa:	e00f      	b.n	8004dcc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dac:	f7fd ff76 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8004db0:	0003      	movs	r3, r0
 8004db2:	61bb      	str	r3, [r7, #24]
        break;
 8004db4:	e00a      	b.n	8004dcc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db6:	2380      	movs	r3, #128	@ 0x80
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	61bb      	str	r3, [r7, #24]
        break;
 8004dbc:	e006      	b.n	8004dcc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dc2:	231e      	movs	r3, #30
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]
        break;
 8004dca:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d028      	beq.n	8004e24 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dd6:	4b25      	ldr	r3, [pc, #148]	@ (8004e6c <UART_SetConfig+0x2f8>)
 8004dd8:	0052      	lsls	r2, r2, #1
 8004dda:	5ad3      	ldrh	r3, [r2, r3]
 8004ddc:	0019      	movs	r1, r3
 8004dde:	69b8      	ldr	r0, [r7, #24]
 8004de0:	f7fb f99c 	bl	800011c <__udivsi3>
 8004de4:	0003      	movs	r3, r0
 8004de6:	001a      	movs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	18d2      	adds	r2, r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	0019      	movs	r1, r3
 8004df6:	0010      	movs	r0, r2
 8004df8:	f7fb f990 	bl	800011c <__udivsi3>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	d90a      	bls.n	8004e1c <UART_SetConfig+0x2a8>
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	2380      	movs	r3, #128	@ 0x80
 8004e0a:	025b      	lsls	r3, r3, #9
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d205      	bcs.n	8004e1c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	e003      	b.n	8004e24 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1c:	231e      	movs	r3, #30
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	2201      	movs	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	226a      	movs	r2, #106	@ 0x6a
 8004e28:	2101      	movs	r1, #1
 8004e2a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2268      	movs	r2, #104	@ 0x68
 8004e30:	2101      	movs	r1, #1
 8004e32:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e40:	231e      	movs	r3, #30
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	781b      	ldrb	r3, [r3, #0]
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b008      	add	sp, #32
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	cfff69f3 	.word	0xcfff69f3
 8004e54:	ffffcfff 	.word	0xffffcfff
 8004e58:	11fff4ff 	.word	0x11fff4ff
 8004e5c:	40013800 	.word	0x40013800
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40004400 	.word	0x40004400
 8004e68:	02dc6c00 	.word	0x02dc6c00
 8004e6c:	08006600 	.word	0x08006600

08004e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a4a      	ldr	r2, [pc, #296]	@ (8004fb4 <UART_AdvFeatureConfig+0x144>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4a43      	ldr	r2, [pc, #268]	@ (8004fb8 <UART_AdvFeatureConfig+0x148>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4a3b      	ldr	r2, [pc, #236]	@ (8004fbc <UART_AdvFeatureConfig+0x14c>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	4a34      	ldr	r2, [pc, #208]	@ (8004fc0 <UART_AdvFeatureConfig+0x150>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	2210      	movs	r2, #16
 8004f06:	4013      	ands	r3, r2
 8004f08:	d00b      	beq.n	8004f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc4 <UART_AdvFeatureConfig+0x154>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f26:	2220      	movs	r2, #32
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	4a25      	ldr	r2, [pc, #148]	@ (8004fc8 <UART_AdvFeatureConfig+0x158>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	0019      	movs	r1, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f48:	2240      	movs	r2, #64	@ 0x40
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d01d      	beq.n	8004f8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	@ (8004fcc <UART_AdvFeatureConfig+0x15c>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	0019      	movs	r1, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f6a:	2380      	movs	r3, #128	@ 0x80
 8004f6c:	035b      	lsls	r3, r3, #13
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d10b      	bne.n	8004f8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a15      	ldr	r2, [pc, #84]	@ (8004fd0 <UART_AdvFeatureConfig+0x160>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	2280      	movs	r2, #128	@ 0x80
 8004f90:	4013      	ands	r3, r2
 8004f92:	d00b      	beq.n	8004fac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004fd4 <UART_AdvFeatureConfig+0x164>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }
}
 8004fac:	46c0      	nop			@ (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	ffff7fff 	.word	0xffff7fff
 8004fb8:	fffdffff 	.word	0xfffdffff
 8004fbc:	fffeffff 	.word	0xfffeffff
 8004fc0:	fffbffff 	.word	0xfffbffff
 8004fc4:	ffffefff 	.word	0xffffefff
 8004fc8:	ffffdfff 	.word	0xffffdfff
 8004fcc:	ffefffff 	.word	0xffefffff
 8004fd0:	ff9fffff 	.word	0xff9fffff
 8004fd4:	fff7ffff 	.word	0xfff7ffff

08004fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b092      	sub	sp, #72	@ 0x48
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2290      	movs	r2, #144	@ 0x90
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fe8:	f7fc f958 	bl	800129c <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d12d      	bne.n	800505a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005000:	2280      	movs	r2, #128	@ 0x80
 8005002:	0391      	lsls	r1, r2, #14
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4a47      	ldr	r2, [pc, #284]	@ (8005124 <UART_CheckIdleState+0x14c>)
 8005008:	9200      	str	r2, [sp, #0]
 800500a:	2200      	movs	r2, #0
 800500c:	f000 f88e 	bl	800512c <UART_WaitOnFlagUntilTimeout>
 8005010:	1e03      	subs	r3, r0, #0
 8005012:	d022      	beq.n	800505a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005014:	f3ef 8310 	mrs	r3, PRIMASK
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800501c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800501e:	2301      	movs	r3, #1
 8005020:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005024:	f383 8810 	msr	PRIMASK, r3
}
 8005028:	46c0      	nop			@ (mov r8, r8)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2180      	movs	r1, #128	@ 0x80
 8005036:	438a      	bics	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005040:	f383 8810 	msr	PRIMASK, r3
}
 8005044:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2288      	movs	r2, #136	@ 0x88
 800504a:	2120      	movs	r1, #32
 800504c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2284      	movs	r2, #132	@ 0x84
 8005052:	2100      	movs	r1, #0
 8005054:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e060      	b.n	800511c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2204      	movs	r2, #4
 8005062:	4013      	ands	r3, r2
 8005064:	2b04      	cmp	r3, #4
 8005066:	d146      	bne.n	80050f6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800506a:	2280      	movs	r2, #128	@ 0x80
 800506c:	03d1      	lsls	r1, r2, #15
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4a2c      	ldr	r2, [pc, #176]	@ (8005124 <UART_CheckIdleState+0x14c>)
 8005072:	9200      	str	r2, [sp, #0]
 8005074:	2200      	movs	r2, #0
 8005076:	f000 f859 	bl	800512c <UART_WaitOnFlagUntilTimeout>
 800507a:	1e03      	subs	r3, r0, #0
 800507c:	d03b      	beq.n	80050f6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800507e:	f3ef 8310 	mrs	r3, PRIMASK
 8005082:	60fb      	str	r3, [r7, #12]
  return(result);
 8005084:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005086:	637b      	str	r3, [r7, #52]	@ 0x34
 8005088:	2301      	movs	r3, #1
 800508a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f383 8810 	msr	PRIMASK, r3
}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4922      	ldr	r1, [pc, #136]	@ (8005128 <UART_CheckIdleState+0x150>)
 80050a0:	400a      	ands	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f383 8810 	msr	PRIMASK, r3
}
 80050ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050b0:	f3ef 8310 	mrs	r3, PRIMASK
 80050b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80050b6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ba:	2301      	movs	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f383 8810 	msr	PRIMASK, r3
}
 80050c4:	46c0      	nop			@ (mov r8, r8)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2101      	movs	r1, #1
 80050d2:	438a      	bics	r2, r1
 80050d4:	609a      	str	r2, [r3, #8]
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f383 8810 	msr	PRIMASK, r3
}
 80050e0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	228c      	movs	r2, #140	@ 0x8c
 80050e6:	2120      	movs	r1, #32
 80050e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2284      	movs	r2, #132	@ 0x84
 80050ee:	2100      	movs	r1, #0
 80050f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e012      	b.n	800511c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2288      	movs	r2, #136	@ 0x88
 80050fa:	2120      	movs	r1, #32
 80050fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	228c      	movs	r2, #140	@ 0x8c
 8005102:	2120      	movs	r1, #32
 8005104:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2284      	movs	r2, #132	@ 0x84
 8005116:	2100      	movs	r1, #0
 8005118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	b010      	add	sp, #64	@ 0x40
 8005122:	bd80      	pop	{r7, pc}
 8005124:	01ffffff 	.word	0x01ffffff
 8005128:	fffffedf 	.word	0xfffffedf

0800512c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	1dfb      	adds	r3, r7, #7
 800513a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800513c:	e051      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	3301      	adds	r3, #1
 8005142:	d04e      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005144:	f7fc f8aa 	bl	800129c <HAL_GetTick>
 8005148:	0002      	movs	r2, r0
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	429a      	cmp	r2, r3
 8005152:	d302      	bcc.n	800515a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e051      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2204      	movs	r2, #4
 8005166:	4013      	ands	r3, r2
 8005168:	d03b      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b80      	cmp	r3, #128	@ 0x80
 800516e:	d038      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b40      	cmp	r3, #64	@ 0x40
 8005174:	d035      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	2208      	movs	r2, #8
 800517e:	4013      	ands	r3, r2
 8005180:	2b08      	cmp	r3, #8
 8005182:	d111      	bne.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2208      	movs	r2, #8
 800518a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	0018      	movs	r0, r3
 8005190:	f000 f83c 	bl	800520c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2290      	movs	r2, #144	@ 0x90
 8005198:	2108      	movs	r1, #8
 800519a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2284      	movs	r2, #132	@ 0x84
 80051a0:	2100      	movs	r1, #0
 80051a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e02c      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69da      	ldr	r2, [r3, #28]
 80051ae:	2380      	movs	r3, #128	@ 0x80
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	401a      	ands	r2, r3
 80051b4:	2380      	movs	r3, #128	@ 0x80
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d112      	bne.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2280      	movs	r2, #128	@ 0x80
 80051c2:	0112      	lsls	r2, r2, #4
 80051c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	0018      	movs	r0, r3
 80051ca:	f000 f81f 	bl	800520c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2290      	movs	r2, #144	@ 0x90
 80051d2:	2120      	movs	r1, #32
 80051d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2284      	movs	r2, #132	@ 0x84
 80051da:	2100      	movs	r1, #0
 80051dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e00f      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	4013      	ands	r3, r2
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	425a      	negs	r2, r3
 80051f2:	4153      	adcs	r3, r2
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	001a      	movs	r2, r3
 80051f8:	1dfb      	adds	r3, r7, #7
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d09e      	beq.n	800513e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	0018      	movs	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	b004      	add	sp, #16
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08e      	sub	sp, #56	@ 0x38
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005214:	f3ef 8310 	mrs	r3, PRIMASK
 8005218:	617b      	str	r3, [r7, #20]
  return(result);
 800521a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800521c:	637b      	str	r3, [r7, #52]	@ 0x34
 800521e:	2301      	movs	r3, #1
 8005220:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	f383 8810 	msr	PRIMASK, r3
}
 8005228:	46c0      	nop			@ (mov r8, r8)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4926      	ldr	r1, [pc, #152]	@ (80052d0 <UART_EndRxTransfer+0xc4>)
 8005236:	400a      	ands	r2, r1
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f383 8810 	msr	PRIMASK, r3
}
 8005244:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005246:	f3ef 8310 	mrs	r3, PRIMASK
 800524a:	623b      	str	r3, [r7, #32]
  return(result);
 800524c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800524e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005250:	2301      	movs	r3, #1
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	f383 8810 	msr	PRIMASK, r3
}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	491b      	ldr	r1, [pc, #108]	@ (80052d4 <UART_EndRxTransfer+0xc8>)
 8005268:	400a      	ands	r2, r1
 800526a:	609a      	str	r2, [r3, #8]
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005272:	f383 8810 	msr	PRIMASK, r3
}
 8005276:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d118      	bne.n	80052b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005280:	f3ef 8310 	mrs	r3, PRIMASK
 8005284:	60bb      	str	r3, [r7, #8]
  return(result);
 8005286:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800528a:	2301      	movs	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f383 8810 	msr	PRIMASK, r3
}
 8005294:	46c0      	nop			@ (mov r8, r8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2110      	movs	r1, #16
 80052a2:	438a      	bics	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	228c      	movs	r2, #140	@ 0x8c
 80052b6:	2120      	movs	r1, #32
 80052b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80052c6:	46c0      	nop			@ (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b00e      	add	sp, #56	@ 0x38
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	46c0      	nop			@ (mov r8, r8)
 80052d0:	fffffedf 	.word	0xfffffedf
 80052d4:	effffffe 	.word	0xeffffffe

080052d8 <setbuf>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	2380      	movs	r3, #128	@ 0x80
 80052dc:	424a      	negs	r2, r1
 80052de:	414a      	adcs	r2, r1
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	0052      	lsls	r2, r2, #1
 80052e4:	f000 f802 	bl	80052ec <setvbuf>
 80052e8:	bd10      	pop	{r4, pc}
	...

080052ec <setvbuf>:
 80052ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ee:	001d      	movs	r5, r3
 80052f0:	4b57      	ldr	r3, [pc, #348]	@ (8005450 <setvbuf+0x164>)
 80052f2:	b085      	sub	sp, #20
 80052f4:	681e      	ldr	r6, [r3, #0]
 80052f6:	0004      	movs	r4, r0
 80052f8:	000f      	movs	r7, r1
 80052fa:	9200      	str	r2, [sp, #0]
 80052fc:	2e00      	cmp	r6, #0
 80052fe:	d005      	beq.n	800530c <setvbuf+0x20>
 8005300:	6a33      	ldr	r3, [r6, #32]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <setvbuf+0x20>
 8005306:	0030      	movs	r0, r6
 8005308:	f000 f936 	bl	8005578 <__sinit>
 800530c:	9b00      	ldr	r3, [sp, #0]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d005      	beq.n	800531e <setvbuf+0x32>
 8005312:	2b01      	cmp	r3, #1
 8005314:	d900      	bls.n	8005318 <setvbuf+0x2c>
 8005316:	e097      	b.n	8005448 <setvbuf+0x15c>
 8005318:	2d00      	cmp	r5, #0
 800531a:	da00      	bge.n	800531e <setvbuf+0x32>
 800531c:	e094      	b.n	8005448 <setvbuf+0x15c>
 800531e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005320:	07db      	lsls	r3, r3, #31
 8005322:	d405      	bmi.n	8005330 <setvbuf+0x44>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	059b      	lsls	r3, r3, #22
 8005328:	d402      	bmi.n	8005330 <setvbuf+0x44>
 800532a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800532c:	f000 fa95 	bl	800585a <__retarget_lock_acquire_recursive>
 8005330:	0021      	movs	r1, r4
 8005332:	0030      	movs	r0, r6
 8005334:	f000 fed2 	bl	80060dc <_fflush_r>
 8005338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800533a:	2900      	cmp	r1, #0
 800533c:	d008      	beq.n	8005350 <setvbuf+0x64>
 800533e:	0023      	movs	r3, r4
 8005340:	3344      	adds	r3, #68	@ 0x44
 8005342:	4299      	cmp	r1, r3
 8005344:	d002      	beq.n	800534c <setvbuf+0x60>
 8005346:	0030      	movs	r0, r6
 8005348:	f000 fa8a 	bl	8005860 <_free_r>
 800534c:	2300      	movs	r3, #0
 800534e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005350:	2300      	movs	r3, #0
 8005352:	61a3      	str	r3, [r4, #24]
 8005354:	6063      	str	r3, [r4, #4]
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	d503      	bpl.n	8005364 <setvbuf+0x78>
 800535c:	0030      	movs	r0, r6
 800535e:	6921      	ldr	r1, [r4, #16]
 8005360:	f000 fa7e 	bl	8005860 <_free_r>
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	4a3b      	ldr	r2, [pc, #236]	@ (8005454 <setvbuf+0x168>)
 8005368:	4013      	ands	r3, r2
 800536a:	81a3      	strh	r3, [r4, #12]
 800536c:	9b00      	ldr	r3, [sp, #0]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d060      	beq.n	8005434 <setvbuf+0x148>
 8005372:	ab03      	add	r3, sp, #12
 8005374:	0021      	movs	r1, r4
 8005376:	0030      	movs	r0, r6
 8005378:	aa02      	add	r2, sp, #8
 800537a:	f000 f931 	bl	80055e0 <__swhatbuf_r>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	4303      	orrs	r3, r0
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	2d00      	cmp	r5, #0
 8005386:	d124      	bne.n	80053d2 <setvbuf+0xe6>
 8005388:	9d02      	ldr	r5, [sp, #8]
 800538a:	0028      	movs	r0, r5
 800538c:	f000 fbf6 	bl	8005b7c <malloc>
 8005390:	9501      	str	r5, [sp, #4]
 8005392:	1e07      	subs	r7, r0, #0
 8005394:	d148      	bne.n	8005428 <setvbuf+0x13c>
 8005396:	9b02      	ldr	r3, [sp, #8]
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	42ab      	cmp	r3, r5
 800539c:	d13f      	bne.n	800541e <setvbuf+0x132>
 800539e:	2501      	movs	r5, #1
 80053a0:	426d      	negs	r5, r5
 80053a2:	220c      	movs	r2, #12
 80053a4:	5ea3      	ldrsh	r3, [r4, r2]
 80053a6:	2202      	movs	r2, #2
 80053a8:	431a      	orrs	r2, r3
 80053aa:	81a2      	strh	r2, [r4, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	60a2      	str	r2, [r4, #8]
 80053b0:	0022      	movs	r2, r4
 80053b2:	3247      	adds	r2, #71	@ 0x47
 80053b4:	6022      	str	r2, [r4, #0]
 80053b6:	6122      	str	r2, [r4, #16]
 80053b8:	2201      	movs	r2, #1
 80053ba:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80053bc:	6162      	str	r2, [r4, #20]
 80053be:	4211      	tst	r1, r2
 80053c0:	d104      	bne.n	80053cc <setvbuf+0xe0>
 80053c2:	059b      	lsls	r3, r3, #22
 80053c4:	d402      	bmi.n	80053cc <setvbuf+0xe0>
 80053c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053c8:	f000 fa48 	bl	800585c <__retarget_lock_release_recursive>
 80053cc:	0028      	movs	r0, r5
 80053ce:	b005      	add	sp, #20
 80053d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d2:	2f00      	cmp	r7, #0
 80053d4:	d0d9      	beq.n	800538a <setvbuf+0x9e>
 80053d6:	6a33      	ldr	r3, [r6, #32]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d102      	bne.n	80053e2 <setvbuf+0xf6>
 80053dc:	0030      	movs	r0, r6
 80053de:	f000 f8cb 	bl	8005578 <__sinit>
 80053e2:	9b00      	ldr	r3, [sp, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d103      	bne.n	80053f0 <setvbuf+0x104>
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	9a00      	ldr	r2, [sp, #0]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	81a2      	strh	r2, [r4, #12]
 80053f0:	220c      	movs	r2, #12
 80053f2:	5ea3      	ldrsh	r3, [r4, r2]
 80053f4:	2208      	movs	r2, #8
 80053f6:	0019      	movs	r1, r3
 80053f8:	6027      	str	r7, [r4, #0]
 80053fa:	6127      	str	r7, [r4, #16]
 80053fc:	6165      	str	r5, [r4, #20]
 80053fe:	4011      	ands	r1, r2
 8005400:	4213      	tst	r3, r2
 8005402:	d01b      	beq.n	800543c <setvbuf+0x150>
 8005404:	07da      	lsls	r2, r3, #31
 8005406:	d517      	bpl.n	8005438 <setvbuf+0x14c>
 8005408:	2200      	movs	r2, #0
 800540a:	426d      	negs	r5, r5
 800540c:	60a2      	str	r2, [r4, #8]
 800540e:	61a5      	str	r5, [r4, #24]
 8005410:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005412:	07d2      	lsls	r2, r2, #31
 8005414:	d401      	bmi.n	800541a <setvbuf+0x12e>
 8005416:	059b      	lsls	r3, r3, #22
 8005418:	d512      	bpl.n	8005440 <setvbuf+0x154>
 800541a:	2500      	movs	r5, #0
 800541c:	e7d6      	b.n	80053cc <setvbuf+0xe0>
 800541e:	9801      	ldr	r0, [sp, #4]
 8005420:	f000 fbac 	bl	8005b7c <malloc>
 8005424:	1e07      	subs	r7, r0, #0
 8005426:	d0ba      	beq.n	800539e <setvbuf+0xb2>
 8005428:	2380      	movs	r3, #128	@ 0x80
 800542a:	89a2      	ldrh	r2, [r4, #12]
 800542c:	9d01      	ldr	r5, [sp, #4]
 800542e:	4313      	orrs	r3, r2
 8005430:	81a3      	strh	r3, [r4, #12]
 8005432:	e7d0      	b.n	80053d6 <setvbuf+0xea>
 8005434:	2500      	movs	r5, #0
 8005436:	e7b4      	b.n	80053a2 <setvbuf+0xb6>
 8005438:	60a5      	str	r5, [r4, #8]
 800543a:	e7e9      	b.n	8005410 <setvbuf+0x124>
 800543c:	60a1      	str	r1, [r4, #8]
 800543e:	e7e7      	b.n	8005410 <setvbuf+0x124>
 8005440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005442:	f000 fa0b 	bl	800585c <__retarget_lock_release_recursive>
 8005446:	e7e8      	b.n	800541a <setvbuf+0x12e>
 8005448:	2501      	movs	r5, #1
 800544a:	426d      	negs	r5, r5
 800544c:	e7be      	b.n	80053cc <setvbuf+0xe0>
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	20000018 	.word	0x20000018
 8005454:	fffff35c 	.word	0xfffff35c

08005458 <std>:
 8005458:	2300      	movs	r3, #0
 800545a:	b510      	push	{r4, lr}
 800545c:	0004      	movs	r4, r0
 800545e:	6003      	str	r3, [r0, #0]
 8005460:	6043      	str	r3, [r0, #4]
 8005462:	6083      	str	r3, [r0, #8]
 8005464:	8181      	strh	r1, [r0, #12]
 8005466:	6643      	str	r3, [r0, #100]	@ 0x64
 8005468:	81c2      	strh	r2, [r0, #14]
 800546a:	6103      	str	r3, [r0, #16]
 800546c:	6143      	str	r3, [r0, #20]
 800546e:	6183      	str	r3, [r0, #24]
 8005470:	0019      	movs	r1, r3
 8005472:	2208      	movs	r2, #8
 8005474:	305c      	adds	r0, #92	@ 0x5c
 8005476:	f000 f999 	bl	80057ac <memset>
 800547a:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <std+0x50>)
 800547c:	6224      	str	r4, [r4, #32]
 800547e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005480:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <std+0x54>)
 8005482:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005484:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <std+0x58>)
 8005486:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005488:	4b0a      	ldr	r3, [pc, #40]	@ (80054b4 <std+0x5c>)
 800548a:	6323      	str	r3, [r4, #48]	@ 0x30
 800548c:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <std+0x60>)
 800548e:	429c      	cmp	r4, r3
 8005490:	d005      	beq.n	800549e <std+0x46>
 8005492:	4b0a      	ldr	r3, [pc, #40]	@ (80054bc <std+0x64>)
 8005494:	429c      	cmp	r4, r3
 8005496:	d002      	beq.n	800549e <std+0x46>
 8005498:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <std+0x68>)
 800549a:	429c      	cmp	r4, r3
 800549c:	d103      	bne.n	80054a6 <std+0x4e>
 800549e:	0020      	movs	r0, r4
 80054a0:	3058      	adds	r0, #88	@ 0x58
 80054a2:	f000 f9d9 	bl	8005858 <__retarget_lock_init_recursive>
 80054a6:	bd10      	pop	{r4, pc}
 80054a8:	08006155 	.word	0x08006155
 80054ac:	0800617d 	.word	0x0800617d
 80054b0:	080061b5 	.word	0x080061b5
 80054b4:	080061e1 	.word	0x080061e1
 80054b8:	20000230 	.word	0x20000230
 80054bc:	20000298 	.word	0x20000298
 80054c0:	20000300 	.word	0x20000300

080054c4 <stdio_exit_handler>:
 80054c4:	b510      	push	{r4, lr}
 80054c6:	4a03      	ldr	r2, [pc, #12]	@ (80054d4 <stdio_exit_handler+0x10>)
 80054c8:	4903      	ldr	r1, [pc, #12]	@ (80054d8 <stdio_exit_handler+0x14>)
 80054ca:	4804      	ldr	r0, [pc, #16]	@ (80054dc <stdio_exit_handler+0x18>)
 80054cc:	f000 f86c 	bl	80055a8 <_fwalk_sglue>
 80054d0:	bd10      	pop	{r4, pc}
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	2000000c 	.word	0x2000000c
 80054d8:	080060dd 	.word	0x080060dd
 80054dc:	2000001c 	.word	0x2000001c

080054e0 <cleanup_stdio>:
 80054e0:	6841      	ldr	r1, [r0, #4]
 80054e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <cleanup_stdio+0x30>)
 80054e4:	b510      	push	{r4, lr}
 80054e6:	0004      	movs	r4, r0
 80054e8:	4299      	cmp	r1, r3
 80054ea:	d001      	beq.n	80054f0 <cleanup_stdio+0x10>
 80054ec:	f000 fdf6 	bl	80060dc <_fflush_r>
 80054f0:	68a1      	ldr	r1, [r4, #8]
 80054f2:	4b08      	ldr	r3, [pc, #32]	@ (8005514 <cleanup_stdio+0x34>)
 80054f4:	4299      	cmp	r1, r3
 80054f6:	d002      	beq.n	80054fe <cleanup_stdio+0x1e>
 80054f8:	0020      	movs	r0, r4
 80054fa:	f000 fdef 	bl	80060dc <_fflush_r>
 80054fe:	68e1      	ldr	r1, [r4, #12]
 8005500:	4b05      	ldr	r3, [pc, #20]	@ (8005518 <cleanup_stdio+0x38>)
 8005502:	4299      	cmp	r1, r3
 8005504:	d002      	beq.n	800550c <cleanup_stdio+0x2c>
 8005506:	0020      	movs	r0, r4
 8005508:	f000 fde8 	bl	80060dc <_fflush_r>
 800550c:	bd10      	pop	{r4, pc}
 800550e:	46c0      	nop			@ (mov r8, r8)
 8005510:	20000230 	.word	0x20000230
 8005514:	20000298 	.word	0x20000298
 8005518:	20000300 	.word	0x20000300

0800551c <global_stdio_init.part.0>:
 800551c:	b510      	push	{r4, lr}
 800551e:	4b09      	ldr	r3, [pc, #36]	@ (8005544 <global_stdio_init.part.0+0x28>)
 8005520:	4a09      	ldr	r2, [pc, #36]	@ (8005548 <global_stdio_init.part.0+0x2c>)
 8005522:	2104      	movs	r1, #4
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	4809      	ldr	r0, [pc, #36]	@ (800554c <global_stdio_init.part.0+0x30>)
 8005528:	2200      	movs	r2, #0
 800552a:	f7ff ff95 	bl	8005458 <std>
 800552e:	2201      	movs	r2, #1
 8005530:	2109      	movs	r1, #9
 8005532:	4807      	ldr	r0, [pc, #28]	@ (8005550 <global_stdio_init.part.0+0x34>)
 8005534:	f7ff ff90 	bl	8005458 <std>
 8005538:	2202      	movs	r2, #2
 800553a:	2112      	movs	r1, #18
 800553c:	4805      	ldr	r0, [pc, #20]	@ (8005554 <global_stdio_init.part.0+0x38>)
 800553e:	f7ff ff8b 	bl	8005458 <std>
 8005542:	bd10      	pop	{r4, pc}
 8005544:	20000368 	.word	0x20000368
 8005548:	080054c5 	.word	0x080054c5
 800554c:	20000230 	.word	0x20000230
 8005550:	20000298 	.word	0x20000298
 8005554:	20000300 	.word	0x20000300

08005558 <__sfp_lock_acquire>:
 8005558:	b510      	push	{r4, lr}
 800555a:	4802      	ldr	r0, [pc, #8]	@ (8005564 <__sfp_lock_acquire+0xc>)
 800555c:	f000 f97d 	bl	800585a <__retarget_lock_acquire_recursive>
 8005560:	bd10      	pop	{r4, pc}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	2000036d 	.word	0x2000036d

08005568 <__sfp_lock_release>:
 8005568:	b510      	push	{r4, lr}
 800556a:	4802      	ldr	r0, [pc, #8]	@ (8005574 <__sfp_lock_release+0xc>)
 800556c:	f000 f976 	bl	800585c <__retarget_lock_release_recursive>
 8005570:	bd10      	pop	{r4, pc}
 8005572:	46c0      	nop			@ (mov r8, r8)
 8005574:	2000036d 	.word	0x2000036d

08005578 <__sinit>:
 8005578:	b510      	push	{r4, lr}
 800557a:	0004      	movs	r4, r0
 800557c:	f7ff ffec 	bl	8005558 <__sfp_lock_acquire>
 8005580:	6a23      	ldr	r3, [r4, #32]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <__sinit+0x14>
 8005586:	f7ff ffef 	bl	8005568 <__sfp_lock_release>
 800558a:	bd10      	pop	{r4, pc}
 800558c:	4b04      	ldr	r3, [pc, #16]	@ (80055a0 <__sinit+0x28>)
 800558e:	6223      	str	r3, [r4, #32]
 8005590:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <__sinit+0x2c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f6      	bne.n	8005586 <__sinit+0xe>
 8005598:	f7ff ffc0 	bl	800551c <global_stdio_init.part.0>
 800559c:	e7f3      	b.n	8005586 <__sinit+0xe>
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	080054e1 	.word	0x080054e1
 80055a4:	20000368 	.word	0x20000368

080055a8 <_fwalk_sglue>:
 80055a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055aa:	0014      	movs	r4, r2
 80055ac:	2600      	movs	r6, #0
 80055ae:	9000      	str	r0, [sp, #0]
 80055b0:	9101      	str	r1, [sp, #4]
 80055b2:	68a5      	ldr	r5, [r4, #8]
 80055b4:	6867      	ldr	r7, [r4, #4]
 80055b6:	3f01      	subs	r7, #1
 80055b8:	d504      	bpl.n	80055c4 <_fwalk_sglue+0x1c>
 80055ba:	6824      	ldr	r4, [r4, #0]
 80055bc:	2c00      	cmp	r4, #0
 80055be:	d1f8      	bne.n	80055b2 <_fwalk_sglue+0xa>
 80055c0:	0030      	movs	r0, r6
 80055c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055c4:	89ab      	ldrh	r3, [r5, #12]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d908      	bls.n	80055dc <_fwalk_sglue+0x34>
 80055ca:	220e      	movs	r2, #14
 80055cc:	5eab      	ldrsh	r3, [r5, r2]
 80055ce:	3301      	adds	r3, #1
 80055d0:	d004      	beq.n	80055dc <_fwalk_sglue+0x34>
 80055d2:	0029      	movs	r1, r5
 80055d4:	9800      	ldr	r0, [sp, #0]
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	4798      	blx	r3
 80055da:	4306      	orrs	r6, r0
 80055dc:	3568      	adds	r5, #104	@ 0x68
 80055de:	e7ea      	b.n	80055b6 <_fwalk_sglue+0xe>

080055e0 <__swhatbuf_r>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	000e      	movs	r6, r1
 80055e4:	001d      	movs	r5, r3
 80055e6:	230e      	movs	r3, #14
 80055e8:	5ec9      	ldrsh	r1, [r1, r3]
 80055ea:	0014      	movs	r4, r2
 80055ec:	b096      	sub	sp, #88	@ 0x58
 80055ee:	2900      	cmp	r1, #0
 80055f0:	da0c      	bge.n	800560c <__swhatbuf_r+0x2c>
 80055f2:	89b2      	ldrh	r2, [r6, #12]
 80055f4:	2380      	movs	r3, #128	@ 0x80
 80055f6:	0011      	movs	r1, r2
 80055f8:	4019      	ands	r1, r3
 80055fa:	421a      	tst	r2, r3
 80055fc:	d114      	bne.n	8005628 <__swhatbuf_r+0x48>
 80055fe:	2380      	movs	r3, #128	@ 0x80
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	2000      	movs	r0, #0
 8005604:	6029      	str	r1, [r5, #0]
 8005606:	6023      	str	r3, [r4, #0]
 8005608:	b016      	add	sp, #88	@ 0x58
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	466a      	mov	r2, sp
 800560e:	f000 f8d5 	bl	80057bc <_fstat_r>
 8005612:	2800      	cmp	r0, #0
 8005614:	dbed      	blt.n	80055f2 <__swhatbuf_r+0x12>
 8005616:	23f0      	movs	r3, #240	@ 0xf0
 8005618:	9901      	ldr	r1, [sp, #4]
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	4019      	ands	r1, r3
 800561e:	4b04      	ldr	r3, [pc, #16]	@ (8005630 <__swhatbuf_r+0x50>)
 8005620:	18c9      	adds	r1, r1, r3
 8005622:	424b      	negs	r3, r1
 8005624:	4159      	adcs	r1, r3
 8005626:	e7ea      	b.n	80055fe <__swhatbuf_r+0x1e>
 8005628:	2100      	movs	r1, #0
 800562a:	2340      	movs	r3, #64	@ 0x40
 800562c:	e7e9      	b.n	8005602 <__swhatbuf_r+0x22>
 800562e:	46c0      	nop			@ (mov r8, r8)
 8005630:	ffffe000 	.word	0xffffe000

08005634 <__smakebuf_r>:
 8005634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005636:	2602      	movs	r6, #2
 8005638:	898b      	ldrh	r3, [r1, #12]
 800563a:	0005      	movs	r5, r0
 800563c:	000c      	movs	r4, r1
 800563e:	b085      	sub	sp, #20
 8005640:	4233      	tst	r3, r6
 8005642:	d007      	beq.n	8005654 <__smakebuf_r+0x20>
 8005644:	0023      	movs	r3, r4
 8005646:	3347      	adds	r3, #71	@ 0x47
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	6123      	str	r3, [r4, #16]
 800564c:	2301      	movs	r3, #1
 800564e:	6163      	str	r3, [r4, #20]
 8005650:	b005      	add	sp, #20
 8005652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005654:	ab03      	add	r3, sp, #12
 8005656:	aa02      	add	r2, sp, #8
 8005658:	f7ff ffc2 	bl	80055e0 <__swhatbuf_r>
 800565c:	9f02      	ldr	r7, [sp, #8]
 800565e:	9001      	str	r0, [sp, #4]
 8005660:	0039      	movs	r1, r7
 8005662:	0028      	movs	r0, r5
 8005664:	f000 fab6 	bl	8005bd4 <_malloc_r>
 8005668:	2800      	cmp	r0, #0
 800566a:	d108      	bne.n	800567e <__smakebuf_r+0x4a>
 800566c:	220c      	movs	r2, #12
 800566e:	5ea3      	ldrsh	r3, [r4, r2]
 8005670:	059a      	lsls	r2, r3, #22
 8005672:	d4ed      	bmi.n	8005650 <__smakebuf_r+0x1c>
 8005674:	2203      	movs	r2, #3
 8005676:	4393      	bics	r3, r2
 8005678:	431e      	orrs	r6, r3
 800567a:	81a6      	strh	r6, [r4, #12]
 800567c:	e7e2      	b.n	8005644 <__smakebuf_r+0x10>
 800567e:	2380      	movs	r3, #128	@ 0x80
 8005680:	89a2      	ldrh	r2, [r4, #12]
 8005682:	6020      	str	r0, [r4, #0]
 8005684:	4313      	orrs	r3, r2
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	6120      	str	r0, [r4, #16]
 800568c:	6167      	str	r7, [r4, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <__smakebuf_r+0x78>
 8005692:	0028      	movs	r0, r5
 8005694:	230e      	movs	r3, #14
 8005696:	5ee1      	ldrsh	r1, [r4, r3]
 8005698:	f000 f8a2 	bl	80057e0 <_isatty_r>
 800569c:	2800      	cmp	r0, #0
 800569e:	d005      	beq.n	80056ac <__smakebuf_r+0x78>
 80056a0:	2303      	movs	r3, #3
 80056a2:	89a2      	ldrh	r2, [r4, #12]
 80056a4:	439a      	bics	r2, r3
 80056a6:	3b02      	subs	r3, #2
 80056a8:	4313      	orrs	r3, r2
 80056aa:	81a3      	strh	r3, [r4, #12]
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	9a01      	ldr	r2, [sp, #4]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	81a3      	strh	r3, [r4, #12]
 80056b4:	e7cc      	b.n	8005650 <__smakebuf_r+0x1c>
	...

080056b8 <iprintf>:
 80056b8:	b40f      	push	{r0, r1, r2, r3}
 80056ba:	b507      	push	{r0, r1, r2, lr}
 80056bc:	4905      	ldr	r1, [pc, #20]	@ (80056d4 <iprintf+0x1c>)
 80056be:	ab04      	add	r3, sp, #16
 80056c0:	6808      	ldr	r0, [r1, #0]
 80056c2:	cb04      	ldmia	r3!, {r2}
 80056c4:	6881      	ldr	r1, [r0, #8]
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	f000 f93c 	bl	8005944 <_vfiprintf_r>
 80056cc:	b003      	add	sp, #12
 80056ce:	bc08      	pop	{r3}
 80056d0:	b004      	add	sp, #16
 80056d2:	4718      	bx	r3
 80056d4:	20000018 	.word	0x20000018

080056d8 <putchar>:
 80056d8:	b510      	push	{r4, lr}
 80056da:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <putchar+0x10>)
 80056dc:	0001      	movs	r1, r0
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	6882      	ldr	r2, [r0, #8]
 80056e2:	f000 fe23 	bl	800632c <_putc_r>
 80056e6:	bd10      	pop	{r4, pc}
 80056e8:	20000018 	.word	0x20000018

080056ec <_puts_r>:
 80056ec:	6a03      	ldr	r3, [r0, #32]
 80056ee:	b570      	push	{r4, r5, r6, lr}
 80056f0:	0005      	movs	r5, r0
 80056f2:	000e      	movs	r6, r1
 80056f4:	6884      	ldr	r4, [r0, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <_puts_r+0x12>
 80056fa:	f7ff ff3d 	bl	8005578 <__sinit>
 80056fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005700:	07db      	lsls	r3, r3, #31
 8005702:	d405      	bmi.n	8005710 <_puts_r+0x24>
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	059b      	lsls	r3, r3, #22
 8005708:	d402      	bmi.n	8005710 <_puts_r+0x24>
 800570a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800570c:	f000 f8a5 	bl	800585a <__retarget_lock_acquire_recursive>
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	071b      	lsls	r3, r3, #28
 8005714:	d502      	bpl.n	800571c <_puts_r+0x30>
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d11f      	bne.n	800575c <_puts_r+0x70>
 800571c:	0021      	movs	r1, r4
 800571e:	0028      	movs	r0, r5
 8005720:	f000 fda6 	bl	8006270 <__swsetup_r>
 8005724:	2800      	cmp	r0, #0
 8005726:	d019      	beq.n	800575c <_puts_r+0x70>
 8005728:	2501      	movs	r5, #1
 800572a:	426d      	negs	r5, r5
 800572c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800572e:	07db      	lsls	r3, r3, #31
 8005730:	d405      	bmi.n	800573e <_puts_r+0x52>
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	059b      	lsls	r3, r3, #22
 8005736:	d402      	bmi.n	800573e <_puts_r+0x52>
 8005738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800573a:	f000 f88f 	bl	800585c <__retarget_lock_release_recursive>
 800573e:	0028      	movs	r0, r5
 8005740:	bd70      	pop	{r4, r5, r6, pc}
 8005742:	3601      	adds	r6, #1
 8005744:	60a3      	str	r3, [r4, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	da04      	bge.n	8005754 <_puts_r+0x68>
 800574a:	69a2      	ldr	r2, [r4, #24]
 800574c:	429a      	cmp	r2, r3
 800574e:	dc16      	bgt.n	800577e <_puts_r+0x92>
 8005750:	290a      	cmp	r1, #10
 8005752:	d014      	beq.n	800577e <_puts_r+0x92>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	6022      	str	r2, [r4, #0]
 800575a:	7019      	strb	r1, [r3, #0]
 800575c:	68a3      	ldr	r3, [r4, #8]
 800575e:	7831      	ldrb	r1, [r6, #0]
 8005760:	3b01      	subs	r3, #1
 8005762:	2900      	cmp	r1, #0
 8005764:	d1ed      	bne.n	8005742 <_puts_r+0x56>
 8005766:	60a3      	str	r3, [r4, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	da0f      	bge.n	800578c <_puts_r+0xa0>
 800576c:	0022      	movs	r2, r4
 800576e:	0028      	movs	r0, r5
 8005770:	310a      	adds	r1, #10
 8005772:	f000 fd3b 	bl	80061ec <__swbuf_r>
 8005776:	3001      	adds	r0, #1
 8005778:	d0d6      	beq.n	8005728 <_puts_r+0x3c>
 800577a:	250a      	movs	r5, #10
 800577c:	e7d6      	b.n	800572c <_puts_r+0x40>
 800577e:	0022      	movs	r2, r4
 8005780:	0028      	movs	r0, r5
 8005782:	f000 fd33 	bl	80061ec <__swbuf_r>
 8005786:	3001      	adds	r0, #1
 8005788:	d1e8      	bne.n	800575c <_puts_r+0x70>
 800578a:	e7cd      	b.n	8005728 <_puts_r+0x3c>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	6022      	str	r2, [r4, #0]
 8005792:	220a      	movs	r2, #10
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e7f0      	b.n	800577a <_puts_r+0x8e>

08005798 <puts>:
 8005798:	b510      	push	{r4, lr}
 800579a:	4b03      	ldr	r3, [pc, #12]	@ (80057a8 <puts+0x10>)
 800579c:	0001      	movs	r1, r0
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	f7ff ffa4 	bl	80056ec <_puts_r>
 80057a4:	bd10      	pop	{r4, pc}
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	20000018 	.word	0x20000018

080057ac <memset>:
 80057ac:	0003      	movs	r3, r0
 80057ae:	1882      	adds	r2, r0, r2
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d100      	bne.n	80057b6 <memset+0xa>
 80057b4:	4770      	bx	lr
 80057b6:	7019      	strb	r1, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	e7f9      	b.n	80057b0 <memset+0x4>

080057bc <_fstat_r>:
 80057bc:	2300      	movs	r3, #0
 80057be:	b570      	push	{r4, r5, r6, lr}
 80057c0:	4d06      	ldr	r5, [pc, #24]	@ (80057dc <_fstat_r+0x20>)
 80057c2:	0004      	movs	r4, r0
 80057c4:	0008      	movs	r0, r1
 80057c6:	0011      	movs	r1, r2
 80057c8:	602b      	str	r3, [r5, #0]
 80057ca:	f7fb fc67 	bl	800109c <_fstat>
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	d103      	bne.n	80057da <_fstat_r+0x1e>
 80057d2:	682b      	ldr	r3, [r5, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d000      	beq.n	80057da <_fstat_r+0x1e>
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	20000378 	.word	0x20000378

080057e0 <_isatty_r>:
 80057e0:	2300      	movs	r3, #0
 80057e2:	b570      	push	{r4, r5, r6, lr}
 80057e4:	4d06      	ldr	r5, [pc, #24]	@ (8005800 <_isatty_r+0x20>)
 80057e6:	0004      	movs	r4, r0
 80057e8:	0008      	movs	r0, r1
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	f7fb fc64 	bl	80010b8 <_isatty>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d103      	bne.n	80057fc <_isatty_r+0x1c>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d000      	beq.n	80057fc <_isatty_r+0x1c>
 80057fa:	6023      	str	r3, [r4, #0]
 80057fc:	bd70      	pop	{r4, r5, r6, pc}
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	20000378 	.word	0x20000378

08005804 <__errno>:
 8005804:	4b01      	ldr	r3, [pc, #4]	@ (800580c <__errno+0x8>)
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	4770      	bx	lr
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	20000018 	.word	0x20000018

08005810 <__libc_init_array>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	2600      	movs	r6, #0
 8005814:	4c0c      	ldr	r4, [pc, #48]	@ (8005848 <__libc_init_array+0x38>)
 8005816:	4d0d      	ldr	r5, [pc, #52]	@ (800584c <__libc_init_array+0x3c>)
 8005818:	1b64      	subs	r4, r4, r5
 800581a:	10a4      	asrs	r4, r4, #2
 800581c:	42a6      	cmp	r6, r4
 800581e:	d109      	bne.n	8005834 <__libc_init_array+0x24>
 8005820:	2600      	movs	r6, #0
 8005822:	f000 fe25 	bl	8006470 <_init>
 8005826:	4c0a      	ldr	r4, [pc, #40]	@ (8005850 <__libc_init_array+0x40>)
 8005828:	4d0a      	ldr	r5, [pc, #40]	@ (8005854 <__libc_init_array+0x44>)
 800582a:	1b64      	subs	r4, r4, r5
 800582c:	10a4      	asrs	r4, r4, #2
 800582e:	42a6      	cmp	r6, r4
 8005830:	d105      	bne.n	800583e <__libc_init_array+0x2e>
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	00b3      	lsls	r3, r6, #2
 8005836:	58eb      	ldr	r3, [r5, r3]
 8005838:	4798      	blx	r3
 800583a:	3601      	adds	r6, #1
 800583c:	e7ee      	b.n	800581c <__libc_init_array+0xc>
 800583e:	00b3      	lsls	r3, r6, #2
 8005840:	58eb      	ldr	r3, [r5, r3]
 8005842:	4798      	blx	r3
 8005844:	3601      	adds	r6, #1
 8005846:	e7f2      	b.n	800582e <__libc_init_array+0x1e>
 8005848:	0800664c 	.word	0x0800664c
 800584c:	0800664c 	.word	0x0800664c
 8005850:	08006650 	.word	0x08006650
 8005854:	0800664c 	.word	0x0800664c

08005858 <__retarget_lock_init_recursive>:
 8005858:	4770      	bx	lr

0800585a <__retarget_lock_acquire_recursive>:
 800585a:	4770      	bx	lr

0800585c <__retarget_lock_release_recursive>:
 800585c:	4770      	bx	lr
	...

08005860 <_free_r>:
 8005860:	b570      	push	{r4, r5, r6, lr}
 8005862:	0005      	movs	r5, r0
 8005864:	1e0c      	subs	r4, r1, #0
 8005866:	d010      	beq.n	800588a <_free_r+0x2a>
 8005868:	3c04      	subs	r4, #4
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	da00      	bge.n	8005872 <_free_r+0x12>
 8005870:	18e4      	adds	r4, r4, r3
 8005872:	0028      	movs	r0, r5
 8005874:	f000 fc5e 	bl	8006134 <__malloc_lock>
 8005878:	4a1d      	ldr	r2, [pc, #116]	@ (80058f0 <_free_r+0x90>)
 800587a:	6813      	ldr	r3, [r2, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d105      	bne.n	800588c <_free_r+0x2c>
 8005880:	6063      	str	r3, [r4, #4]
 8005882:	6014      	str	r4, [r2, #0]
 8005884:	0028      	movs	r0, r5
 8005886:	f000 fc5d 	bl	8006144 <__malloc_unlock>
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	42a3      	cmp	r3, r4
 800588e:	d908      	bls.n	80058a2 <_free_r+0x42>
 8005890:	6820      	ldr	r0, [r4, #0]
 8005892:	1821      	adds	r1, r4, r0
 8005894:	428b      	cmp	r3, r1
 8005896:	d1f3      	bne.n	8005880 <_free_r+0x20>
 8005898:	6819      	ldr	r1, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	1809      	adds	r1, r1, r0
 800589e:	6021      	str	r1, [r4, #0]
 80058a0:	e7ee      	b.n	8005880 <_free_r+0x20>
 80058a2:	001a      	movs	r2, r3
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <_free_r+0x4e>
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	d9f9      	bls.n	80058a2 <_free_r+0x42>
 80058ae:	6811      	ldr	r1, [r2, #0]
 80058b0:	1850      	adds	r0, r2, r1
 80058b2:	42a0      	cmp	r0, r4
 80058b4:	d10b      	bne.n	80058ce <_free_r+0x6e>
 80058b6:	6820      	ldr	r0, [r4, #0]
 80058b8:	1809      	adds	r1, r1, r0
 80058ba:	1850      	adds	r0, r2, r1
 80058bc:	6011      	str	r1, [r2, #0]
 80058be:	4283      	cmp	r3, r0
 80058c0:	d1e0      	bne.n	8005884 <_free_r+0x24>
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	1841      	adds	r1, r0, r1
 80058c8:	6011      	str	r1, [r2, #0]
 80058ca:	6053      	str	r3, [r2, #4]
 80058cc:	e7da      	b.n	8005884 <_free_r+0x24>
 80058ce:	42a0      	cmp	r0, r4
 80058d0:	d902      	bls.n	80058d8 <_free_r+0x78>
 80058d2:	230c      	movs	r3, #12
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	e7d5      	b.n	8005884 <_free_r+0x24>
 80058d8:	6820      	ldr	r0, [r4, #0]
 80058da:	1821      	adds	r1, r4, r0
 80058dc:	428b      	cmp	r3, r1
 80058de:	d103      	bne.n	80058e8 <_free_r+0x88>
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	1809      	adds	r1, r1, r0
 80058e6:	6021      	str	r1, [r4, #0]
 80058e8:	6063      	str	r3, [r4, #4]
 80058ea:	6054      	str	r4, [r2, #4]
 80058ec:	e7ca      	b.n	8005884 <_free_r+0x24>
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	20000374 	.word	0x20000374

080058f4 <__sfputc_r>:
 80058f4:	6893      	ldr	r3, [r2, #8]
 80058f6:	b510      	push	{r4, lr}
 80058f8:	3b01      	subs	r3, #1
 80058fa:	6093      	str	r3, [r2, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	da04      	bge.n	800590a <__sfputc_r+0x16>
 8005900:	6994      	ldr	r4, [r2, #24]
 8005902:	42a3      	cmp	r3, r4
 8005904:	db07      	blt.n	8005916 <__sfputc_r+0x22>
 8005906:	290a      	cmp	r1, #10
 8005908:	d005      	beq.n	8005916 <__sfputc_r+0x22>
 800590a:	6813      	ldr	r3, [r2, #0]
 800590c:	1c58      	adds	r0, r3, #1
 800590e:	6010      	str	r0, [r2, #0]
 8005910:	7019      	strb	r1, [r3, #0]
 8005912:	0008      	movs	r0, r1
 8005914:	bd10      	pop	{r4, pc}
 8005916:	f000 fc69 	bl	80061ec <__swbuf_r>
 800591a:	0001      	movs	r1, r0
 800591c:	e7f9      	b.n	8005912 <__sfputc_r+0x1e>

0800591e <__sfputs_r>:
 800591e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005920:	0006      	movs	r6, r0
 8005922:	000f      	movs	r7, r1
 8005924:	0014      	movs	r4, r2
 8005926:	18d5      	adds	r5, r2, r3
 8005928:	42ac      	cmp	r4, r5
 800592a:	d101      	bne.n	8005930 <__sfputs_r+0x12>
 800592c:	2000      	movs	r0, #0
 800592e:	e007      	b.n	8005940 <__sfputs_r+0x22>
 8005930:	7821      	ldrb	r1, [r4, #0]
 8005932:	003a      	movs	r2, r7
 8005934:	0030      	movs	r0, r6
 8005936:	f7ff ffdd 	bl	80058f4 <__sfputc_r>
 800593a:	3401      	adds	r4, #1
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d1f3      	bne.n	8005928 <__sfputs_r+0xa>
 8005940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005944 <_vfiprintf_r>:
 8005944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005946:	b0a1      	sub	sp, #132	@ 0x84
 8005948:	000f      	movs	r7, r1
 800594a:	0015      	movs	r5, r2
 800594c:	001e      	movs	r6, r3
 800594e:	9003      	str	r0, [sp, #12]
 8005950:	2800      	cmp	r0, #0
 8005952:	d004      	beq.n	800595e <_vfiprintf_r+0x1a>
 8005954:	6a03      	ldr	r3, [r0, #32]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <_vfiprintf_r+0x1a>
 800595a:	f7ff fe0d 	bl	8005578 <__sinit>
 800595e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005960:	07db      	lsls	r3, r3, #31
 8005962:	d405      	bmi.n	8005970 <_vfiprintf_r+0x2c>
 8005964:	89bb      	ldrh	r3, [r7, #12]
 8005966:	059b      	lsls	r3, r3, #22
 8005968:	d402      	bmi.n	8005970 <_vfiprintf_r+0x2c>
 800596a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800596c:	f7ff ff75 	bl	800585a <__retarget_lock_acquire_recursive>
 8005970:	89bb      	ldrh	r3, [r7, #12]
 8005972:	071b      	lsls	r3, r3, #28
 8005974:	d502      	bpl.n	800597c <_vfiprintf_r+0x38>
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d113      	bne.n	80059a4 <_vfiprintf_r+0x60>
 800597c:	0039      	movs	r1, r7
 800597e:	9803      	ldr	r0, [sp, #12]
 8005980:	f000 fc76 	bl	8006270 <__swsetup_r>
 8005984:	2800      	cmp	r0, #0
 8005986:	d00d      	beq.n	80059a4 <_vfiprintf_r+0x60>
 8005988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800598a:	07db      	lsls	r3, r3, #31
 800598c:	d503      	bpl.n	8005996 <_vfiprintf_r+0x52>
 800598e:	2001      	movs	r0, #1
 8005990:	4240      	negs	r0, r0
 8005992:	b021      	add	sp, #132	@ 0x84
 8005994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005996:	89bb      	ldrh	r3, [r7, #12]
 8005998:	059b      	lsls	r3, r3, #22
 800599a:	d4f8      	bmi.n	800598e <_vfiprintf_r+0x4a>
 800599c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800599e:	f7ff ff5d 	bl	800585c <__retarget_lock_release_recursive>
 80059a2:	e7f4      	b.n	800598e <_vfiprintf_r+0x4a>
 80059a4:	2300      	movs	r3, #0
 80059a6:	ac08      	add	r4, sp, #32
 80059a8:	6163      	str	r3, [r4, #20]
 80059aa:	3320      	adds	r3, #32
 80059ac:	7663      	strb	r3, [r4, #25]
 80059ae:	3310      	adds	r3, #16
 80059b0:	76a3      	strb	r3, [r4, #26]
 80059b2:	9607      	str	r6, [sp, #28]
 80059b4:	002e      	movs	r6, r5
 80059b6:	7833      	ldrb	r3, [r6, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <_vfiprintf_r+0x7c>
 80059bc:	2b25      	cmp	r3, #37	@ 0x25
 80059be:	d148      	bne.n	8005a52 <_vfiprintf_r+0x10e>
 80059c0:	1b73      	subs	r3, r6, r5
 80059c2:	9305      	str	r3, [sp, #20]
 80059c4:	42ae      	cmp	r6, r5
 80059c6:	d00b      	beq.n	80059e0 <_vfiprintf_r+0x9c>
 80059c8:	002a      	movs	r2, r5
 80059ca:	0039      	movs	r1, r7
 80059cc:	9803      	ldr	r0, [sp, #12]
 80059ce:	f7ff ffa6 	bl	800591e <__sfputs_r>
 80059d2:	3001      	adds	r0, #1
 80059d4:	d100      	bne.n	80059d8 <_vfiprintf_r+0x94>
 80059d6:	e0ae      	b.n	8005b36 <_vfiprintf_r+0x1f2>
 80059d8:	6963      	ldr	r3, [r4, #20]
 80059da:	9a05      	ldr	r2, [sp, #20]
 80059dc:	189b      	adds	r3, r3, r2
 80059de:	6163      	str	r3, [r4, #20]
 80059e0:	7833      	ldrb	r3, [r6, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d100      	bne.n	80059e8 <_vfiprintf_r+0xa4>
 80059e6:	e0a6      	b.n	8005b36 <_vfiprintf_r+0x1f2>
 80059e8:	2201      	movs	r2, #1
 80059ea:	2300      	movs	r3, #0
 80059ec:	4252      	negs	r2, r2
 80059ee:	6062      	str	r2, [r4, #4]
 80059f0:	a904      	add	r1, sp, #16
 80059f2:	3254      	adds	r2, #84	@ 0x54
 80059f4:	1852      	adds	r2, r2, r1
 80059f6:	1c75      	adds	r5, r6, #1
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	60e3      	str	r3, [r4, #12]
 80059fc:	60a3      	str	r3, [r4, #8]
 80059fe:	7013      	strb	r3, [r2, #0]
 8005a00:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005a02:	4b59      	ldr	r3, [pc, #356]	@ (8005b68 <_vfiprintf_r+0x224>)
 8005a04:	2205      	movs	r2, #5
 8005a06:	0018      	movs	r0, r3
 8005a08:	7829      	ldrb	r1, [r5, #0]
 8005a0a:	9305      	str	r3, [sp, #20]
 8005a0c:	f000 fd24 	bl	8006458 <memchr>
 8005a10:	1c6e      	adds	r6, r5, #1
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d11f      	bne.n	8005a56 <_vfiprintf_r+0x112>
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	06d3      	lsls	r3, r2, #27
 8005a1a:	d504      	bpl.n	8005a26 <_vfiprintf_r+0xe2>
 8005a1c:	2353      	movs	r3, #83	@ 0x53
 8005a1e:	a904      	add	r1, sp, #16
 8005a20:	185b      	adds	r3, r3, r1
 8005a22:	2120      	movs	r1, #32
 8005a24:	7019      	strb	r1, [r3, #0]
 8005a26:	0713      	lsls	r3, r2, #28
 8005a28:	d504      	bpl.n	8005a34 <_vfiprintf_r+0xf0>
 8005a2a:	2353      	movs	r3, #83	@ 0x53
 8005a2c:	a904      	add	r1, sp, #16
 8005a2e:	185b      	adds	r3, r3, r1
 8005a30:	212b      	movs	r1, #43	@ 0x2b
 8005a32:	7019      	strb	r1, [r3, #0]
 8005a34:	782b      	ldrb	r3, [r5, #0]
 8005a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a38:	d016      	beq.n	8005a68 <_vfiprintf_r+0x124>
 8005a3a:	002e      	movs	r6, r5
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	200a      	movs	r0, #10
 8005a40:	68e3      	ldr	r3, [r4, #12]
 8005a42:	7832      	ldrb	r2, [r6, #0]
 8005a44:	1c75      	adds	r5, r6, #1
 8005a46:	3a30      	subs	r2, #48	@ 0x30
 8005a48:	2a09      	cmp	r2, #9
 8005a4a:	d950      	bls.n	8005aee <_vfiprintf_r+0x1aa>
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d111      	bne.n	8005a74 <_vfiprintf_r+0x130>
 8005a50:	e017      	b.n	8005a82 <_vfiprintf_r+0x13e>
 8005a52:	3601      	adds	r6, #1
 8005a54:	e7af      	b.n	80059b6 <_vfiprintf_r+0x72>
 8005a56:	9b05      	ldr	r3, [sp, #20]
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	1ac0      	subs	r0, r0, r3
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	4083      	lsls	r3, r0
 8005a60:	4313      	orrs	r3, r2
 8005a62:	0035      	movs	r5, r6
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	e7cc      	b.n	8005a02 <_vfiprintf_r+0xbe>
 8005a68:	9b07      	ldr	r3, [sp, #28]
 8005a6a:	1d19      	adds	r1, r3, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	9107      	str	r1, [sp, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	db01      	blt.n	8005a78 <_vfiprintf_r+0x134>
 8005a74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a76:	e004      	b.n	8005a82 <_vfiprintf_r+0x13e>
 8005a78:	425b      	negs	r3, r3
 8005a7a:	60e3      	str	r3, [r4, #12]
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	7833      	ldrb	r3, [r6, #0]
 8005a84:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a86:	d10c      	bne.n	8005aa2 <_vfiprintf_r+0x15e>
 8005a88:	7873      	ldrb	r3, [r6, #1]
 8005a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a8c:	d134      	bne.n	8005af8 <_vfiprintf_r+0x1b4>
 8005a8e:	9b07      	ldr	r3, [sp, #28]
 8005a90:	3602      	adds	r6, #2
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	9207      	str	r2, [sp, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da01      	bge.n	8005aa0 <_vfiprintf_r+0x15c>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	425b      	negs	r3, r3
 8005aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa2:	4d32      	ldr	r5, [pc, #200]	@ (8005b6c <_vfiprintf_r+0x228>)
 8005aa4:	2203      	movs	r2, #3
 8005aa6:	0028      	movs	r0, r5
 8005aa8:	7831      	ldrb	r1, [r6, #0]
 8005aaa:	f000 fcd5 	bl	8006458 <memchr>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d006      	beq.n	8005ac0 <_vfiprintf_r+0x17c>
 8005ab2:	2340      	movs	r3, #64	@ 0x40
 8005ab4:	1b40      	subs	r0, r0, r5
 8005ab6:	4083      	lsls	r3, r0
 8005ab8:	6822      	ldr	r2, [r4, #0]
 8005aba:	3601      	adds	r6, #1
 8005abc:	4313      	orrs	r3, r2
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	7831      	ldrb	r1, [r6, #0]
 8005ac2:	2206      	movs	r2, #6
 8005ac4:	482a      	ldr	r0, [pc, #168]	@ (8005b70 <_vfiprintf_r+0x22c>)
 8005ac6:	1c75      	adds	r5, r6, #1
 8005ac8:	7621      	strb	r1, [r4, #24]
 8005aca:	f000 fcc5 	bl	8006458 <memchr>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d040      	beq.n	8005b54 <_vfiprintf_r+0x210>
 8005ad2:	4b28      	ldr	r3, [pc, #160]	@ (8005b74 <_vfiprintf_r+0x230>)
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d122      	bne.n	8005b1e <_vfiprintf_r+0x1da>
 8005ad8:	2207      	movs	r2, #7
 8005ada:	9b07      	ldr	r3, [sp, #28]
 8005adc:	3307      	adds	r3, #7
 8005ade:	4393      	bics	r3, r2
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	6963      	ldr	r3, [r4, #20]
 8005ae6:	9a04      	ldr	r2, [sp, #16]
 8005ae8:	189b      	adds	r3, r3, r2
 8005aea:	6163      	str	r3, [r4, #20]
 8005aec:	e762      	b.n	80059b4 <_vfiprintf_r+0x70>
 8005aee:	4343      	muls	r3, r0
 8005af0:	002e      	movs	r6, r5
 8005af2:	2101      	movs	r1, #1
 8005af4:	189b      	adds	r3, r3, r2
 8005af6:	e7a4      	b.n	8005a42 <_vfiprintf_r+0xfe>
 8005af8:	2300      	movs	r3, #0
 8005afa:	200a      	movs	r0, #10
 8005afc:	0019      	movs	r1, r3
 8005afe:	3601      	adds	r6, #1
 8005b00:	6063      	str	r3, [r4, #4]
 8005b02:	7832      	ldrb	r2, [r6, #0]
 8005b04:	1c75      	adds	r5, r6, #1
 8005b06:	3a30      	subs	r2, #48	@ 0x30
 8005b08:	2a09      	cmp	r2, #9
 8005b0a:	d903      	bls.n	8005b14 <_vfiprintf_r+0x1d0>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0c8      	beq.n	8005aa2 <_vfiprintf_r+0x15e>
 8005b10:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b12:	e7c6      	b.n	8005aa2 <_vfiprintf_r+0x15e>
 8005b14:	4341      	muls	r1, r0
 8005b16:	002e      	movs	r6, r5
 8005b18:	2301      	movs	r3, #1
 8005b1a:	1889      	adds	r1, r1, r2
 8005b1c:	e7f1      	b.n	8005b02 <_vfiprintf_r+0x1be>
 8005b1e:	aa07      	add	r2, sp, #28
 8005b20:	9200      	str	r2, [sp, #0]
 8005b22:	0021      	movs	r1, r4
 8005b24:	003a      	movs	r2, r7
 8005b26:	4b14      	ldr	r3, [pc, #80]	@ (8005b78 <_vfiprintf_r+0x234>)
 8005b28:	9803      	ldr	r0, [sp, #12]
 8005b2a:	e000      	b.n	8005b2e <_vfiprintf_r+0x1ea>
 8005b2c:	bf00      	nop
 8005b2e:	9004      	str	r0, [sp, #16]
 8005b30:	9b04      	ldr	r3, [sp, #16]
 8005b32:	3301      	adds	r3, #1
 8005b34:	d1d6      	bne.n	8005ae4 <_vfiprintf_r+0x1a0>
 8005b36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b38:	07db      	lsls	r3, r3, #31
 8005b3a:	d405      	bmi.n	8005b48 <_vfiprintf_r+0x204>
 8005b3c:	89bb      	ldrh	r3, [r7, #12]
 8005b3e:	059b      	lsls	r3, r3, #22
 8005b40:	d402      	bmi.n	8005b48 <_vfiprintf_r+0x204>
 8005b42:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005b44:	f7ff fe8a 	bl	800585c <__retarget_lock_release_recursive>
 8005b48:	89bb      	ldrh	r3, [r7, #12]
 8005b4a:	065b      	lsls	r3, r3, #25
 8005b4c:	d500      	bpl.n	8005b50 <_vfiprintf_r+0x20c>
 8005b4e:	e71e      	b.n	800598e <_vfiprintf_r+0x4a>
 8005b50:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005b52:	e71e      	b.n	8005992 <_vfiprintf_r+0x4e>
 8005b54:	aa07      	add	r2, sp, #28
 8005b56:	9200      	str	r2, [sp, #0]
 8005b58:	0021      	movs	r1, r4
 8005b5a:	003a      	movs	r2, r7
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <_vfiprintf_r+0x234>)
 8005b5e:	9803      	ldr	r0, [sp, #12]
 8005b60:	f000 f928 	bl	8005db4 <_printf_i>
 8005b64:	e7e3      	b.n	8005b2e <_vfiprintf_r+0x1ea>
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	08006618 	.word	0x08006618
 8005b6c:	0800661e 	.word	0x0800661e
 8005b70:	08006622 	.word	0x08006622
 8005b74:	00000000 	.word	0x00000000
 8005b78:	0800591f 	.word	0x0800591f

08005b7c <malloc>:
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	4b03      	ldr	r3, [pc, #12]	@ (8005b8c <malloc+0x10>)
 8005b80:	0001      	movs	r1, r0
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	f000 f826 	bl	8005bd4 <_malloc_r>
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	20000018 	.word	0x20000018

08005b90 <sbrk_aligned>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	4e0f      	ldr	r6, [pc, #60]	@ (8005bd0 <sbrk_aligned+0x40>)
 8005b94:	000d      	movs	r5, r1
 8005b96:	6831      	ldr	r1, [r6, #0]
 8005b98:	0004      	movs	r4, r0
 8005b9a:	2900      	cmp	r1, #0
 8005b9c:	d102      	bne.n	8005ba4 <sbrk_aligned+0x14>
 8005b9e:	f000 fc35 	bl	800640c <_sbrk_r>
 8005ba2:	6030      	str	r0, [r6, #0]
 8005ba4:	0029      	movs	r1, r5
 8005ba6:	0020      	movs	r0, r4
 8005ba8:	f000 fc30 	bl	800640c <_sbrk_r>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d103      	bne.n	8005bb8 <sbrk_aligned+0x28>
 8005bb0:	2501      	movs	r5, #1
 8005bb2:	426d      	negs	r5, r5
 8005bb4:	0028      	movs	r0, r5
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	2303      	movs	r3, #3
 8005bba:	1cc5      	adds	r5, r0, #3
 8005bbc:	439d      	bics	r5, r3
 8005bbe:	42a8      	cmp	r0, r5
 8005bc0:	d0f8      	beq.n	8005bb4 <sbrk_aligned+0x24>
 8005bc2:	1a29      	subs	r1, r5, r0
 8005bc4:	0020      	movs	r0, r4
 8005bc6:	f000 fc21 	bl	800640c <_sbrk_r>
 8005bca:	3001      	adds	r0, #1
 8005bcc:	d1f2      	bne.n	8005bb4 <sbrk_aligned+0x24>
 8005bce:	e7ef      	b.n	8005bb0 <sbrk_aligned+0x20>
 8005bd0:	20000370 	.word	0x20000370

08005bd4 <_malloc_r>:
 8005bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	1ccb      	adds	r3, r1, #3
 8005bda:	4393      	bics	r3, r2
 8005bdc:	3308      	adds	r3, #8
 8005bde:	0005      	movs	r5, r0
 8005be0:	001f      	movs	r7, r3
 8005be2:	2b0c      	cmp	r3, #12
 8005be4:	d234      	bcs.n	8005c50 <_malloc_r+0x7c>
 8005be6:	270c      	movs	r7, #12
 8005be8:	42b9      	cmp	r1, r7
 8005bea:	d833      	bhi.n	8005c54 <_malloc_r+0x80>
 8005bec:	0028      	movs	r0, r5
 8005bee:	f000 faa1 	bl	8006134 <__malloc_lock>
 8005bf2:	4e37      	ldr	r6, [pc, #220]	@ (8005cd0 <_malloc_r+0xfc>)
 8005bf4:	6833      	ldr	r3, [r6, #0]
 8005bf6:	001c      	movs	r4, r3
 8005bf8:	2c00      	cmp	r4, #0
 8005bfa:	d12f      	bne.n	8005c5c <_malloc_r+0x88>
 8005bfc:	0039      	movs	r1, r7
 8005bfe:	0028      	movs	r0, r5
 8005c00:	f7ff ffc6 	bl	8005b90 <sbrk_aligned>
 8005c04:	0004      	movs	r4, r0
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	d15f      	bne.n	8005cca <_malloc_r+0xf6>
 8005c0a:	6834      	ldr	r4, [r6, #0]
 8005c0c:	9400      	str	r4, [sp, #0]
 8005c0e:	9b00      	ldr	r3, [sp, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d14a      	bne.n	8005caa <_malloc_r+0xd6>
 8005c14:	2c00      	cmp	r4, #0
 8005c16:	d052      	beq.n	8005cbe <_malloc_r+0xea>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	0028      	movs	r0, r5
 8005c1c:	18e3      	adds	r3, r4, r3
 8005c1e:	9900      	ldr	r1, [sp, #0]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	f000 fbf3 	bl	800640c <_sbrk_r>
 8005c26:	9b01      	ldr	r3, [sp, #4]
 8005c28:	4283      	cmp	r3, r0
 8005c2a:	d148      	bne.n	8005cbe <_malloc_r+0xea>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	0028      	movs	r0, r5
 8005c30:	1aff      	subs	r7, r7, r3
 8005c32:	0039      	movs	r1, r7
 8005c34:	f7ff ffac 	bl	8005b90 <sbrk_aligned>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d040      	beq.n	8005cbe <_malloc_r+0xea>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	19db      	adds	r3, r3, r7
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	6833      	ldr	r3, [r6, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	d133      	bne.n	8005cb2 <_malloc_r+0xde>
 8005c4a:	9b00      	ldr	r3, [sp, #0]
 8005c4c:	6033      	str	r3, [r6, #0]
 8005c4e:	e019      	b.n	8005c84 <_malloc_r+0xb0>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	dac9      	bge.n	8005be8 <_malloc_r+0x14>
 8005c54:	230c      	movs	r3, #12
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	2000      	movs	r0, #0
 8005c5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c5c:	6821      	ldr	r1, [r4, #0]
 8005c5e:	1bc9      	subs	r1, r1, r7
 8005c60:	d420      	bmi.n	8005ca4 <_malloc_r+0xd0>
 8005c62:	290b      	cmp	r1, #11
 8005c64:	d90a      	bls.n	8005c7c <_malloc_r+0xa8>
 8005c66:	19e2      	adds	r2, r4, r7
 8005c68:	6027      	str	r7, [r4, #0]
 8005c6a:	42a3      	cmp	r3, r4
 8005c6c:	d104      	bne.n	8005c78 <_malloc_r+0xa4>
 8005c6e:	6032      	str	r2, [r6, #0]
 8005c70:	6863      	ldr	r3, [r4, #4]
 8005c72:	6011      	str	r1, [r2, #0]
 8005c74:	6053      	str	r3, [r2, #4]
 8005c76:	e005      	b.n	8005c84 <_malloc_r+0xb0>
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	e7f9      	b.n	8005c70 <_malloc_r+0x9c>
 8005c7c:	6862      	ldr	r2, [r4, #4]
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	d10e      	bne.n	8005ca0 <_malloc_r+0xcc>
 8005c82:	6032      	str	r2, [r6, #0]
 8005c84:	0028      	movs	r0, r5
 8005c86:	f000 fa5d 	bl	8006144 <__malloc_unlock>
 8005c8a:	0020      	movs	r0, r4
 8005c8c:	2207      	movs	r2, #7
 8005c8e:	300b      	adds	r0, #11
 8005c90:	1d23      	adds	r3, r4, #4
 8005c92:	4390      	bics	r0, r2
 8005c94:	1ac2      	subs	r2, r0, r3
 8005c96:	4298      	cmp	r0, r3
 8005c98:	d0df      	beq.n	8005c5a <_malloc_r+0x86>
 8005c9a:	1a1b      	subs	r3, r3, r0
 8005c9c:	50a3      	str	r3, [r4, r2]
 8005c9e:	e7dc      	b.n	8005c5a <_malloc_r+0x86>
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	e7ef      	b.n	8005c84 <_malloc_r+0xb0>
 8005ca4:	0023      	movs	r3, r4
 8005ca6:	6864      	ldr	r4, [r4, #4]
 8005ca8:	e7a6      	b.n	8005bf8 <_malloc_r+0x24>
 8005caa:	9c00      	ldr	r4, [sp, #0]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	e7ad      	b.n	8005c0e <_malloc_r+0x3a>
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	42a3      	cmp	r3, r4
 8005cb8:	d1fb      	bne.n	8005cb2 <_malloc_r+0xde>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e7da      	b.n	8005c74 <_malloc_r+0xa0>
 8005cbe:	230c      	movs	r3, #12
 8005cc0:	0028      	movs	r0, r5
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	f000 fa3e 	bl	8006144 <__malloc_unlock>
 8005cc8:	e7c6      	b.n	8005c58 <_malloc_r+0x84>
 8005cca:	6007      	str	r7, [r0, #0]
 8005ccc:	e7da      	b.n	8005c84 <_malloc_r+0xb0>
 8005cce:	46c0      	nop			@ (mov r8, r8)
 8005cd0:	20000374 	.word	0x20000374

08005cd4 <_printf_common>:
 8005cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cd6:	0016      	movs	r6, r2
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	688a      	ldr	r2, [r1, #8]
 8005cdc:	690b      	ldr	r3, [r1, #16]
 8005cde:	000c      	movs	r4, r1
 8005ce0:	9000      	str	r0, [sp, #0]
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	da00      	bge.n	8005ce8 <_printf_common+0x14>
 8005ce6:	0013      	movs	r3, r2
 8005ce8:	0022      	movs	r2, r4
 8005cea:	6033      	str	r3, [r6, #0]
 8005cec:	3243      	adds	r2, #67	@ 0x43
 8005cee:	7812      	ldrb	r2, [r2, #0]
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	d001      	beq.n	8005cf8 <_printf_common+0x24>
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	6033      	str	r3, [r6, #0]
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	069b      	lsls	r3, r3, #26
 8005cfc:	d502      	bpl.n	8005d04 <_printf_common+0x30>
 8005cfe:	6833      	ldr	r3, [r6, #0]
 8005d00:	3302      	adds	r3, #2
 8005d02:	6033      	str	r3, [r6, #0]
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	2306      	movs	r3, #6
 8005d08:	0015      	movs	r5, r2
 8005d0a:	401d      	ands	r5, r3
 8005d0c:	421a      	tst	r2, r3
 8005d0e:	d027      	beq.n	8005d60 <_printf_common+0x8c>
 8005d10:	0023      	movs	r3, r4
 8005d12:	3343      	adds	r3, #67	@ 0x43
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	1e5a      	subs	r2, r3, #1
 8005d18:	4193      	sbcs	r3, r2
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	0692      	lsls	r2, r2, #26
 8005d1e:	d430      	bmi.n	8005d82 <_printf_common+0xae>
 8005d20:	0022      	movs	r2, r4
 8005d22:	9901      	ldr	r1, [sp, #4]
 8005d24:	9800      	ldr	r0, [sp, #0]
 8005d26:	9d08      	ldr	r5, [sp, #32]
 8005d28:	3243      	adds	r2, #67	@ 0x43
 8005d2a:	47a8      	blx	r5
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d025      	beq.n	8005d7c <_printf_common+0xa8>
 8005d30:	2206      	movs	r2, #6
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	2500      	movs	r5, #0
 8005d36:	4013      	ands	r3, r2
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d105      	bne.n	8005d48 <_printf_common+0x74>
 8005d3c:	6833      	ldr	r3, [r6, #0]
 8005d3e:	68e5      	ldr	r5, [r4, #12]
 8005d40:	1aed      	subs	r5, r5, r3
 8005d42:	43eb      	mvns	r3, r5
 8005d44:	17db      	asrs	r3, r3, #31
 8005d46:	401d      	ands	r5, r3
 8005d48:	68a3      	ldr	r3, [r4, #8]
 8005d4a:	6922      	ldr	r2, [r4, #16]
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	dd01      	ble.n	8005d54 <_printf_common+0x80>
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	18ed      	adds	r5, r5, r3
 8005d54:	2600      	movs	r6, #0
 8005d56:	42b5      	cmp	r5, r6
 8005d58:	d120      	bne.n	8005d9c <_printf_common+0xc8>
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e010      	b.n	8005d80 <_printf_common+0xac>
 8005d5e:	3501      	adds	r5, #1
 8005d60:	68e3      	ldr	r3, [r4, #12]
 8005d62:	6832      	ldr	r2, [r6, #0]
 8005d64:	1a9b      	subs	r3, r3, r2
 8005d66:	42ab      	cmp	r3, r5
 8005d68:	ddd2      	ble.n	8005d10 <_printf_common+0x3c>
 8005d6a:	0022      	movs	r2, r4
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	9901      	ldr	r1, [sp, #4]
 8005d70:	9800      	ldr	r0, [sp, #0]
 8005d72:	9f08      	ldr	r7, [sp, #32]
 8005d74:	3219      	adds	r2, #25
 8005d76:	47b8      	blx	r7
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d1f0      	bne.n	8005d5e <_printf_common+0x8a>
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	4240      	negs	r0, r0
 8005d80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d82:	2030      	movs	r0, #48	@ 0x30
 8005d84:	18e1      	adds	r1, r4, r3
 8005d86:	3143      	adds	r1, #67	@ 0x43
 8005d88:	7008      	strb	r0, [r1, #0]
 8005d8a:	0021      	movs	r1, r4
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	3145      	adds	r1, #69	@ 0x45
 8005d90:	7809      	ldrb	r1, [r1, #0]
 8005d92:	18a2      	adds	r2, r4, r2
 8005d94:	3243      	adds	r2, #67	@ 0x43
 8005d96:	3302      	adds	r3, #2
 8005d98:	7011      	strb	r1, [r2, #0]
 8005d9a:	e7c1      	b.n	8005d20 <_printf_common+0x4c>
 8005d9c:	0022      	movs	r2, r4
 8005d9e:	2301      	movs	r3, #1
 8005da0:	9901      	ldr	r1, [sp, #4]
 8005da2:	9800      	ldr	r0, [sp, #0]
 8005da4:	9f08      	ldr	r7, [sp, #32]
 8005da6:	321a      	adds	r2, #26
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	d0e6      	beq.n	8005d7c <_printf_common+0xa8>
 8005dae:	3601      	adds	r6, #1
 8005db0:	e7d1      	b.n	8005d56 <_printf_common+0x82>
	...

08005db4 <_printf_i>:
 8005db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db6:	b08b      	sub	sp, #44	@ 0x2c
 8005db8:	9206      	str	r2, [sp, #24]
 8005dba:	000a      	movs	r2, r1
 8005dbc:	3243      	adds	r2, #67	@ 0x43
 8005dbe:	9307      	str	r3, [sp, #28]
 8005dc0:	9005      	str	r0, [sp, #20]
 8005dc2:	9203      	str	r2, [sp, #12]
 8005dc4:	7e0a      	ldrb	r2, [r1, #24]
 8005dc6:	000c      	movs	r4, r1
 8005dc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005dca:	2a78      	cmp	r2, #120	@ 0x78
 8005dcc:	d809      	bhi.n	8005de2 <_printf_i+0x2e>
 8005dce:	2a62      	cmp	r2, #98	@ 0x62
 8005dd0:	d80b      	bhi.n	8005dea <_printf_i+0x36>
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	d100      	bne.n	8005dd8 <_printf_i+0x24>
 8005dd6:	e0bc      	b.n	8005f52 <_printf_i+0x19e>
 8005dd8:	497b      	ldr	r1, [pc, #492]	@ (8005fc8 <_printf_i+0x214>)
 8005dda:	9104      	str	r1, [sp, #16]
 8005ddc:	2a58      	cmp	r2, #88	@ 0x58
 8005dde:	d100      	bne.n	8005de2 <_printf_i+0x2e>
 8005de0:	e090      	b.n	8005f04 <_printf_i+0x150>
 8005de2:	0025      	movs	r5, r4
 8005de4:	3542      	adds	r5, #66	@ 0x42
 8005de6:	702a      	strb	r2, [r5, #0]
 8005de8:	e022      	b.n	8005e30 <_printf_i+0x7c>
 8005dea:	0010      	movs	r0, r2
 8005dec:	3863      	subs	r0, #99	@ 0x63
 8005dee:	2815      	cmp	r0, #21
 8005df0:	d8f7      	bhi.n	8005de2 <_printf_i+0x2e>
 8005df2:	f7fa f989 	bl	8000108 <__gnu_thumb1_case_shi>
 8005df6:	0016      	.short	0x0016
 8005df8:	fff6001f 	.word	0xfff6001f
 8005dfc:	fff6fff6 	.word	0xfff6fff6
 8005e00:	001ffff6 	.word	0x001ffff6
 8005e04:	fff6fff6 	.word	0xfff6fff6
 8005e08:	fff6fff6 	.word	0xfff6fff6
 8005e0c:	003600a1 	.word	0x003600a1
 8005e10:	fff60080 	.word	0xfff60080
 8005e14:	00b2fff6 	.word	0x00b2fff6
 8005e18:	0036fff6 	.word	0x0036fff6
 8005e1c:	fff6fff6 	.word	0xfff6fff6
 8005e20:	0084      	.short	0x0084
 8005e22:	0025      	movs	r5, r4
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	3542      	adds	r5, #66	@ 0x42
 8005e28:	1d11      	adds	r1, r2, #4
 8005e2a:	6019      	str	r1, [r3, #0]
 8005e2c:	6813      	ldr	r3, [r2, #0]
 8005e2e:	702b      	strb	r3, [r5, #0]
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0a0      	b.n	8005f76 <_printf_i+0x1c2>
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	6809      	ldr	r1, [r1, #0]
 8005e38:	1d02      	adds	r2, r0, #4
 8005e3a:	060d      	lsls	r5, r1, #24
 8005e3c:	d50b      	bpl.n	8005e56 <_printf_i+0xa2>
 8005e3e:	6806      	ldr	r6, [r0, #0]
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	2e00      	cmp	r6, #0
 8005e44:	da03      	bge.n	8005e4e <_printf_i+0x9a>
 8005e46:	232d      	movs	r3, #45	@ 0x2d
 8005e48:	9a03      	ldr	r2, [sp, #12]
 8005e4a:	4276      	negs	r6, r6
 8005e4c:	7013      	strb	r3, [r2, #0]
 8005e4e:	4b5e      	ldr	r3, [pc, #376]	@ (8005fc8 <_printf_i+0x214>)
 8005e50:	270a      	movs	r7, #10
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	e018      	b.n	8005e88 <_printf_i+0xd4>
 8005e56:	6806      	ldr	r6, [r0, #0]
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	0649      	lsls	r1, r1, #25
 8005e5c:	d5f1      	bpl.n	8005e42 <_printf_i+0x8e>
 8005e5e:	b236      	sxth	r6, r6
 8005e60:	e7ef      	b.n	8005e42 <_printf_i+0x8e>
 8005e62:	6808      	ldr	r0, [r1, #0]
 8005e64:	6819      	ldr	r1, [r3, #0]
 8005e66:	c940      	ldmia	r1!, {r6}
 8005e68:	0605      	lsls	r5, r0, #24
 8005e6a:	d402      	bmi.n	8005e72 <_printf_i+0xbe>
 8005e6c:	0640      	lsls	r0, r0, #25
 8005e6e:	d500      	bpl.n	8005e72 <_printf_i+0xbe>
 8005e70:	b2b6      	uxth	r6, r6
 8005e72:	6019      	str	r1, [r3, #0]
 8005e74:	4b54      	ldr	r3, [pc, #336]	@ (8005fc8 <_printf_i+0x214>)
 8005e76:	270a      	movs	r7, #10
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	2a6f      	cmp	r2, #111	@ 0x6f
 8005e7c:	d100      	bne.n	8005e80 <_printf_i+0xcc>
 8005e7e:	3f02      	subs	r7, #2
 8005e80:	0023      	movs	r3, r4
 8005e82:	2200      	movs	r2, #0
 8005e84:	3343      	adds	r3, #67	@ 0x43
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	60a3      	str	r3, [r4, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	db03      	blt.n	8005e98 <_printf_i+0xe4>
 8005e90:	2104      	movs	r1, #4
 8005e92:	6822      	ldr	r2, [r4, #0]
 8005e94:	438a      	bics	r2, r1
 8005e96:	6022      	str	r2, [r4, #0]
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	d102      	bne.n	8005ea2 <_printf_i+0xee>
 8005e9c:	9d03      	ldr	r5, [sp, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00c      	beq.n	8005ebc <_printf_i+0x108>
 8005ea2:	9d03      	ldr	r5, [sp, #12]
 8005ea4:	0030      	movs	r0, r6
 8005ea6:	0039      	movs	r1, r7
 8005ea8:	f7fa f9be 	bl	8000228 <__aeabi_uidivmod>
 8005eac:	9b04      	ldr	r3, [sp, #16]
 8005eae:	3d01      	subs	r5, #1
 8005eb0:	5c5b      	ldrb	r3, [r3, r1]
 8005eb2:	702b      	strb	r3, [r5, #0]
 8005eb4:	0033      	movs	r3, r6
 8005eb6:	0006      	movs	r6, r0
 8005eb8:	429f      	cmp	r7, r3
 8005eba:	d9f3      	bls.n	8005ea4 <_printf_i+0xf0>
 8005ebc:	2f08      	cmp	r7, #8
 8005ebe:	d109      	bne.n	8005ed4 <_printf_i+0x120>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	07db      	lsls	r3, r3, #31
 8005ec4:	d506      	bpl.n	8005ed4 <_printf_i+0x120>
 8005ec6:	6862      	ldr	r2, [r4, #4]
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	dc02      	bgt.n	8005ed4 <_printf_i+0x120>
 8005ece:	2330      	movs	r3, #48	@ 0x30
 8005ed0:	3d01      	subs	r5, #1
 8005ed2:	702b      	strb	r3, [r5, #0]
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	1b5b      	subs	r3, r3, r5
 8005ed8:	6123      	str	r3, [r4, #16]
 8005eda:	9b07      	ldr	r3, [sp, #28]
 8005edc:	0021      	movs	r1, r4
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	9805      	ldr	r0, [sp, #20]
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	aa09      	add	r2, sp, #36	@ 0x24
 8005ee6:	f7ff fef5 	bl	8005cd4 <_printf_common>
 8005eea:	3001      	adds	r0, #1
 8005eec:	d148      	bne.n	8005f80 <_printf_i+0x1cc>
 8005eee:	2001      	movs	r0, #1
 8005ef0:	4240      	negs	r0, r0
 8005ef2:	b00b      	add	sp, #44	@ 0x2c
 8005ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	6809      	ldr	r1, [r1, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	6022      	str	r2, [r4, #0]
 8005efe:	2278      	movs	r2, #120	@ 0x78
 8005f00:	4932      	ldr	r1, [pc, #200]	@ (8005fcc <_printf_i+0x218>)
 8005f02:	9104      	str	r1, [sp, #16]
 8005f04:	0021      	movs	r1, r4
 8005f06:	3145      	adds	r1, #69	@ 0x45
 8005f08:	700a      	strb	r2, [r1, #0]
 8005f0a:	6819      	ldr	r1, [r3, #0]
 8005f0c:	6822      	ldr	r2, [r4, #0]
 8005f0e:	c940      	ldmia	r1!, {r6}
 8005f10:	0610      	lsls	r0, r2, #24
 8005f12:	d402      	bmi.n	8005f1a <_printf_i+0x166>
 8005f14:	0650      	lsls	r0, r2, #25
 8005f16:	d500      	bpl.n	8005f1a <_printf_i+0x166>
 8005f18:	b2b6      	uxth	r6, r6
 8005f1a:	6019      	str	r1, [r3, #0]
 8005f1c:	07d3      	lsls	r3, r2, #31
 8005f1e:	d502      	bpl.n	8005f26 <_printf_i+0x172>
 8005f20:	2320      	movs	r3, #32
 8005f22:	4313      	orrs	r3, r2
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	d001      	beq.n	8005f2e <_printf_i+0x17a>
 8005f2a:	2710      	movs	r7, #16
 8005f2c:	e7a8      	b.n	8005e80 <_printf_i+0xcc>
 8005f2e:	2220      	movs	r2, #32
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	4393      	bics	r3, r2
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	e7f8      	b.n	8005f2a <_printf_i+0x176>
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	680d      	ldr	r5, [r1, #0]
 8005f3c:	1d10      	adds	r0, r2, #4
 8005f3e:	6949      	ldr	r1, [r1, #20]
 8005f40:	6018      	str	r0, [r3, #0]
 8005f42:	6813      	ldr	r3, [r2, #0]
 8005f44:	062e      	lsls	r6, r5, #24
 8005f46:	d501      	bpl.n	8005f4c <_printf_i+0x198>
 8005f48:	6019      	str	r1, [r3, #0]
 8005f4a:	e002      	b.n	8005f52 <_printf_i+0x19e>
 8005f4c:	066d      	lsls	r5, r5, #25
 8005f4e:	d5fb      	bpl.n	8005f48 <_printf_i+0x194>
 8005f50:	8019      	strh	r1, [r3, #0]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9d03      	ldr	r5, [sp, #12]
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	e7bf      	b.n	8005eda <_printf_i+0x126>
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	1d11      	adds	r1, r2, #4
 8005f5e:	6019      	str	r1, [r3, #0]
 8005f60:	6815      	ldr	r5, [r2, #0]
 8005f62:	2100      	movs	r1, #0
 8005f64:	0028      	movs	r0, r5
 8005f66:	6862      	ldr	r2, [r4, #4]
 8005f68:	f000 fa76 	bl	8006458 <memchr>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d001      	beq.n	8005f74 <_printf_i+0x1c0>
 8005f70:	1b40      	subs	r0, r0, r5
 8005f72:	6060      	str	r0, [r4, #4]
 8005f74:	6863      	ldr	r3, [r4, #4]
 8005f76:	6123      	str	r3, [r4, #16]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9a03      	ldr	r2, [sp, #12]
 8005f7c:	7013      	strb	r3, [r2, #0]
 8005f7e:	e7ac      	b.n	8005eda <_printf_i+0x126>
 8005f80:	002a      	movs	r2, r5
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	9906      	ldr	r1, [sp, #24]
 8005f86:	9805      	ldr	r0, [sp, #20]
 8005f88:	9d07      	ldr	r5, [sp, #28]
 8005f8a:	47a8      	blx	r5
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d0ae      	beq.n	8005eee <_printf_i+0x13a>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	079b      	lsls	r3, r3, #30
 8005f94:	d415      	bmi.n	8005fc2 <_printf_i+0x20e>
 8005f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f98:	68e0      	ldr	r0, [r4, #12]
 8005f9a:	4298      	cmp	r0, r3
 8005f9c:	daa9      	bge.n	8005ef2 <_printf_i+0x13e>
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	e7a7      	b.n	8005ef2 <_printf_i+0x13e>
 8005fa2:	0022      	movs	r2, r4
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	9906      	ldr	r1, [sp, #24]
 8005fa8:	9805      	ldr	r0, [sp, #20]
 8005faa:	9e07      	ldr	r6, [sp, #28]
 8005fac:	3219      	adds	r2, #25
 8005fae:	47b0      	blx	r6
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d09c      	beq.n	8005eee <_printf_i+0x13a>
 8005fb4:	3501      	adds	r5, #1
 8005fb6:	68e3      	ldr	r3, [r4, #12]
 8005fb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	42ab      	cmp	r3, r5
 8005fbe:	dcf0      	bgt.n	8005fa2 <_printf_i+0x1ee>
 8005fc0:	e7e9      	b.n	8005f96 <_printf_i+0x1e2>
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	e7f7      	b.n	8005fb6 <_printf_i+0x202>
 8005fc6:	46c0      	nop			@ (mov r8, r8)
 8005fc8:	08006629 	.word	0x08006629
 8005fcc:	0800663a 	.word	0x0800663a

08005fd0 <__sflush_r>:
 8005fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fd2:	220c      	movs	r2, #12
 8005fd4:	5e8b      	ldrsh	r3, [r1, r2]
 8005fd6:	0005      	movs	r5, r0
 8005fd8:	000c      	movs	r4, r1
 8005fda:	071a      	lsls	r2, r3, #28
 8005fdc:	d456      	bmi.n	800608c <__sflush_r+0xbc>
 8005fde:	684a      	ldr	r2, [r1, #4]
 8005fe0:	2a00      	cmp	r2, #0
 8005fe2:	dc02      	bgt.n	8005fea <__sflush_r+0x1a>
 8005fe4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005fe6:	2a00      	cmp	r2, #0
 8005fe8:	dd4e      	ble.n	8006088 <__sflush_r+0xb8>
 8005fea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005fec:	2f00      	cmp	r7, #0
 8005fee:	d04b      	beq.n	8006088 <__sflush_r+0xb8>
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2080      	movs	r0, #128	@ 0x80
 8005ff4:	682e      	ldr	r6, [r5, #0]
 8005ff6:	602a      	str	r2, [r5, #0]
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	0140      	lsls	r0, r0, #5
 8005ffc:	6a21      	ldr	r1, [r4, #32]
 8005ffe:	4002      	ands	r2, r0
 8006000:	4203      	tst	r3, r0
 8006002:	d033      	beq.n	800606c <__sflush_r+0x9c>
 8006004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	075b      	lsls	r3, r3, #29
 800600a:	d506      	bpl.n	800601a <__sflush_r+0x4a>
 800600c:	6863      	ldr	r3, [r4, #4]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <__sflush_r+0x4a>
 8006016:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006018:	1ad2      	subs	r2, r2, r3
 800601a:	2300      	movs	r3, #0
 800601c:	0028      	movs	r0, r5
 800601e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006020:	6a21      	ldr	r1, [r4, #32]
 8006022:	47b8      	blx	r7
 8006024:	89a2      	ldrh	r2, [r4, #12]
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	d106      	bne.n	8006038 <__sflush_r+0x68>
 800602a:	6829      	ldr	r1, [r5, #0]
 800602c:	291d      	cmp	r1, #29
 800602e:	d846      	bhi.n	80060be <__sflush_r+0xee>
 8006030:	4b29      	ldr	r3, [pc, #164]	@ (80060d8 <__sflush_r+0x108>)
 8006032:	410b      	asrs	r3, r1
 8006034:	07db      	lsls	r3, r3, #31
 8006036:	d442      	bmi.n	80060be <__sflush_r+0xee>
 8006038:	2300      	movs	r3, #0
 800603a:	6063      	str	r3, [r4, #4]
 800603c:	6923      	ldr	r3, [r4, #16]
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	04d2      	lsls	r2, r2, #19
 8006042:	d505      	bpl.n	8006050 <__sflush_r+0x80>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d102      	bne.n	800604e <__sflush_r+0x7e>
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d100      	bne.n	8006050 <__sflush_r+0x80>
 800604e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006052:	602e      	str	r6, [r5, #0]
 8006054:	2900      	cmp	r1, #0
 8006056:	d017      	beq.n	8006088 <__sflush_r+0xb8>
 8006058:	0023      	movs	r3, r4
 800605a:	3344      	adds	r3, #68	@ 0x44
 800605c:	4299      	cmp	r1, r3
 800605e:	d002      	beq.n	8006066 <__sflush_r+0x96>
 8006060:	0028      	movs	r0, r5
 8006062:	f7ff fbfd 	bl	8005860 <_free_r>
 8006066:	2300      	movs	r3, #0
 8006068:	6363      	str	r3, [r4, #52]	@ 0x34
 800606a:	e00d      	b.n	8006088 <__sflush_r+0xb8>
 800606c:	2301      	movs	r3, #1
 800606e:	0028      	movs	r0, r5
 8006070:	47b8      	blx	r7
 8006072:	0002      	movs	r2, r0
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d1c6      	bne.n	8006006 <__sflush_r+0x36>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0c3      	beq.n	8006006 <__sflush_r+0x36>
 800607e:	2b1d      	cmp	r3, #29
 8006080:	d001      	beq.n	8006086 <__sflush_r+0xb6>
 8006082:	2b16      	cmp	r3, #22
 8006084:	d11a      	bne.n	80060bc <__sflush_r+0xec>
 8006086:	602e      	str	r6, [r5, #0]
 8006088:	2000      	movs	r0, #0
 800608a:	e01e      	b.n	80060ca <__sflush_r+0xfa>
 800608c:	690e      	ldr	r6, [r1, #16]
 800608e:	2e00      	cmp	r6, #0
 8006090:	d0fa      	beq.n	8006088 <__sflush_r+0xb8>
 8006092:	680f      	ldr	r7, [r1, #0]
 8006094:	600e      	str	r6, [r1, #0]
 8006096:	1bba      	subs	r2, r7, r6
 8006098:	9201      	str	r2, [sp, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	079b      	lsls	r3, r3, #30
 800609e:	d100      	bne.n	80060a2 <__sflush_r+0xd2>
 80060a0:	694a      	ldr	r2, [r1, #20]
 80060a2:	60a2      	str	r2, [r4, #8]
 80060a4:	9b01      	ldr	r3, [sp, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	ddee      	ble.n	8006088 <__sflush_r+0xb8>
 80060aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80060ac:	0032      	movs	r2, r6
 80060ae:	001f      	movs	r7, r3
 80060b0:	0028      	movs	r0, r5
 80060b2:	9b01      	ldr	r3, [sp, #4]
 80060b4:	6a21      	ldr	r1, [r4, #32]
 80060b6:	47b8      	blx	r7
 80060b8:	2800      	cmp	r0, #0
 80060ba:	dc07      	bgt.n	80060cc <__sflush_r+0xfc>
 80060bc:	89a2      	ldrh	r2, [r4, #12]
 80060be:	2340      	movs	r3, #64	@ 0x40
 80060c0:	2001      	movs	r0, #1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	b21b      	sxth	r3, r3
 80060c6:	81a3      	strh	r3, [r4, #12]
 80060c8:	4240      	negs	r0, r0
 80060ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060cc:	9b01      	ldr	r3, [sp, #4]
 80060ce:	1836      	adds	r6, r6, r0
 80060d0:	1a1b      	subs	r3, r3, r0
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	e7e6      	b.n	80060a4 <__sflush_r+0xd4>
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	dfbffffe 	.word	0xdfbffffe

080060dc <_fflush_r>:
 80060dc:	690b      	ldr	r3, [r1, #16]
 80060de:	b570      	push	{r4, r5, r6, lr}
 80060e0:	0005      	movs	r5, r0
 80060e2:	000c      	movs	r4, r1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d102      	bne.n	80060ee <_fflush_r+0x12>
 80060e8:	2500      	movs	r5, #0
 80060ea:	0028      	movs	r0, r5
 80060ec:	bd70      	pop	{r4, r5, r6, pc}
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d004      	beq.n	80060fc <_fflush_r+0x20>
 80060f2:	6a03      	ldr	r3, [r0, #32]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <_fflush_r+0x20>
 80060f8:	f7ff fa3e 	bl	8005578 <__sinit>
 80060fc:	220c      	movs	r2, #12
 80060fe:	5ea3      	ldrsh	r3, [r4, r2]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f1      	beq.n	80060e8 <_fflush_r+0xc>
 8006104:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006106:	07d2      	lsls	r2, r2, #31
 8006108:	d404      	bmi.n	8006114 <_fflush_r+0x38>
 800610a:	059b      	lsls	r3, r3, #22
 800610c:	d402      	bmi.n	8006114 <_fflush_r+0x38>
 800610e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006110:	f7ff fba3 	bl	800585a <__retarget_lock_acquire_recursive>
 8006114:	0028      	movs	r0, r5
 8006116:	0021      	movs	r1, r4
 8006118:	f7ff ff5a 	bl	8005fd0 <__sflush_r>
 800611c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800611e:	0005      	movs	r5, r0
 8006120:	07db      	lsls	r3, r3, #31
 8006122:	d4e2      	bmi.n	80060ea <_fflush_r+0xe>
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	059b      	lsls	r3, r3, #22
 8006128:	d4df      	bmi.n	80060ea <_fflush_r+0xe>
 800612a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800612c:	f7ff fb96 	bl	800585c <__retarget_lock_release_recursive>
 8006130:	e7db      	b.n	80060ea <_fflush_r+0xe>
	...

08006134 <__malloc_lock>:
 8006134:	b510      	push	{r4, lr}
 8006136:	4802      	ldr	r0, [pc, #8]	@ (8006140 <__malloc_lock+0xc>)
 8006138:	f7ff fb8f 	bl	800585a <__retarget_lock_acquire_recursive>
 800613c:	bd10      	pop	{r4, pc}
 800613e:	46c0      	nop			@ (mov r8, r8)
 8006140:	2000036c 	.word	0x2000036c

08006144 <__malloc_unlock>:
 8006144:	b510      	push	{r4, lr}
 8006146:	4802      	ldr	r0, [pc, #8]	@ (8006150 <__malloc_unlock+0xc>)
 8006148:	f7ff fb88 	bl	800585c <__retarget_lock_release_recursive>
 800614c:	bd10      	pop	{r4, pc}
 800614e:	46c0      	nop			@ (mov r8, r8)
 8006150:	2000036c 	.word	0x2000036c

08006154 <__sread>:
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	000c      	movs	r4, r1
 8006158:	250e      	movs	r5, #14
 800615a:	5f49      	ldrsh	r1, [r1, r5]
 800615c:	f000 f942 	bl	80063e4 <_read_r>
 8006160:	2800      	cmp	r0, #0
 8006162:	db03      	blt.n	800616c <__sread+0x18>
 8006164:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006166:	181b      	adds	r3, r3, r0
 8006168:	6563      	str	r3, [r4, #84]	@ 0x54
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	89a3      	ldrh	r3, [r4, #12]
 800616e:	4a02      	ldr	r2, [pc, #8]	@ (8006178 <__sread+0x24>)
 8006170:	4013      	ands	r3, r2
 8006172:	81a3      	strh	r3, [r4, #12]
 8006174:	e7f9      	b.n	800616a <__sread+0x16>
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	ffffefff 	.word	0xffffefff

0800617c <__swrite>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	001f      	movs	r7, r3
 8006180:	898b      	ldrh	r3, [r1, #12]
 8006182:	0005      	movs	r5, r0
 8006184:	000c      	movs	r4, r1
 8006186:	0016      	movs	r6, r2
 8006188:	05db      	lsls	r3, r3, #23
 800618a:	d505      	bpl.n	8006198 <__swrite+0x1c>
 800618c:	230e      	movs	r3, #14
 800618e:	5ec9      	ldrsh	r1, [r1, r3]
 8006190:	2200      	movs	r2, #0
 8006192:	2302      	movs	r3, #2
 8006194:	f000 f912 	bl	80063bc <_lseek_r>
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	4a05      	ldr	r2, [pc, #20]	@ (80061b0 <__swrite+0x34>)
 800619c:	0028      	movs	r0, r5
 800619e:	4013      	ands	r3, r2
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	0032      	movs	r2, r6
 80061a4:	230e      	movs	r3, #14
 80061a6:	5ee1      	ldrsh	r1, [r4, r3]
 80061a8:	003b      	movs	r3, r7
 80061aa:	f000 f941 	bl	8006430 <_write_r>
 80061ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b0:	ffffefff 	.word	0xffffefff

080061b4 <__sseek>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	000c      	movs	r4, r1
 80061b8:	250e      	movs	r5, #14
 80061ba:	5f49      	ldrsh	r1, [r1, r5]
 80061bc:	f000 f8fe 	bl	80063bc <_lseek_r>
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	1c42      	adds	r2, r0, #1
 80061c4:	d103      	bne.n	80061ce <__sseek+0x1a>
 80061c6:	4a05      	ldr	r2, [pc, #20]	@ (80061dc <__sseek+0x28>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	81a3      	strh	r3, [r4, #12]
 80061cc:	bd70      	pop	{r4, r5, r6, pc}
 80061ce:	2280      	movs	r2, #128	@ 0x80
 80061d0:	0152      	lsls	r2, r2, #5
 80061d2:	4313      	orrs	r3, r2
 80061d4:	81a3      	strh	r3, [r4, #12]
 80061d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80061d8:	e7f8      	b.n	80061cc <__sseek+0x18>
 80061da:	46c0      	nop			@ (mov r8, r8)
 80061dc:	ffffefff 	.word	0xffffefff

080061e0 <__sclose>:
 80061e0:	b510      	push	{r4, lr}
 80061e2:	230e      	movs	r3, #14
 80061e4:	5ec9      	ldrsh	r1, [r1, r3]
 80061e6:	f000 f8d7 	bl	8006398 <_close_r>
 80061ea:	bd10      	pop	{r4, pc}

080061ec <__swbuf_r>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	0006      	movs	r6, r0
 80061f0:	000d      	movs	r5, r1
 80061f2:	0014      	movs	r4, r2
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d004      	beq.n	8006202 <__swbuf_r+0x16>
 80061f8:	6a03      	ldr	r3, [r0, #32]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <__swbuf_r+0x16>
 80061fe:	f7ff f9bb 	bl	8005578 <__sinit>
 8006202:	69a3      	ldr	r3, [r4, #24]
 8006204:	60a3      	str	r3, [r4, #8]
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	071b      	lsls	r3, r3, #28
 800620a:	d502      	bpl.n	8006212 <__swbuf_r+0x26>
 800620c:	6923      	ldr	r3, [r4, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <__swbuf_r+0x3a>
 8006212:	0021      	movs	r1, r4
 8006214:	0030      	movs	r0, r6
 8006216:	f000 f82b 	bl	8006270 <__swsetup_r>
 800621a:	2800      	cmp	r0, #0
 800621c:	d003      	beq.n	8006226 <__swbuf_r+0x3a>
 800621e:	2501      	movs	r5, #1
 8006220:	426d      	negs	r5, r5
 8006222:	0028      	movs	r0, r5
 8006224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	b2ef      	uxtb	r7, r5
 800622c:	1ac0      	subs	r0, r0, r3
 800622e:	6963      	ldr	r3, [r4, #20]
 8006230:	b2ed      	uxtb	r5, r5
 8006232:	4283      	cmp	r3, r0
 8006234:	dc05      	bgt.n	8006242 <__swbuf_r+0x56>
 8006236:	0021      	movs	r1, r4
 8006238:	0030      	movs	r0, r6
 800623a:	f7ff ff4f 	bl	80060dc <_fflush_r>
 800623e:	2800      	cmp	r0, #0
 8006240:	d1ed      	bne.n	800621e <__swbuf_r+0x32>
 8006242:	68a3      	ldr	r3, [r4, #8]
 8006244:	3001      	adds	r0, #1
 8006246:	3b01      	subs	r3, #1
 8006248:	60a3      	str	r3, [r4, #8]
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	701f      	strb	r7, [r3, #0]
 8006252:	6963      	ldr	r3, [r4, #20]
 8006254:	4283      	cmp	r3, r0
 8006256:	d004      	beq.n	8006262 <__swbuf_r+0x76>
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	07db      	lsls	r3, r3, #31
 800625c:	d5e1      	bpl.n	8006222 <__swbuf_r+0x36>
 800625e:	2d0a      	cmp	r5, #10
 8006260:	d1df      	bne.n	8006222 <__swbuf_r+0x36>
 8006262:	0021      	movs	r1, r4
 8006264:	0030      	movs	r0, r6
 8006266:	f7ff ff39 	bl	80060dc <_fflush_r>
 800626a:	2800      	cmp	r0, #0
 800626c:	d0d9      	beq.n	8006222 <__swbuf_r+0x36>
 800626e:	e7d6      	b.n	800621e <__swbuf_r+0x32>

08006270 <__swsetup_r>:
 8006270:	4b2d      	ldr	r3, [pc, #180]	@ (8006328 <__swsetup_r+0xb8>)
 8006272:	b570      	push	{r4, r5, r6, lr}
 8006274:	0005      	movs	r5, r0
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	000c      	movs	r4, r1
 800627a:	2800      	cmp	r0, #0
 800627c:	d004      	beq.n	8006288 <__swsetup_r+0x18>
 800627e:	6a03      	ldr	r3, [r0, #32]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <__swsetup_r+0x18>
 8006284:	f7ff f978 	bl	8005578 <__sinit>
 8006288:	230c      	movs	r3, #12
 800628a:	5ee2      	ldrsh	r2, [r4, r3]
 800628c:	0713      	lsls	r3, r2, #28
 800628e:	d423      	bmi.n	80062d8 <__swsetup_r+0x68>
 8006290:	06d3      	lsls	r3, r2, #27
 8006292:	d407      	bmi.n	80062a4 <__swsetup_r+0x34>
 8006294:	2309      	movs	r3, #9
 8006296:	602b      	str	r3, [r5, #0]
 8006298:	2340      	movs	r3, #64	@ 0x40
 800629a:	2001      	movs	r0, #1
 800629c:	4313      	orrs	r3, r2
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	4240      	negs	r0, r0
 80062a2:	e03a      	b.n	800631a <__swsetup_r+0xaa>
 80062a4:	0752      	lsls	r2, r2, #29
 80062a6:	d513      	bpl.n	80062d0 <__swsetup_r+0x60>
 80062a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062aa:	2900      	cmp	r1, #0
 80062ac:	d008      	beq.n	80062c0 <__swsetup_r+0x50>
 80062ae:	0023      	movs	r3, r4
 80062b0:	3344      	adds	r3, #68	@ 0x44
 80062b2:	4299      	cmp	r1, r3
 80062b4:	d002      	beq.n	80062bc <__swsetup_r+0x4c>
 80062b6:	0028      	movs	r0, r5
 80062b8:	f7ff fad2 	bl	8005860 <_free_r>
 80062bc:	2300      	movs	r3, #0
 80062be:	6363      	str	r3, [r4, #52]	@ 0x34
 80062c0:	2224      	movs	r2, #36	@ 0x24
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	4393      	bics	r3, r2
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	2300      	movs	r3, #0
 80062ca:	6063      	str	r3, [r4, #4]
 80062cc:	6923      	ldr	r3, [r4, #16]
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	2308      	movs	r3, #8
 80062d2:	89a2      	ldrh	r2, [r4, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10b      	bne.n	80062f6 <__swsetup_r+0x86>
 80062de:	21a0      	movs	r1, #160	@ 0xa0
 80062e0:	2280      	movs	r2, #128	@ 0x80
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	0089      	lsls	r1, r1, #2
 80062e6:	0092      	lsls	r2, r2, #2
 80062e8:	400b      	ands	r3, r1
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <__swsetup_r+0x86>
 80062ee:	0021      	movs	r1, r4
 80062f0:	0028      	movs	r0, r5
 80062f2:	f7ff f99f 	bl	8005634 <__smakebuf_r>
 80062f6:	230c      	movs	r3, #12
 80062f8:	5ee2      	ldrsh	r2, [r4, r3]
 80062fa:	2101      	movs	r1, #1
 80062fc:	0013      	movs	r3, r2
 80062fe:	400b      	ands	r3, r1
 8006300:	420a      	tst	r2, r1
 8006302:	d00b      	beq.n	800631c <__swsetup_r+0xac>
 8006304:	2300      	movs	r3, #0
 8006306:	60a3      	str	r3, [r4, #8]
 8006308:	6963      	ldr	r3, [r4, #20]
 800630a:	425b      	negs	r3, r3
 800630c:	61a3      	str	r3, [r4, #24]
 800630e:	2000      	movs	r0, #0
 8006310:	6923      	ldr	r3, [r4, #16]
 8006312:	4283      	cmp	r3, r0
 8006314:	d101      	bne.n	800631a <__swsetup_r+0xaa>
 8006316:	0613      	lsls	r3, r2, #24
 8006318:	d4be      	bmi.n	8006298 <__swsetup_r+0x28>
 800631a:	bd70      	pop	{r4, r5, r6, pc}
 800631c:	0791      	lsls	r1, r2, #30
 800631e:	d400      	bmi.n	8006322 <__swsetup_r+0xb2>
 8006320:	6963      	ldr	r3, [r4, #20]
 8006322:	60a3      	str	r3, [r4, #8]
 8006324:	e7f3      	b.n	800630e <__swsetup_r+0x9e>
 8006326:	46c0      	nop			@ (mov r8, r8)
 8006328:	20000018 	.word	0x20000018

0800632c <_putc_r>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	0006      	movs	r6, r0
 8006330:	000d      	movs	r5, r1
 8006332:	0014      	movs	r4, r2
 8006334:	2800      	cmp	r0, #0
 8006336:	d004      	beq.n	8006342 <_putc_r+0x16>
 8006338:	6a03      	ldr	r3, [r0, #32]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <_putc_r+0x16>
 800633e:	f7ff f91b 	bl	8005578 <__sinit>
 8006342:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006344:	07db      	lsls	r3, r3, #31
 8006346:	d405      	bmi.n	8006354 <_putc_r+0x28>
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	059b      	lsls	r3, r3, #22
 800634c:	d402      	bmi.n	8006354 <_putc_r+0x28>
 800634e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006350:	f7ff fa83 	bl	800585a <__retarget_lock_acquire_recursive>
 8006354:	68a3      	ldr	r3, [r4, #8]
 8006356:	3b01      	subs	r3, #1
 8006358:	60a3      	str	r3, [r4, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	da05      	bge.n	800636a <_putc_r+0x3e>
 800635e:	69a2      	ldr	r2, [r4, #24]
 8006360:	4293      	cmp	r3, r2
 8006362:	db12      	blt.n	800638a <_putc_r+0x5e>
 8006364:	b2eb      	uxtb	r3, r5
 8006366:	2b0a      	cmp	r3, #10
 8006368:	d00f      	beq.n	800638a <_putc_r+0x5e>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	6022      	str	r2, [r4, #0]
 8006370:	701d      	strb	r5, [r3, #0]
 8006372:	b2ed      	uxtb	r5, r5
 8006374:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006376:	07db      	lsls	r3, r3, #31
 8006378:	d405      	bmi.n	8006386 <_putc_r+0x5a>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	059b      	lsls	r3, r3, #22
 800637e:	d402      	bmi.n	8006386 <_putc_r+0x5a>
 8006380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006382:	f7ff fa6b 	bl	800585c <__retarget_lock_release_recursive>
 8006386:	0028      	movs	r0, r5
 8006388:	bd70      	pop	{r4, r5, r6, pc}
 800638a:	0029      	movs	r1, r5
 800638c:	0022      	movs	r2, r4
 800638e:	0030      	movs	r0, r6
 8006390:	f7ff ff2c 	bl	80061ec <__swbuf_r>
 8006394:	0005      	movs	r5, r0
 8006396:	e7ed      	b.n	8006374 <_putc_r+0x48>

08006398 <_close_r>:
 8006398:	2300      	movs	r3, #0
 800639a:	b570      	push	{r4, r5, r6, lr}
 800639c:	4d06      	ldr	r5, [pc, #24]	@ (80063b8 <_close_r+0x20>)
 800639e:	0004      	movs	r4, r0
 80063a0:	0008      	movs	r0, r1
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	f7fa fe70 	bl	8001088 <_close>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d103      	bne.n	80063b4 <_close_r+0x1c>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d000      	beq.n	80063b4 <_close_r+0x1c>
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
 80063b6:	46c0      	nop			@ (mov r8, r8)
 80063b8:	20000378 	.word	0x20000378

080063bc <_lseek_r>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	0004      	movs	r4, r0
 80063c0:	0008      	movs	r0, r1
 80063c2:	0011      	movs	r1, r2
 80063c4:	001a      	movs	r2, r3
 80063c6:	2300      	movs	r3, #0
 80063c8:	4d05      	ldr	r5, [pc, #20]	@ (80063e0 <_lseek_r+0x24>)
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	f7fa fe7d 	bl	80010ca <_lseek>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d103      	bne.n	80063dc <_lseek_r+0x20>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d000      	beq.n	80063dc <_lseek_r+0x20>
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	bd70      	pop	{r4, r5, r6, pc}
 80063de:	46c0      	nop			@ (mov r8, r8)
 80063e0:	20000378 	.word	0x20000378

080063e4 <_read_r>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	0004      	movs	r4, r0
 80063e8:	0008      	movs	r0, r1
 80063ea:	0011      	movs	r1, r2
 80063ec:	001a      	movs	r2, r3
 80063ee:	2300      	movs	r3, #0
 80063f0:	4d05      	ldr	r5, [pc, #20]	@ (8006408 <_read_r+0x24>)
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	f7fa fe2b 	bl	800104e <_read>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d103      	bne.n	8006404 <_read_r+0x20>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d000      	beq.n	8006404 <_read_r+0x20>
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	bd70      	pop	{r4, r5, r6, pc}
 8006406:	46c0      	nop			@ (mov r8, r8)
 8006408:	20000378 	.word	0x20000378

0800640c <_sbrk_r>:
 800640c:	2300      	movs	r3, #0
 800640e:	b570      	push	{r4, r5, r6, lr}
 8006410:	4d06      	ldr	r5, [pc, #24]	@ (800642c <_sbrk_r+0x20>)
 8006412:	0004      	movs	r4, r0
 8006414:	0008      	movs	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fa fe62 	bl	80010e0 <_sbrk>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d103      	bne.n	8006428 <_sbrk_r+0x1c>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d000      	beq.n	8006428 <_sbrk_r+0x1c>
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	bd70      	pop	{r4, r5, r6, pc}
 800642a:	46c0      	nop			@ (mov r8, r8)
 800642c:	20000378 	.word	0x20000378

08006430 <_write_r>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	0004      	movs	r4, r0
 8006434:	0008      	movs	r0, r1
 8006436:	0011      	movs	r1, r2
 8006438:	001a      	movs	r2, r3
 800643a:	2300      	movs	r3, #0
 800643c:	4d05      	ldr	r5, [pc, #20]	@ (8006454 <_write_r+0x24>)
 800643e:	602b      	str	r3, [r5, #0]
 8006440:	f7fa fbec 	bl	8000c1c <_write>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d103      	bne.n	8006450 <_write_r+0x20>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d000      	beq.n	8006450 <_write_r+0x20>
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	bd70      	pop	{r4, r5, r6, pc}
 8006452:	46c0      	nop			@ (mov r8, r8)
 8006454:	20000378 	.word	0x20000378

08006458 <memchr>:
 8006458:	b2c9      	uxtb	r1, r1
 800645a:	1882      	adds	r2, r0, r2
 800645c:	4290      	cmp	r0, r2
 800645e:	d101      	bne.n	8006464 <memchr+0xc>
 8006460:	2000      	movs	r0, #0
 8006462:	4770      	bx	lr
 8006464:	7803      	ldrb	r3, [r0, #0]
 8006466:	428b      	cmp	r3, r1
 8006468:	d0fb      	beq.n	8006462 <memchr+0xa>
 800646a:	3001      	adds	r0, #1
 800646c:	e7f6      	b.n	800645c <memchr+0x4>
	...

08006470 <_init>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006476:	bc08      	pop	{r3}
 8006478:	469e      	mov	lr, r3
 800647a:	4770      	bx	lr

0800647c <_fini>:
 800647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647e:	46c0      	nop			@ (mov r8, r8)
 8006480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006482:	bc08      	pop	{r3}
 8006484:	469e      	mov	lr, r3
 8006486:	4770      	bx	lr
